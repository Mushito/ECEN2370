
WAndersonLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c88  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b4c  08007e38  08007e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009984  08009984  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800998c  0800998c  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009994  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00025ce8  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d60  20025d60  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144b4  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003276  00000000  00000000  0001f55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  000227d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fce  00000000  00000000  00023c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277da  00000000  00000000  00024bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fd1  00000000  00000000  0004c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3234  00000000  00000000  00066399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001495cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059ac  00000000  00000000  00149610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e20 	.word	0x08007e20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007e20 	.word	0x08007e20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <isBoardFull>:
static const int16_t SCORE_FOUR = 100000;
static const int16_t SCORE_THREE = 1000;
static const int16_t SCORE_TWO = 100;
static const int16_t CENTER_WEIGHT = 3;

bool isBoardFull(uint8_t board[6][7]) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    for (uint8_t r = 0; r < 6; r++){
 8000598:	2300      	movs	r3, #0
 800059a:	73bb      	strb	r3, [r7, #14]
 800059c:	bf00      	nop
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d816      	bhi.n	80005d2 <isBoardFull+0x42>
        for (uint8_t c = 0; c < 7; c++){
 80005a4:	2300      	movs	r3, #0
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e00e      	b.n	80005c8 <isBoardFull+0x38>
            if (board[r][c] == 0)
 80005aa:	7bba      	ldrb	r2, [r7, #14]
 80005ac:	4613      	mov	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	441a      	add	r2, r3
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <isBoardFull+0x32>
            	return false;
 80005be:	2300      	movs	r3, #0
 80005c0:	e007      	b.n	80005d2 <isBoardFull+0x42>
        for (uint8_t c = 0; c < 7; c++){
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	3301      	adds	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d9ed      	bls.n	80005aa <isBoardFull+0x1a>
        }
    return true;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e7ff      	b.n	80005d2 <isBoardFull+0x42>
    }
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <checkWin>:

uint8_t checkWin(uint8_t board[6][7], uint8_t player) {
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	70fb      	strb	r3, [r7, #3]
    for (uint8_t r = 0; r < 6; r++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e0e8      	b.n	80007c2 <checkWin+0x1e4>
        for (uint8_t c = 0; c < 7; c++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	73bb      	strb	r3, [r7, #14]
 80005f4:	e0de      	b.n	80007b4 <checkWin+0x1d6>
            if (c <= 3 && board[r][c] == player && board[r][c + 1] == player && board[r][c + 2] == player && board[r][c + 3] == player)
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d830      	bhi.n	800065e <checkWin+0x80>
 80005fc:	7bfa      	ldrb	r2, [r7, #15]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	441a      	add	r2, r3
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	5cd3      	ldrb	r3, [r2, r3]
 800060c:	78fa      	ldrb	r2, [r7, #3]
 800060e:	429a      	cmp	r2, r3
 8000610:	d125      	bne.n	800065e <checkWin+0x80>
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	4613      	mov	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	441a      	add	r2, r3
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	3301      	adds	r3, #1
 8000622:	5cd3      	ldrb	r3, [r2, r3]
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	429a      	cmp	r2, r3
 8000628:	d119      	bne.n	800065e <checkWin+0x80>
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	441a      	add	r2, r3
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	3302      	adds	r3, #2
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	78fa      	ldrb	r2, [r7, #3]
 800063e:	429a      	cmp	r2, r3
 8000640:	d10d      	bne.n	800065e <checkWin+0x80>
 8000642:	7bfa      	ldrb	r2, [r7, #15]
 8000644:	4613      	mov	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	3303      	adds	r3, #3
 8000652:	5cd3      	ldrb	r3, [r2, r3]
 8000654:	78fa      	ldrb	r2, [r7, #3]
 8000656:	429a      	cmp	r2, r3
 8000658:	d101      	bne.n	800065e <checkWin+0x80>
            {
                return player;
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	e0b6      	b.n	80007cc <checkWin+0x1ee>
            }

            if (r <= 2 && board[r][c] == player && board[r + 1][c] == player && board[r + 2][c] == player && board[r + 3][c] == player)
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d830      	bhi.n	80006c6 <checkWin+0xe8>
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	4613      	mov	r3, r2
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	441a      	add	r2, r3
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	429a      	cmp	r2, r3
 8000678:	d125      	bne.n	80006c6 <checkWin+0xe8>
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	4613      	mov	r3, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	1a9b      	subs	r3, r3, r2
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	441a      	add	r2, r3
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	429a      	cmp	r2, r3
 8000690:	d119      	bne.n	80006c6 <checkWin+0xe8>
 8000692:	7bfa      	ldrb	r2, [r7, #15]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	330e      	adds	r3, #14
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	441a      	add	r2, r3
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	78fa      	ldrb	r2, [r7, #3]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d10d      	bne.n	80006c6 <checkWin+0xe8>
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	4613      	mov	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	3315      	adds	r3, #21
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	441a      	add	r2, r3
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	78fa      	ldrb	r2, [r7, #3]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d101      	bne.n	80006c6 <checkWin+0xe8>
            {
                return player;
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	e082      	b.n	80007cc <checkWin+0x1ee>
            }

            if (r <= 2 && c <= 3 && board[r][c] == player && board[r + 1][c + 1] == player && board[r + 2][c + 2] == player && board[r + 3][c + 3] == player)
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d836      	bhi.n	800073a <checkWin+0x15c>
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d833      	bhi.n	800073a <checkWin+0x15c>
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	441a      	add	r2, r3
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	5cd3      	ldrb	r3, [r2, r3]
 80006e2:	78fa      	ldrb	r2, [r7, #3]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d128      	bne.n	800073a <checkWin+0x15c>
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	4613      	mov	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	441a      	add	r2, r3
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	3301      	adds	r3, #1
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	78fa      	ldrb	r2, [r7, #3]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d11b      	bne.n	800073a <checkWin+0x15c>
 8000702:	7bfa      	ldrb	r2, [r7, #15]
 8000704:	4613      	mov	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	330e      	adds	r3, #14
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	441a      	add	r2, r3
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3302      	adds	r3, #2
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	78fa      	ldrb	r2, [r7, #3]
 8000718:	429a      	cmp	r2, r3
 800071a:	d10e      	bne.n	800073a <checkWin+0x15c>
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	4613      	mov	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	1a9b      	subs	r3, r3, r2
 8000724:	3315      	adds	r3, #21
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	441a      	add	r2, r3
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	3303      	adds	r3, #3
 800072e:	5cd3      	ldrb	r3, [r2, r3]
 8000730:	78fa      	ldrb	r2, [r7, #3]
 8000732:	429a      	cmp	r2, r3
 8000734:	d101      	bne.n	800073a <checkWin+0x15c>
            {
                return player;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	e048      	b.n	80007cc <checkWin+0x1ee>
            }

            if (r >= 3 && c <= 3 && board[r][c] == player && board[r - 1][c + 1] == player && board[r - 2][c + 2] == player && board[r - 3][c + 3] == player)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d936      	bls.n	80007ae <checkWin+0x1d0>
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d833      	bhi.n	80007ae <checkWin+0x1d0>
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	4613      	mov	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	441a      	add	r2, r3
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	429a      	cmp	r2, r3
 800075a:	d128      	bne.n	80007ae <checkWin+0x1d0>
 800075c:	7bfa      	ldrb	r2, [r7, #15]
 800075e:	4613      	mov	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	3b07      	subs	r3, #7
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	441a      	add	r2, r3
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	3301      	adds	r3, #1
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	429a      	cmp	r2, r3
 8000774:	d11b      	bne.n	80007ae <checkWin+0x1d0>
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	3b0e      	subs	r3, #14
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	441a      	add	r2, r3
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	3302      	adds	r3, #2
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	78fa      	ldrb	r2, [r7, #3]
 800078c:	429a      	cmp	r2, r3
 800078e:	d10e      	bne.n	80007ae <checkWin+0x1d0>
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	4613      	mov	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	3b15      	subs	r3, #21
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	441a      	add	r2, r3
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	3303      	adds	r3, #3
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d101      	bne.n	80007ae <checkWin+0x1d0>
            {
                return player;
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	e00e      	b.n	80007cc <checkWin+0x1ee>
        for (uint8_t c = 0; c < 7; c++) {
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	3301      	adds	r3, #1
 80007b2:	73bb      	strb	r3, [r7, #14]
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	f67f af1d 	bls.w	80005f6 <checkWin+0x18>
    for (uint8_t r = 0; r < 6; r++) {
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3301      	adds	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	f67f af13 	bls.w	80005f0 <checkWin+0x12>
            }
        }
    }

    return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <getNextOpenRow>:

int8_t getNextOpenRow(uint8_t board[6][7], uint8_t c) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
    for (int8_t r = 5; r >= 0; r--)
 80007e4:	2305      	movs	r3, #5
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e013      	b.n	8000812 <getNextOpenRow+0x3a>
        if (board[r][c] == 0) return r;
 80007ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	441a      	add	r2, r3
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <getNextOpenRow+0x2e>
 8000800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000804:	e00b      	b.n	800081e <getNextOpenRow+0x46>
    for (int8_t r = 5; r >= 0; r--)
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	3b01      	subs	r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	dae7      	bge.n	80007ea <getNextOpenRow+0x12>
    return -1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <scoreWindow>:

int16_t scoreWindow(uint8_t window[4], uint8_t player) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
    uint8_t countP = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]
    uint8_t countE = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	73bb      	strb	r3, [r7, #14]
	uint8_t countO = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	737b      	strb	r3, [r7, #13]
    uint8_t op;

    if (player == AI_PLAYER) {
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d102      	bne.n	8000850 <scoreWindow+0x24>
        op = HUMAN_PLAYER;
 800084a:	2301      	movs	r3, #1
 800084c:	733b      	strb	r3, [r7, #12]
 800084e:	e001      	b.n	8000854 <scoreWindow+0x28>
    } else {
        op = AI_PLAYER;
 8000850:	2302      	movs	r3, #2
 8000852:	733b      	strb	r3, [r7, #12]
    }

    for (uint8_t i = 0; i < 4; i++) {
 8000854:	2300      	movs	r3, #0
 8000856:	72fb      	strb	r3, [r7, #11]
 8000858:	e01b      	b.n	8000892 <scoreWindow+0x66>
        if (window[i] == player) countP++;
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	78fa      	ldrb	r2, [r7, #3]
 8000864:	429a      	cmp	r2, r3
 8000866:	d103      	bne.n	8000870 <scoreWindow+0x44>
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	3301      	adds	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e00d      	b.n	800088c <scoreWindow+0x60>
        else if (window[i] == op) countO++;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	7b3a      	ldrb	r2, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	d103      	bne.n	8000886 <scoreWindow+0x5a>
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	3301      	adds	r3, #1
 8000882:	737b      	strb	r3, [r7, #13]
 8000884:	e002      	b.n	800088c <scoreWindow+0x60>
        else countE++;
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	3301      	adds	r3, #1
 800088a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0; i < 4; i++) {
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	3301      	adds	r3, #1
 8000890:	72fb      	strb	r3, [r7, #11]
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d9e0      	bls.n	800085a <scoreWindow+0x2e>
    }

    if (countP == 4)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b04      	cmp	r3, #4
 800089c:	d101      	bne.n	80008a2 <scoreWindow+0x76>
    	return SCORE_FOUR;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <scoreWindow+0xc0>)
 80008a0:	e01e      	b.n	80008e0 <scoreWindow+0xb4>

    if (countP == 3 && countE == 1)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d105      	bne.n	80008b4 <scoreWindow+0x88>
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d102      	bne.n	80008b4 <scoreWindow+0x88>
    	return SCORE_THREE;
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	e015      	b.n	80008e0 <scoreWindow+0xb4>

    if (countP == 2 && countE == 2)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d104      	bne.n	80008c4 <scoreWindow+0x98>
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d101      	bne.n	80008c4 <scoreWindow+0x98>
    	return SCORE_TWO;
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	e00d      	b.n	80008e0 <scoreWindow+0xb4>

    if (countO == 3 && countE == 1)
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d109      	bne.n	80008de <scoreWindow+0xb2>
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d106      	bne.n	80008de <scoreWindow+0xb2>
    	return -SCORE_THREE;
 80008d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	425b      	negs	r3, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b21b      	sxth	r3, r3
 80008dc:	e000      	b.n	80008e0 <scoreWindow+0xb4>

    return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	ffff86a0 	.word	0xffff86a0

080008f0 <scorePosition>:

int16_t scorePosition(uint8_t board[6][7], uint8_t player) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
    int16_t score = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	83fb      	strh	r3, [r7, #30]
    uint8_t centerCnt = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	777b      	strb	r3, [r7, #29]
    for (uint8_t r = 0; r < 6; r++)
 8000904:	2300      	movs	r3, #0
 8000906:	773b      	strb	r3, [r7, #28]
 8000908:	e00f      	b.n	800092a <scorePosition+0x3a>
        if (board[r][3] == player) centerCnt++;
 800090a:	7f3a      	ldrb	r2, [r7, #28]
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	78fa      	ldrb	r2, [r7, #3]
 800091a:	429a      	cmp	r2, r3
 800091c:	d102      	bne.n	8000924 <scorePosition+0x34>
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
    for (uint8_t r = 0; r < 6; r++)
 8000924:	7f3b      	ldrb	r3, [r7, #28]
 8000926:	3301      	adds	r3, #1
 8000928:	773b      	strb	r3, [r7, #28]
 800092a:	7f3b      	ldrb	r3, [r7, #28]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d9ec      	bls.n	800090a <scorePosition+0x1a>
    score += centerCnt * CENTER_WEIGHT;
 8000930:	7f7b      	ldrb	r3, [r7, #29]
 8000932:	b29a      	uxth	r2, r3
 8000934:	2303      	movs	r3, #3
 8000936:	b29b      	uxth	r3, r3
 8000938:	fb12 f303 	smulbb	r3, r2, r3
 800093c:	b29a      	uxth	r2, r3
 800093e:	8bfb      	ldrh	r3, [r7, #30]
 8000940:	4413      	add	r3, r2
 8000942:	b29b      	uxth	r3, r3
 8000944:	83fb      	strh	r3, [r7, #30]

    uint8_t w[4];
    for (uint8_t r = 0; r < 6; r++){
 8000946:	2300      	movs	r3, #0
 8000948:	76fb      	strb	r3, [r7, #27]
 800094a:	e030      	b.n	80009ae <scorePosition+0xbe>
      for (uint8_t c = 0; c < 4; c++) {
 800094c:	2300      	movs	r3, #0
 800094e:	76bb      	strb	r3, [r7, #26]
 8000950:	e027      	b.n	80009a2 <scorePosition+0xb2>
        for (uint8_t i = 0; i < 4; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	767b      	strb	r3, [r7, #25]
 8000956:	e011      	b.n	800097c <scorePosition+0x8c>
          w[i] = board[r][c + i];
 8000958:	7efa      	ldrb	r2, [r7, #27]
 800095a:	4613      	mov	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	18d1      	adds	r1, r2, r3
 8000964:	7eba      	ldrb	r2, [r7, #26]
 8000966:	7e7b      	ldrb	r3, [r7, #25]
 8000968:	441a      	add	r2, r3
 800096a:	7e7b      	ldrb	r3, [r7, #25]
 800096c:	5c8a      	ldrb	r2, [r1, r2]
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 0; i < 4; i++)
 8000976:	7e7b      	ldrb	r3, [r7, #25]
 8000978:	3301      	adds	r3, #1
 800097a:	767b      	strb	r3, [r7, #25]
 800097c:	7e7b      	ldrb	r3, [r7, #25]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d9ea      	bls.n	8000958 <scorePosition+0x68>
        score += scoreWindow(w, player);
 8000982:	78fa      	ldrb	r2, [r7, #3]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff4e 	bl	800082c <scoreWindow>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	8bfb      	ldrh	r3, [r7, #30]
 8000996:	4413      	add	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	83fb      	strh	r3, [r7, #30]
      for (uint8_t c = 0; c < 4; c++) {
 800099c:	7ebb      	ldrb	r3, [r7, #26]
 800099e:	3301      	adds	r3, #1
 80009a0:	76bb      	strb	r3, [r7, #26]
 80009a2:	7ebb      	ldrb	r3, [r7, #26]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d9d4      	bls.n	8000952 <scorePosition+0x62>
    for (uint8_t r = 0; r < 6; r++){
 80009a8:	7efb      	ldrb	r3, [r7, #27]
 80009aa:	3301      	adds	r3, #1
 80009ac:	76fb      	strb	r3, [r7, #27]
 80009ae:	7efb      	ldrb	r3, [r7, #27]
 80009b0:	2b05      	cmp	r3, #5
 80009b2:	d9cb      	bls.n	800094c <scorePosition+0x5c>
      }
    }

    for (uint8_t c = 0; c < 7; c++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	763b      	strb	r3, [r7, #24]
 80009b8:	e031      	b.n	8000a1e <scorePosition+0x12e>
      for (uint8_t r = 0; r < 3; r++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]
 80009be:	e028      	b.n	8000a12 <scorePosition+0x122>
        for (uint8_t i = 0; i < 4; i++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	75bb      	strb	r3, [r7, #22]
 80009c4:	e012      	b.n	80009ec <scorePosition+0xfc>
          w[i] = board[r + i][c];
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	7dbb      	ldrb	r3, [r7, #22]
 80009ca:	4413      	add	r3, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	7e3a      	ldrb	r2, [r7, #24]
 80009da:	7dbb      	ldrb	r3, [r7, #22]
 80009dc:	5c8a      	ldrb	r2, [r1, r2]
 80009de:	3320      	adds	r3, #32
 80009e0:	443b      	add	r3, r7
 80009e2:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 0; i < 4; i++)
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	3301      	adds	r3, #1
 80009ea:	75bb      	strb	r3, [r7, #22]
 80009ec:	7dbb      	ldrb	r3, [r7, #22]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d9e9      	bls.n	80009c6 <scorePosition+0xd6>
        score += scoreWindow(w, player);
 80009f2:	78fa      	ldrb	r2, [r7, #3]
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff16 	bl	800082c <scoreWindow>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	8bfb      	ldrh	r3, [r7, #30]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	83fb      	strh	r3, [r7, #30]
      for (uint8_t r = 0; r < 3; r++) {
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	75fb      	strb	r3, [r7, #23]
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d9d3      	bls.n	80009c0 <scorePosition+0xd0>
    for (uint8_t c = 0; c < 7; c++){
 8000a18:	7e3b      	ldrb	r3, [r7, #24]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	763b      	strb	r3, [r7, #24]
 8000a1e:	7e3b      	ldrb	r3, [r7, #24]
 8000a20:	2b06      	cmp	r3, #6
 8000a22:	d9ca      	bls.n	80009ba <scorePosition+0xca>
      }
    }

    for (uint8_t r = 0; r < 3; r++){
 8000a24:	2300      	movs	r3, #0
 8000a26:	757b      	strb	r3, [r7, #21]
 8000a28:	e033      	b.n	8000a92 <scorePosition+0x1a2>
      for (uint8_t c = 0; c < 4; c++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	753b      	strb	r3, [r7, #20]
 8000a2e:	e02a      	b.n	8000a86 <scorePosition+0x196>
        for (uint8_t i = 0; i < 4; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	74fb      	strb	r3, [r7, #19]
 8000a34:	e014      	b.n	8000a60 <scorePosition+0x170>
          w[i] = board[r + i][c + i];
 8000a36:	7d7a      	ldrb	r2, [r7, #21]
 8000a38:	7cfb      	ldrb	r3, [r7, #19]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	18d1      	adds	r1, r2, r3
 8000a48:	7d3a      	ldrb	r2, [r7, #20]
 8000a4a:	7cfb      	ldrb	r3, [r7, #19]
 8000a4c:	441a      	add	r2, r3
 8000a4e:	7cfb      	ldrb	r3, [r7, #19]
 8000a50:	5c8a      	ldrb	r2, [r1, r2]
 8000a52:	3320      	adds	r3, #32
 8000a54:	443b      	add	r3, r7
 8000a56:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 0; i < 4; i++)
 8000a5a:	7cfb      	ldrb	r3, [r7, #19]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	74fb      	strb	r3, [r7, #19]
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d9e7      	bls.n	8000a36 <scorePosition+0x146>
        score += scoreWindow(w, player);
 8000a66:	78fa      	ldrb	r2, [r7, #3]
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fedc 	bl	800082c <scoreWindow>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	8bfb      	ldrh	r3, [r7, #30]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	83fb      	strh	r3, [r7, #30]
      for (uint8_t c = 0; c < 4; c++) {
 8000a80:	7d3b      	ldrb	r3, [r7, #20]
 8000a82:	3301      	adds	r3, #1
 8000a84:	753b      	strb	r3, [r7, #20]
 8000a86:	7d3b      	ldrb	r3, [r7, #20]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9d1      	bls.n	8000a30 <scorePosition+0x140>
    for (uint8_t r = 0; r < 3; r++){
 8000a8c:	7d7b      	ldrb	r3, [r7, #21]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	757b      	strb	r3, [r7, #21]
 8000a92:	7d7b      	ldrb	r3, [r7, #21]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d9c8      	bls.n	8000a2a <scorePosition+0x13a>
      }
    }

    for (uint8_t r = 3; r < 6; r++){
 8000a98:	2303      	movs	r3, #3
 8000a9a:	74bb      	strb	r3, [r7, #18]
 8000a9c:	e033      	b.n	8000b06 <scorePosition+0x216>
      for (uint8_t c = 0; c < 4; c++) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	747b      	strb	r3, [r7, #17]
 8000aa2:	e02a      	b.n	8000afa <scorePosition+0x20a>
        for (uint8_t i = 0; i < 4; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	743b      	strb	r3, [r7, #16]
 8000aa8:	e014      	b.n	8000ad4 <scorePosition+0x1e4>
          w[i] = board[r - i][c + i];
 8000aaa:	7cba      	ldrb	r2, [r7, #18]
 8000aac:	7c3b      	ldrb	r3, [r7, #16]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	18d1      	adds	r1, r2, r3
 8000abc:	7c7a      	ldrb	r2, [r7, #17]
 8000abe:	7c3b      	ldrb	r3, [r7, #16]
 8000ac0:	441a      	add	r2, r3
 8000ac2:	7c3b      	ldrb	r3, [r7, #16]
 8000ac4:	5c8a      	ldrb	r2, [r1, r2]
 8000ac6:	3320      	adds	r3, #32
 8000ac8:	443b      	add	r3, r7
 8000aca:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 0; i < 4; i++)
 8000ace:	7c3b      	ldrb	r3, [r7, #16]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	743b      	strb	r3, [r7, #16]
 8000ad4:	7c3b      	ldrb	r3, [r7, #16]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d9e7      	bls.n	8000aaa <scorePosition+0x1ba>
        score += scoreWindow(w, player);
 8000ada:	78fa      	ldrb	r2, [r7, #3]
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fea2 	bl	800082c <scoreWindow>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	8bfb      	ldrh	r3, [r7, #30]
 8000aee:	4413      	add	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	83fb      	strh	r3, [r7, #30]
      for (uint8_t c = 0; c < 4; c++) {
 8000af4:	7c7b      	ldrb	r3, [r7, #17]
 8000af6:	3301      	adds	r3, #1
 8000af8:	747b      	strb	r3, [r7, #17]
 8000afa:	7c7b      	ldrb	r3, [r7, #17]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d9d1      	bls.n	8000aa4 <scorePosition+0x1b4>
    for (uint8_t r = 3; r < 6; r++){
 8000b00:	7cbb      	ldrb	r3, [r7, #18]
 8000b02:	3301      	adds	r3, #1
 8000b04:	74bb      	strb	r3, [r7, #18]
 8000b06:	7cbb      	ldrb	r3, [r7, #18]
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d9c8      	bls.n	8000a9e <scorePosition+0x1ae>
      }
    }

    return score;
 8000b0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <minimax>:

int16_t minimax(uint8_t board[6][7], uint8_t depth, int16_t alpha, int16_t beta, bool maxP) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4603      	mov	r3, r0
 8000b28:	72fb      	strb	r3, [r7, #11]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	813b      	strh	r3, [r7, #8]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	80fb      	strh	r3, [r7, #6]
    uint8_t win;
    win = checkWin(board, AI_PLAYER);
 8000b32:	2102      	movs	r1, #2
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fd52 	bl	80005de <checkWin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	763b      	strb	r3, [r7, #24]
    if (win != 0) {
 8000b3e:	7e3b      	ldrb	r3, [r7, #24]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <minimax+0x3c>
        if (win == AI_PLAYER)
 8000b44:	7e3b      	ldrb	r3, [r7, #24]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d102      	bne.n	8000b50 <minimax+0x38>
            return INT16_MAX;
 8000b4a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b4e:	e0ea      	b.n	8000d26 <minimax+0x20e>
        else
            return INT16_MIN;
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <minimax+0x218>)
 8000b52:	e0e8      	b.n	8000d26 <minimax+0x20e>
    }

    win = checkWin(board, HUMAN_PLAYER);
 8000b54:	2101      	movs	r1, #1
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fd41 	bl	80005de <checkWin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	763b      	strb	r3, [r7, #24]
    if (win != 0) {
 8000b60:	7e3b      	ldrb	r3, [r7, #24]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <minimax+0x5e>
        if (win == HUMAN_PLAYER)
 8000b66:	7e3b      	ldrb	r3, [r7, #24]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <minimax+0x58>
            return INT16_MIN;
 8000b6c:	4b70      	ldr	r3, [pc, #448]	@ (8000d30 <minimax+0x218>)
 8000b6e:	e0da      	b.n	8000d26 <minimax+0x20e>
        else
            return INT16_MAX;
 8000b70:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b74:	e0d7      	b.n	8000d26 <minimax+0x20e>
    }

    if (isBoardFull(board) || depth == 0)
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fd0a 	bl	8000590 <isBoardFull>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <minimax+0x70>
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <minimax+0x7c>
    	return scorePosition(board, AI_PLAYER);
 8000b88:	2102      	movs	r1, #2
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff feb0 	bl	80008f0 <scorePosition>
 8000b90:	4603      	mov	r3, r0
 8000b92:	e0c8      	b.n	8000d26 <minimax+0x20e>

    if (maxP) {
 8000b94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d062      	beq.n	8000c62 <minimax+0x14a>
        int16_t val = INT16_MIN;
 8000b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba0:	83fb      	strh	r3, [r7, #30]
        for (uint8_t c = 0; c < 7; c++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	777b      	strb	r3, [r7, #29]
 8000ba6:	e054      	b.n	8000c52 <minimax+0x13a>
            int8_t r = getNextOpenRow(board, c);
 8000ba8:	7f7b      	ldrb	r3, [r7, #29]
 8000baa:	4619      	mov	r1, r3
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff fe13 	bl	80007d8 <getNextOpenRow>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	75bb      	strb	r3, [r7, #22]
            if (r < 0) continue;
 8000bb6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db45      	blt.n	8000c4a <minimax+0x132>
            board[r][c] = AI_PLAYER;
 8000bbe:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	441a      	add	r2, r3
 8000bcc:	7f7b      	ldrb	r3, [r7, #29]
 8000bce:	2102      	movs	r1, #2
 8000bd0:	54d1      	strb	r1, [r2, r3]
            val = MAX(val, minimax(board, depth - 1, alpha, beta, false));
 8000bd2:	7afb      	ldrb	r3, [r7, #11]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000be0:	2000      	movs	r0, #0
 8000be2:	9000      	str	r0, [sp, #0]
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff ff97 	bl	8000b18 <minimax>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dc0d      	bgt.n	8000c12 <minimax+0xfa>
 8000bf6:	7afb      	ldrb	r3, [r7, #11]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c04:	2000      	movs	r0, #0
 8000c06:	9000      	str	r0, [sp, #0]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff ff85 	bl	8000b18 <minimax>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e001      	b.n	8000c16 <minimax+0xfe>
 8000c12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c16:	83fb      	strh	r3, [r7, #30]
            board[r][c] = 0;
 8000c18:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	441a      	add	r2, r3
 8000c26:	7f7b      	ldrb	r3, [r7, #29]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	54d1      	strb	r1, [r2, r3]
            alpha = MAX(alpha, val);
 8000c2c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000c30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	bfb8      	it	lt
 8000c38:	4613      	movlt	r3, r2
 8000c3a:	813b      	strh	r3, [r7, #8]
            if (alpha >= beta) break;
 8000c3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	da08      	bge.n	8000c5a <minimax+0x142>
 8000c48:	e000      	b.n	8000c4c <minimax+0x134>
            if (r < 0) continue;
 8000c4a:	bf00      	nop
        for (uint8_t c = 0; c < 7; c++) {
 8000c4c:	7f7b      	ldrb	r3, [r7, #29]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	777b      	strb	r3, [r7, #29]
 8000c52:	7f7b      	ldrb	r3, [r7, #29]
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d9a7      	bls.n	8000ba8 <minimax+0x90>
 8000c58:	e000      	b.n	8000c5c <minimax+0x144>
            if (alpha >= beta) break;
 8000c5a:	bf00      	nop
        }
        return val;
 8000c5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c60:	e061      	b.n	8000d26 <minimax+0x20e>
    } else {
        int16_t val = INT16_MAX;
 8000c62:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c66:	837b      	strh	r3, [r7, #26]
        for (uint8_t c = 0; c < 7; c++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	767b      	strb	r3, [r7, #25]
 8000c6c:	e054      	b.n	8000d18 <minimax+0x200>
            int8_t r = getNextOpenRow(board, c);
 8000c6e:	7e7b      	ldrb	r3, [r7, #25]
 8000c70:	4619      	mov	r1, r3
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fdb0 	bl	80007d8 <getNextOpenRow>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	75fb      	strb	r3, [r7, #23]
            if (r < 0) continue;
 8000c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db45      	blt.n	8000d10 <minimax+0x1f8>
            board[r][c] = HUMAN_PLAYER;
 8000c84:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	441a      	add	r2, r3
 8000c92:	7e7b      	ldrb	r3, [r7, #25]
 8000c94:	2101      	movs	r1, #1
 8000c96:	54d1      	strb	r1, [r2, r3]
            val = MIN(val, minimax(board, depth - 1, alpha, beta, true));
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	b2d9      	uxtb	r1, r3
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	9000      	str	r0, [sp, #0]
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff ff34 	bl	8000b18 <minimax>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	db0d      	blt.n	8000cd8 <minimax+0x1c0>
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000cca:	2001      	movs	r0, #1
 8000ccc:	9000      	str	r0, [sp, #0]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff ff22 	bl	8000b18 <minimax>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	e001      	b.n	8000cdc <minimax+0x1c4>
 8000cd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000cdc:	837b      	strh	r3, [r7, #26]
            board[r][c] = 0;
 8000cde:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	441a      	add	r2, r3
 8000cec:	7e7b      	ldrb	r3, [r7, #25]
 8000cee:	2100      	movs	r1, #0
 8000cf0:	54d1      	strb	r1, [r2, r3]
            beta = MIN(beta, val);
 8000cf2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	bfa8      	it	ge
 8000cfe:	4613      	movge	r3, r2
 8000d00:	80fb      	strh	r3, [r7, #6]
            if (alpha >= beta) break;
 8000d02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	da08      	bge.n	8000d20 <minimax+0x208>
 8000d0e:	e000      	b.n	8000d12 <minimax+0x1fa>
            if (r < 0) continue;
 8000d10:	bf00      	nop
        for (uint8_t c = 0; c < 7; c++) {
 8000d12:	7e7b      	ldrb	r3, [r7, #25]
 8000d14:	3301      	adds	r3, #1
 8000d16:	767b      	strb	r3, [r7, #25]
 8000d18:	7e7b      	ldrb	r3, [r7, #25]
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d9a7      	bls.n	8000c6e <minimax+0x156>
 8000d1e:	e000      	b.n	8000d22 <minimax+0x20a>
            if (alpha >= beta) break;
 8000d20:	bf00      	nop
        }
        return val;
 8000d22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    }
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	ffff8000 	.word	0xffff8000

08000d34 <getBestMove>:

uint8_t getBestMove(uint8_t board[6][7]) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	6078      	str	r0, [r7, #4]
    int16_t bestScore = INT16_MIN;
 8000d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d40:	81fb      	strh	r3, [r7, #14]
    uint8_t bestC = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]

    for (uint8_t c = 0; c < 7; c++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	733b      	strb	r3, [r7, #12]
 8000d4a:	e038      	b.n	8000dbe <getBestMove+0x8a>

        int8_t r = getNextOpenRow(board, c);
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd41 	bl	80007d8 <getNextOpenRow>
 8000d56:	4603      	mov	r3, r0
 8000d58:	72fb      	strb	r3, [r7, #11]
        if (r < 0) //COLUMN FULL CHECK
 8000d5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db29      	blt.n	8000db6 <getBestMove+0x82>
        	continue;

        board[r][c] = AI_PLAYER;
 8000d62:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000d66:	4613      	mov	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	441a      	add	r2, r3
 8000d70:	7b3b      	ldrb	r3, [r7, #12]
 8000d72:	2102      	movs	r1, #2
 8000d74:	54d1      	strb	r1, [r2, r3]
        int16_t score = minimax(board, MAX_DEPTH - 1, INT16_MIN, INT16_MAX, false);
 8000d76:	2300      	movs	r3, #0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d7e:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <getBestMove+0x9c>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fec8 	bl	8000b18 <minimax>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	813b      	strh	r3, [r7, #8]
        board[r][c] = 0;
 8000d8c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000d90:	4613      	mov	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	441a      	add	r2, r3
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	54d1      	strb	r1, [r2, r3]
        if (score > bestScore) {
 8000da0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000da4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dd05      	ble.n	8000db8 <getBestMove+0x84>
            bestScore = score;
 8000dac:	893b      	ldrh	r3, [r7, #8]
 8000dae:	81fb      	strh	r3, [r7, #14]
            bestC = c;
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	737b      	strb	r3, [r7, #13]
 8000db4:	e000      	b.n	8000db8 <getBestMove+0x84>
        	continue;
 8000db6:	bf00      	nop
    for (uint8_t c = 0; c < 7; c++) {
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	733b      	strb	r3, [r7, #12]
 8000dbe:	7b3b      	ldrb	r3, [r7, #12]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d9c3      	bls.n	8000d4c <getBestMove+0x18>
        }
    }
    return bestC;
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	ffff8000 	.word	0xffff8000

08000dd4 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000dd8:	f002 fd6c 	bl	80038b4 <initialise_monitor_handles>
    LTCD__Init();
 8000ddc:	f000 f91a 	bl	8001014 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f8d7 	bl	8000f94 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000de6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 fa08 	bl	8001200 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000df0:	f000 fd90 	bl	8001914 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000df4:	4b02      	ldr	r3, [pc, #8]	@ (8000e00 <ApplicationInit+0x2c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000094 	.word	0x20000094

08000e04 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a59      	ldr	r2, [pc, #356]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1a:	4b57      	ldr	r3, [pc, #348]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b53      	ldr	r3, [pc, #332]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a52      	ldr	r2, [pc, #328]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b50      	ldr	r3, [pc, #320]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b4c      	ldr	r3, [pc, #304]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b49      	ldr	r3, [pc, #292]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a44      	ldr	r2, [pc, #272]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a3d      	ldr	r2, [pc, #244]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a36      	ldr	r2, [pc, #216]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b30      	ldr	r3, [pc, #192]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a2f      	ldr	r2, [pc, #188]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <LCD_GPIO_Init+0x174>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000ece:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000ed2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000edc:	2302      	movs	r3, #2
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4824      	ldr	r0, [pc, #144]	@ (8000f7c <LCD_GPIO_Init+0x178>)
 8000eec:	f002 ff04 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000ef0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ef4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4820      	ldr	r0, [pc, #128]	@ (8000f80 <LCD_GPIO_Init+0x17c>)
 8000efe:	f002 fefb 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000f02:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <LCD_GPIO_Init+0x180>)
 8000f10:	f002 fef2 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000f14:	2348      	movs	r3, #72	@ 0x48
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	@ (8000f88 <LCD_GPIO_Init+0x184>)
 8000f20:	f002 feea 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4816      	ldr	r0, [pc, #88]	@ (8000f8c <LCD_GPIO_Init+0x188>)
 8000f32:	f002 fee1 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000f36:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000f3a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <LCD_GPIO_Init+0x18c>)
 8000f44:	f002 fed8 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <LCD_GPIO_Init+0x17c>)
 8000f58:	f002 fece 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000f5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <LCD_GPIO_Init+0x18c>)
 8000f6a:	f002 fec5 	bl	8003cf8 <HAL_GPIO_Init>
}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	@ 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	40021800 	.word	0x40021800

08000f94 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	@ 0x40
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000fa2:	23f0      	movs	r3, #240	@ 0xf0
 8000fa4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000faa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fae:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000fb4:	23ff      	movs	r3, #255	@ 0xff
 8000fb6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <LTCD_Layer_Init+0x78>)
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000fd0:	23f0      	movs	r3, #240	@ 0xf0
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000fd4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <LTCD_Layer_Init+0x7c>)
 8000ff6:	f004 fad9 	bl	80055ac <HAL_LTDC_ConfigLayer>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001000:	f000 fc82 	bl	8001908 <LCD_Error_Handler>
	}
}
 8001004:	bf00      	nop
 8001006:	3740      	adds	r7, #64	@ 0x40
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000178 	.word	0x20000178
 8001010:	2000009c 	.word	0x2000009c

08001014 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <LTCD__Init+0xb0>)
 800101a:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <LTCD__Init+0xb4>)
 800101c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <LTCD__Init+0xb0>)
 8001020:	2209      	movs	r2, #9
 8001022:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <LTCD__Init+0xb0>)
 8001026:	2201      	movs	r2, #1
 8001028:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <LTCD__Init+0xb0>)
 800102c:	221d      	movs	r2, #29
 800102e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <LTCD__Init+0xb0>)
 8001032:	2203      	movs	r2, #3
 8001034:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <LTCD__Init+0xb0>)
 8001038:	f240 120d 	movw	r2, #269	@ 0x10d
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <LTCD__Init+0xb0>)
 8001040:	f240 1243 	movw	r2, #323	@ 0x143
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <LTCD__Init+0xb0>)
 8001048:	f240 1217 	movw	r2, #279	@ 0x117
 800104c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <LTCD__Init+0xb0>)
 8001050:	f240 1247 	movw	r2, #327	@ 0x147
 8001054:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <LTCD__Init+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <LTCD__Init+0xb0>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <LTCD__Init+0xb0>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <LTCD__Init+0xb8>)
 8001070:	2208      	movs	r2, #8
 8001072:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <LTCD__Init+0xb8>)
 8001076:	22c0      	movs	r2, #192	@ 0xc0
 8001078:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <LTCD__Init+0xb8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <LTCD__Init+0xb8>)
 8001082:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001088:	4810      	ldr	r0, [pc, #64]	@ (80010cc <LTCD__Init+0xb8>)
 800108a:	f005 f8e9 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <LTCD__Init+0xb0>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <LTCD__Init+0xb0>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <LTCD__Init+0xb0>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <LTCD__Init+0xb0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80010a6:	f7ff fead 	bl	8000e04 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <LTCD__Init+0xb0>)
 80010ac:	f004 f9ae 	bl	800540c <HAL_LTDC_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80010b6:	f000 fc27 	bl	8001908 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80010ba:	f000 fd52 	bl	8001b62 <ili9341_Init>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000009c 	.word	0x2000009c
 80010c8:	40016800 	.word	0x40016800
 80010cc:	20000144 	.word	0x20000144

080010d0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	460b      	mov	r3, r1
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80010e2:	88ba      	ldrh	r2, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	461a      	mov	r2, r3
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	4413      	add	r3, r2
 80010f2:	4905      	ldr	r1, [pc, #20]	@ (8001108 <LCD_Draw_Pixel+0x38>)
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000178 	.word	0x20000178

0800110c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	425b      	negs	r3, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	81fb      	strh	r3, [r7, #14]
 8001132:	e034      	b.n	800119e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	425b      	negs	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	81bb      	strh	r3, [r7, #12]
 800113c:	e024      	b.n	8001188 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800113e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001142:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001146:	fb03 f202 	mul.w	r2, r3, r2
 800114a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800114e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001152:	fb01 f303 	mul.w	r3, r1, r3
 8001156:	441a      	add	r2, r3
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	8879      	ldrh	r1, [r7, #2]
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	429a      	cmp	r2, r3
 8001162:	dc0b      	bgt.n	800117c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001164:	89ba      	ldrh	r2, [r7, #12]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4413      	add	r3, r2
 800116a:	b298      	uxth	r0, r3
 800116c:	89fa      	ldrh	r2, [r7, #14]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	883a      	ldrh	r2, [r7, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff ffaa 	bl	80010d0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 800117c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	81bb      	strh	r3, [r7, #12]
 8001188:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	429a      	cmp	r2, r3
 8001190:	ddd5      	ble.n	800113e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001196:	b29b      	uxth	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	81fb      	strh	r3, [r7, #14]
 800119e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	ddc5      	ble.n	8001134 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80011b2:	b590      	push	{r4, r7, lr}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4604      	mov	r4, r0
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	4623      	mov	r3, r4
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4603      	mov	r3, r0
 80011c6:	80bb      	strh	r3, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	81fb      	strh	r3, [r7, #14]
 80011d4:	e00b      	b.n	80011ee <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80011d6:	89fa      	ldrh	r2, [r7, #14]
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	b299      	uxth	r1, r3
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff74 	bl	80010d0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	3301      	adds	r3, #1
 80011ec:	81fb      	strh	r3, [r7, #14]
 80011ee:	89fa      	ldrh	r2, [r7, #14]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3ef      	bcc.n	80011d6 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10e      	bne.n	8001234 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e007      	b.n	800122c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800121c:	4908      	ldr	r1, [pc, #32]	@ (8001240 <LCD_Clear+0x40>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	88ba      	ldrh	r2, [r7, #4]
 8001222:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001232:	d3f3      	bcc.n	800121c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000178 	.word	0x20000178

08001244 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <LCD_SetTextColor+0x1c>)
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	8013      	strh	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000000 	.word	0x20000000

08001264 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <LCD_SetFont+0x1c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000174 	.word	0x20000174

08001284 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	603a      	str	r2, [r7, #0]
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	460b      	mov	r3, r1
 8001292:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e04c      	b.n	800133c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	e03f      	b.n	8001328 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <LCD_Draw_Char+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <LCD_Draw_Char+0xd4>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	409a      	lsls	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	fa42 f303 	asr.w	r3, r2, r3
 80012d0:	400b      	ands	r3, r1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <LCD_Draw_Char+0x5c>
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <LCD_Draw_Char+0xd0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d920      	bls.n	8001322 <LCD_Draw_Char+0x9e>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	fa42 f303 	asr.w	r3, r2, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <LCD_Draw_Char+0x80>
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <LCD_Draw_Char+0xd0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d80e      	bhi.n	8001322 <LCD_Draw_Char+0x9e>
      {
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	b29a      	uxth	r2, r3
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4413      	add	r3, r2
 800130c:	b298      	uxth	r0, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b29a      	uxth	r2, r3
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	4a10      	ldr	r2, [pc, #64]	@ (800135c <LCD_Draw_Char+0xd8>)
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fed7 	bl	80010d0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <LCD_Draw_Char+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4293      	cmp	r3, r2
 8001334:	d3b8      	bcc.n	80012a8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <LCD_Draw_Char+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	88db      	ldrh	r3, [r3, #6]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4293      	cmp	r3, r2
 8001348:	d3ab      	bcc.n	80012a2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000174 	.word	0x20000174
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	20000000 	.word	0x20000000

08001360 <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	460b      	mov	r3, r1
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	3b20      	subs	r3, #32
 8001376:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <LCD_DisplayChar+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	4907      	ldr	r1, [pc, #28]	@ (80013a0 <LCD_DisplayChar+0x40>)
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	88c9      	ldrh	r1, [r1, #6]
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	441a      	add	r2, r3
 800138e:	88b9      	ldrh	r1, [r7, #4]
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff76 	bl	8001284 <LCD_Draw_Char>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000174 	.word	0x20000174

080013a4 <LCD_DrawMenuScreen>:

void LCD_DrawMenuScreen(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    LCD_Clear(0, COLOR_BG);
 80013a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff27 	bl	8001200 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff46 	bl	8001244 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80013b8:	482d      	ldr	r0, [pc, #180]	@ (8001470 <LCD_DrawMenuScreen+0xcc>)
 80013ba:	f7ff ff53 	bl	8001264 <LCD_SetFont>
    LCD_DisplayChar(50, 40, '1');
 80013be:	2231      	movs	r2, #49	@ 0x31
 80013c0:	2128      	movs	r1, #40	@ 0x28
 80013c2:	2032      	movs	r0, #50	@ 0x32
 80013c4:	f7ff ffcc 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 60, '-');
 80013c8:	222d      	movs	r2, #45	@ 0x2d
 80013ca:	213c      	movs	r1, #60	@ 0x3c
 80013cc:	2032      	movs	r0, #50	@ 0x32
 80013ce:	f7ff ffc7 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 80, 'P');
 80013d2:	2250      	movs	r2, #80	@ 0x50
 80013d4:	2150      	movs	r1, #80	@ 0x50
 80013d6:	2032      	movs	r0, #50	@ 0x32
 80013d8:	f7ff ffc2 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 100, 'L');
 80013dc:	224c      	movs	r2, #76	@ 0x4c
 80013de:	2164      	movs	r1, #100	@ 0x64
 80013e0:	2032      	movs	r0, #50	@ 0x32
 80013e2:	f7ff ffbd 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 120, 'A');
 80013e6:	2241      	movs	r2, #65	@ 0x41
 80013e8:	2178      	movs	r1, #120	@ 0x78
 80013ea:	2032      	movs	r0, #50	@ 0x32
 80013ec:	f7ff ffb8 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 140, 'Y');
 80013f0:	2259      	movs	r2, #89	@ 0x59
 80013f2:	218c      	movs	r1, #140	@ 0x8c
 80013f4:	2032      	movs	r0, #50	@ 0x32
 80013f6:	f7ff ffb3 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 160, 'E');
 80013fa:	2245      	movs	r2, #69	@ 0x45
 80013fc:	21a0      	movs	r1, #160	@ 0xa0
 80013fe:	2032      	movs	r0, #50	@ 0x32
 8001400:	f7ff ffae 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(50, 180, 'R');
 8001404:	2252      	movs	r2, #82	@ 0x52
 8001406:	21b4      	movs	r1, #180	@ 0xb4
 8001408:	2032      	movs	r0, #50	@ 0x32
 800140a:	f7ff ffa9 	bl	8001360 <LCD_DisplayChar>

    LCD_DisplayChar(170, 40, '2');
 800140e:	2232      	movs	r2, #50	@ 0x32
 8001410:	2128      	movs	r1, #40	@ 0x28
 8001412:	20aa      	movs	r0, #170	@ 0xaa
 8001414:	f7ff ffa4 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 60, '-');
 8001418:	222d      	movs	r2, #45	@ 0x2d
 800141a:	213c      	movs	r1, #60	@ 0x3c
 800141c:	20aa      	movs	r0, #170	@ 0xaa
 800141e:	f7ff ff9f 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 80, 'P');
 8001422:	2250      	movs	r2, #80	@ 0x50
 8001424:	2150      	movs	r1, #80	@ 0x50
 8001426:	20aa      	movs	r0, #170	@ 0xaa
 8001428:	f7ff ff9a 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 100, 'L');
 800142c:	224c      	movs	r2, #76	@ 0x4c
 800142e:	2164      	movs	r1, #100	@ 0x64
 8001430:	20aa      	movs	r0, #170	@ 0xaa
 8001432:	f7ff ff95 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 120, 'A');
 8001436:	2241      	movs	r2, #65	@ 0x41
 8001438:	2178      	movs	r1, #120	@ 0x78
 800143a:	20aa      	movs	r0, #170	@ 0xaa
 800143c:	f7ff ff90 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 140, 'Y');
 8001440:	2259      	movs	r2, #89	@ 0x59
 8001442:	218c      	movs	r1, #140	@ 0x8c
 8001444:	20aa      	movs	r0, #170	@ 0xaa
 8001446:	f7ff ff8b 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 160, 'E');
 800144a:	2245      	movs	r2, #69	@ 0x45
 800144c:	21a0      	movs	r1, #160	@ 0xa0
 800144e:	20aa      	movs	r0, #170	@ 0xaa
 8001450:	f7ff ff86 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(170, 180, 'R');
 8001454:	2252      	movs	r2, #82	@ 0x52
 8001456:	21b4      	movs	r1, #180	@ 0xb4
 8001458:	20aa      	movs	r0, #170	@ 0xaa
 800145a:	f7ff ff81 	bl	8001360 <LCD_DisplayChar>

    LCD_Draw_Vertical_Line(120, 40, 240, LCD_COLOR_BLACK);
 800145e:	2300      	movs	r3, #0
 8001460:	22f0      	movs	r2, #240	@ 0xf0
 8001462:	2128      	movs	r1, #40	@ 0x28
 8001464:	2078      	movs	r0, #120	@ 0x78
 8001466:	f7ff fea4 	bl	80011b2 <LCD_Draw_Vertical_Line>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004

08001474 <LCD_DrawGameBoard>:

void LCD_DrawGameBoard(uint8_t board[6][7]) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 800147c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff febd 	bl	8001200 <LCD_Clear>

    for (uint8_t row = 0; row < BOARD_ROWS; row++) {
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e041      	b.n	8001510 <LCD_DrawGameBoard+0x9c>
        for (uint8_t col = 0; col < BOARD_COLS; col++) {
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	e038      	b.n	8001504 <LCD_DrawGameBoard+0x90>
            uint16_t x = BOARD_X_START + col * (2 * CELL_RADIUS + CELL_SPACING);
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	b29b      	uxth	r3, r3
 8001496:	015b      	lsls	r3, r3, #5
 8001498:	b29b      	uxth	r3, r3
 800149a:	3314      	adds	r3, #20
 800149c:	817b      	strh	r3, [r7, #10]
            uint16_t y = BOARD_Y_START + row * (2 * CELL_RADIUS + CELL_SPACING);
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	333c      	adds	r3, #60	@ 0x3c
 80014a8:	813b      	strh	r3, [r7, #8]
            uint16_t color = COLOR_BG;
 80014aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ae:	81bb      	strh	r3, [r7, #12]

            if (board[row][col] == 1) color = COLOR_PLAYER1;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	441a      	add	r2, r3
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d103      	bne.n	80014cc <LCD_DrawGameBoard+0x58>
 80014c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014c8:	81bb      	strh	r3, [r7, #12]
 80014ca:	e00c      	b.n	80014e6 <LCD_DrawGameBoard+0x72>
            else if (board[row][col] == 2) color = COLOR_PLAYER2;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	441a      	add	r2, r3
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d102      	bne.n	80014e6 <LCD_DrawGameBoard+0x72>
 80014e0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014e4:	81bb      	strh	r3, [r7, #12]

            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, COLOR_GRID);
 80014e6:	8939      	ldrh	r1, [r7, #8]
 80014e8:	8978      	ldrh	r0, [r7, #10]
 80014ea:	231f      	movs	r3, #31
 80014ec:	220e      	movs	r2, #14
 80014ee:	f7ff fe0d 	bl	800110c <LCD_Draw_Circle_Fill>
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS - 3, color);
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	8939      	ldrh	r1, [r7, #8]
 80014f6:	8978      	ldrh	r0, [r7, #10]
 80014f8:	220b      	movs	r2, #11
 80014fa:	f7ff fe07 	bl	800110c <LCD_Draw_Circle_Fill>
        for (uint8_t col = 0; col < BOARD_COLS; col++) {
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	3301      	adds	r3, #1
 8001502:	73bb      	strb	r3, [r7, #14]
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d9c3      	bls.n	8001492 <LCD_DrawGameBoard+0x1e>
    for (uint8_t row = 0; row < BOARD_ROWS; row++) {
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3301      	adds	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9ba      	bls.n	800148c <LCD_DrawGameBoard+0x18>
        }
    }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LCD_ClearFloatingBand>:

void LCD_ClearFloatingBand(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8001526:	2300      	movs	r3, #0
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	e012      	b.n	8001552 <LCD_ClearFloatingBand+0x32>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 800152c:	2300      	movs	r3, #0
 800152e:	80bb      	strh	r3, [r7, #4]
 8001530:	e009      	b.n	8001546 <LCD_ClearFloatingBand+0x26>
        LCD_Draw_Pixel(x, y, COLOR_BG);
 8001532:	88f9      	ldrh	r1, [r7, #6]
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fdc8 	bl	80010d0 <LCD_Draw_Pixel>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	2bef      	cmp	r3, #239	@ 0xef
 800154a:	d9f2      	bls.n	8001532 <LCD_ClearFloatingBand+0x12>
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	3301      	adds	r3, #1
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b2c      	cmp	r3, #44	@ 0x2c
 8001556:	d9e9      	bls.n	800152c <LCD_ClearFloatingBand+0xc>
      }
    }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <draw_elapsed_time>:

void draw_elapsed_time(uint8_t t) {
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    sprintf(buf, "%lu", t);
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4930      	ldr	r1, [pc, #192]	@ (8001638 <draw_elapsed_time+0xd4>)
 8001576:	4618      	mov	r0, r3
 8001578:	f005 ffb2 	bl	80074e0 <siprintf>

    uint16_t text_w = strlen(buf) * 8;
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fe35 	bl	80001f0 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29b      	uxth	r3, r3
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	837b      	strh	r3, [r7, #26]
    uint16_t text_h = 12;
 800158e:	230c      	movs	r3, #12
 8001590:	833b      	strh	r3, [r7, #24]
    uint16_t x0 = (LCD_PIXEL_WIDTH - text_w) / 2;
 8001592:	8b7b      	ldrh	r3, [r7, #26]
 8001594:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001598:	0fda      	lsrs	r2, r3, #31
 800159a:	4413      	add	r3, r2
 800159c:	105b      	asrs	r3, r3, #1
 800159e:	82fb      	strh	r3, [r7, #22]
    uint16_t y0 = LCD_PIXEL_HEIGHT - text_h - 2;
 80015a0:	8b3b      	ldrh	r3, [r7, #24]
 80015a2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80015a6:	82bb      	strh	r3, [r7, #20]

    for (uint16_t i = 0; i < strlen(buf); i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	83fb      	strh	r3, [r7, #30]
 80015ac:	e013      	b.n	80015d6 <draw_elapsed_time+0x72>
        LCD_Draw_Circle_Fill(x0 + i * 12, y0 + 4, 10, COLOR_BG);
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	461a      	mov	r2, r3
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	4413      	add	r3, r2
 80015be:	b298      	uxth	r0, r3
 80015c0:	8abb      	ldrh	r3, [r7, #20]
 80015c2:	3304      	adds	r3, #4
 80015c4:	b299      	uxth	r1, r3
 80015c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ca:	220a      	movs	r2, #10
 80015cc:	f7ff fd9e 	bl	800110c <LCD_Draw_Circle_Fill>
    for (uint16_t i = 0; i < strlen(buf); i++) {
 80015d0:	8bfb      	ldrh	r3, [r7, #30]
 80015d2:	3301      	adds	r3, #1
 80015d4:	83fb      	strh	r3, [r7, #30]
 80015d6:	8bfc      	ldrh	r4, [r7, #30]
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fe07 	bl	80001f0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	429c      	cmp	r4, r3
 80015e6:	d3e2      	bcc.n	80015ae <draw_elapsed_time+0x4a>
    }

    LCD_SetFont(&Font12x12);
 80015e8:	4814      	ldr	r0, [pc, #80]	@ (800163c <draw_elapsed_time+0xd8>)
 80015ea:	f7ff fe3b 	bl	8001264 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fe28 	bl	8001244 <LCD_SetTextColor>
    for (uint16_t i = 0; buf[i]; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	83bb      	strh	r3, [r7, #28]
 80015f8:	e011      	b.n	800161e <draw_elapsed_time+0xba>
        LCD_DisplayChar(x0 + i * 8, y0, buf[i]);
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	8afb      	ldrh	r3, [r7, #22]
 8001602:	4413      	add	r3, r2
 8001604:	b298      	uxth	r0, r3
 8001606:	8bbb      	ldrh	r3, [r7, #28]
 8001608:	3320      	adds	r3, #32
 800160a:	443b      	add	r3, r7
 800160c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001610:	8abb      	ldrh	r3, [r7, #20]
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fea4 	bl	8001360 <LCD_DisplayChar>
    for (uint16_t i = 0; buf[i]; i++) {
 8001618:	8bbb      	ldrh	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	83bb      	strh	r3, [r7, #28]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	3320      	adds	r3, #32
 8001622:	443b      	add	r3, r7
 8001624:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e6      	bne.n	80015fa <draw_elapsed_time+0x96>
    }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	08007e38 	.word	0x08007e38
 800163c:	2000000c 	.word	0x2000000c

08001640 <LCD_DrawGameOverScreen>:

void LCD_DrawGameOverScreen(uint8_t winner, uint8_t redWins, uint8_t yellowWins, uint8_t elapsedTime) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4623      	mov	r3, r4
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	4603      	mov	r3, r0
 8001654:	71bb      	strb	r3, [r7, #6]
 8001656:	460b      	mov	r3, r1
 8001658:	717b      	strb	r3, [r7, #5]
 800165a:	4613      	mov	r3, r2
 800165c:	713b      	strb	r3, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 800165e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fdcc 	bl	8001200 <LCD_Clear>
    LCD_SetFont(&Font16x24);
 8001668:	4895      	ldr	r0, [pc, #596]	@ (80018c0 <LCD_DrawGameOverScreen+0x280>)
 800166a:	f7ff fdfb 	bl	8001264 <LCD_SetFont>

    if (winner == 1) {
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d12c      	bne.n	80016ce <LCD_DrawGameOverScreen+0x8e>
        LCD_SetTextColor(LCD_COLOR_RED);
 8001674:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001678:	f7ff fde4 	bl	8001244 <LCD_SetTextColor>
        LCD_DisplayChar(40, 100, 'R');
 800167c:	2252      	movs	r2, #82	@ 0x52
 800167e:	2164      	movs	r1, #100	@ 0x64
 8001680:	2028      	movs	r0, #40	@ 0x28
 8001682:	f7ff fe6d 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'E');
 8001686:	2245      	movs	r2, #69	@ 0x45
 8001688:	2164      	movs	r1, #100	@ 0x64
 800168a:	203c      	movs	r0, #60	@ 0x3c
 800168c:	f7ff fe68 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'D');
 8001690:	2244      	movs	r2, #68	@ 0x44
 8001692:	2164      	movs	r1, #100	@ 0x64
 8001694:	2050      	movs	r0, #80	@ 0x50
 8001696:	f7ff fe63 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, ' ');
 800169a:	2220      	movs	r2, #32
 800169c:	2164      	movs	r1, #100	@ 0x64
 800169e:	2064      	movs	r0, #100	@ 0x64
 80016a0:	f7ff fe5e 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 80016a4:	2257      	movs	r2, #87	@ 0x57
 80016a6:	2164      	movs	r1, #100	@ 0x64
 80016a8:	2078      	movs	r0, #120	@ 0x78
 80016aa:	f7ff fe59 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'I');
 80016ae:	2249      	movs	r2, #73	@ 0x49
 80016b0:	2164      	movs	r1, #100	@ 0x64
 80016b2:	208c      	movs	r0, #140	@ 0x8c
 80016b4:	f7ff fe54 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'N');
 80016b8:	224e      	movs	r2, #78	@ 0x4e
 80016ba:	2164      	movs	r1, #100	@ 0x64
 80016bc:	20a0      	movs	r0, #160	@ 0xa0
 80016be:	f7ff fe4f 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'S');
 80016c2:	2253      	movs	r2, #83	@ 0x53
 80016c4:	2164      	movs	r1, #100	@ 0x64
 80016c6:	20b4      	movs	r0, #180	@ 0xb4
 80016c8:	f7ff fe4a 	bl	8001360 <LCD_DisplayChar>
 80016cc:	e050      	b.n	8001770 <LCD_DrawGameOverScreen+0x130>
    }
    else if (winner == 2) {
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d13b      	bne.n	800174c <LCD_DrawGameOverScreen+0x10c>
        LCD_SetTextColor(LCD_COLOR_YELLOW);
 80016d4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80016d8:	f7ff fdb4 	bl	8001244 <LCD_SetTextColor>
        LCD_DisplayChar(20, 100, 'Y');
 80016dc:	2259      	movs	r2, #89	@ 0x59
 80016de:	2164      	movs	r1, #100	@ 0x64
 80016e0:	2014      	movs	r0, #20
 80016e2:	f7ff fe3d 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(40, 100, 'E');
 80016e6:	2245      	movs	r2, #69	@ 0x45
 80016e8:	2164      	movs	r1, #100	@ 0x64
 80016ea:	2028      	movs	r0, #40	@ 0x28
 80016ec:	f7ff fe38 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'L');
 80016f0:	224c      	movs	r2, #76	@ 0x4c
 80016f2:	2164      	movs	r1, #100	@ 0x64
 80016f4:	203c      	movs	r0, #60	@ 0x3c
 80016f6:	f7ff fe33 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'L');
 80016fa:	224c      	movs	r2, #76	@ 0x4c
 80016fc:	2164      	movs	r1, #100	@ 0x64
 80016fe:	2050      	movs	r0, #80	@ 0x50
 8001700:	f7ff fe2e 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, 'O');
 8001704:	224f      	movs	r2, #79	@ 0x4f
 8001706:	2164      	movs	r1, #100	@ 0x64
 8001708:	2064      	movs	r0, #100	@ 0x64
 800170a:	f7ff fe29 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 800170e:	2257      	movs	r2, #87	@ 0x57
 8001710:	2164      	movs	r1, #100	@ 0x64
 8001712:	2078      	movs	r0, #120	@ 0x78
 8001714:	f7ff fe24 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, ' ');
 8001718:	2220      	movs	r2, #32
 800171a:	2164      	movs	r1, #100	@ 0x64
 800171c:	208c      	movs	r0, #140	@ 0x8c
 800171e:	f7ff fe1f 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'W');
 8001722:	2257      	movs	r2, #87	@ 0x57
 8001724:	2164      	movs	r1, #100	@ 0x64
 8001726:	20a0      	movs	r0, #160	@ 0xa0
 8001728:	f7ff fe1a 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'I');
 800172c:	2249      	movs	r2, #73	@ 0x49
 800172e:	2164      	movs	r1, #100	@ 0x64
 8001730:	20b4      	movs	r0, #180	@ 0xb4
 8001732:	f7ff fe15 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(200, 100, 'N');
 8001736:	224e      	movs	r2, #78	@ 0x4e
 8001738:	2164      	movs	r1, #100	@ 0x64
 800173a:	20c8      	movs	r0, #200	@ 0xc8
 800173c:	f7ff fe10 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(220, 100, 'S');
 8001740:	2253      	movs	r2, #83	@ 0x53
 8001742:	2164      	movs	r1, #100	@ 0x64
 8001744:	20dc      	movs	r0, #220	@ 0xdc
 8001746:	f7ff fe0b 	bl	8001360 <LCD_DisplayChar>
 800174a:	e011      	b.n	8001770 <LCD_DrawGameOverScreen+0x130>
    }
    else {
        LCD_SetTextColor(LCD_COLOR_BLACK);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fd79 	bl	8001244 <LCD_SetTextColor>
        LCD_DisplayChar(100, 100, 'T');
 8001752:	2254      	movs	r2, #84	@ 0x54
 8001754:	2164      	movs	r1, #100	@ 0x64
 8001756:	2064      	movs	r0, #100	@ 0x64
 8001758:	f7ff fe02 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'I');
 800175c:	2249      	movs	r2, #73	@ 0x49
 800175e:	2164      	movs	r1, #100	@ 0x64
 8001760:	2078      	movs	r0, #120	@ 0x78
 8001762:	f7ff fdfd 	bl	8001360 <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'E');
 8001766:	2245      	movs	r2, #69	@ 0x45
 8001768:	2164      	movs	r1, #100	@ 0x64
 800176a:	208c      	movs	r0, #140	@ 0x8c
 800176c:	f7ff fdf8 	bl	8001360 <LCD_DisplayChar>
    }

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fd67 	bl	8001244 <LCD_SetTextColor>
    LCD_DisplayChar(60, 180, 'R');
 8001776:	2252      	movs	r2, #82	@ 0x52
 8001778:	21b4      	movs	r1, #180	@ 0xb4
 800177a:	203c      	movs	r0, #60	@ 0x3c
 800177c:	f7ff fdf0 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(80, 180, 'E');
 8001780:	2245      	movs	r2, #69	@ 0x45
 8001782:	21b4      	movs	r1, #180	@ 0xb4
 8001784:	2050      	movs	r0, #80	@ 0x50
 8001786:	f7ff fdeb 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(100, 180, 'S');
 800178a:	2253      	movs	r2, #83	@ 0x53
 800178c:	21b4      	movs	r1, #180	@ 0xb4
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f7ff fde6 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(120, 180, 'T');
 8001794:	2254      	movs	r2, #84	@ 0x54
 8001796:	21b4      	movs	r1, #180	@ 0xb4
 8001798:	2078      	movs	r0, #120	@ 0x78
 800179a:	f7ff fde1 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(140, 180, 'A');
 800179e:	2241      	movs	r2, #65	@ 0x41
 80017a0:	21b4      	movs	r1, #180	@ 0xb4
 80017a2:	208c      	movs	r0, #140	@ 0x8c
 80017a4:	f7ff fddc 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(160, 180, 'R');
 80017a8:	2252      	movs	r2, #82	@ 0x52
 80017aa:	21b4      	movs	r1, #180	@ 0xb4
 80017ac:	20a0      	movs	r0, #160	@ 0xa0
 80017ae:	f7ff fdd7 	bl	8001360 <LCD_DisplayChar>
    LCD_DisplayChar(180, 180, 'T');
 80017b2:	2254      	movs	r2, #84	@ 0x54
 80017b4:	21b4      	movs	r1, #180	@ 0xb4
 80017b6:	20b4      	movs	r0, #180	@ 0xb4
 80017b8:	f7ff fdd2 	bl	8001360 <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 80017bc:	4841      	ldr	r0, [pc, #260]	@ (80018c4 <LCD_DrawGameOverScreen+0x284>)
 80017be:	f7ff fd51 	bl	8001264 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fd3e 	bl	8001244 <LCD_SetTextColor>

    char buffer[16];
    uint16_t y = 210;
 80017c8:	23d2      	movs	r3, #210	@ 0xd2
 80017ca:	837b      	strh	r3, [r7, #26]
    uint16_t x;

    // Red Wins
    sprintf(buffer, "Red Wins: %d", redWins);
 80017cc:	79ba      	ldrb	r2, [r7, #6]
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	493d      	ldr	r1, [pc, #244]	@ (80018c8 <LCD_DrawGameOverScreen+0x288>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fe83 	bl	80074e0 <siprintf>
    x = 60;
 80017da:	233c      	movs	r3, #60	@ 0x3c
 80017dc:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	77fb      	strb	r3, [r7, #31]
 80017e2:	e012      	b.n	800180a <LCD_DrawGameOverScreen+0x1ca>
        LCD_DisplayChar(x + i * 8, y, buffer[i]);
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	8b3b      	ldrh	r3, [r7, #24]
 80017ee:	4413      	add	r3, r2
 80017f0:	b298      	uxth	r0, r3
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	3320      	adds	r3, #32
 80017f6:	443b      	add	r3, r7
 80017f8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80017fc:	8b7b      	ldrh	r3, [r7, #26]
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff fdae 	bl	8001360 <LCD_DisplayChar>
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	3301      	adds	r3, #1
 8001808:	77fb      	strb	r3, [r7, #31]
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	3320      	adds	r3, #32
 800180e:	443b      	add	r3, r7
 8001810:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e5      	bne.n	80017e4 <LCD_DrawGameOverScreen+0x1a4>
    }

    // Yellow Wins
    sprintf(buffer, "Yellow Wins: %d", yellowWins);
 8001818:	797a      	ldrb	r2, [r7, #5]
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	492b      	ldr	r1, [pc, #172]	@ (80018cc <LCD_DrawGameOverScreen+0x28c>)
 8001820:	4618      	mov	r0, r3
 8001822:	f005 fe5d 	bl	80074e0 <siprintf>
    y += 14;
 8001826:	8b7b      	ldrh	r3, [r7, #26]
 8001828:	330e      	adds	r3, #14
 800182a:	837b      	strh	r3, [r7, #26]
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	77bb      	strb	r3, [r7, #30]
 8001830:	e012      	b.n	8001858 <LCD_DrawGameOverScreen+0x218>
        LCD_DisplayChar(x + i * 8, y, buffer[i]);
 8001832:	7fbb      	ldrb	r3, [r7, #30]
 8001834:	b29b      	uxth	r3, r3
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	b29a      	uxth	r2, r3
 800183a:	8b3b      	ldrh	r3, [r7, #24]
 800183c:	4413      	add	r3, r2
 800183e:	b298      	uxth	r0, r3
 8001840:	7fbb      	ldrb	r3, [r7, #30]
 8001842:	3320      	adds	r3, #32
 8001844:	443b      	add	r3, r7
 8001846:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800184a:	8b7b      	ldrh	r3, [r7, #26]
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff fd87 	bl	8001360 <LCD_DisplayChar>
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 8001852:	7fbb      	ldrb	r3, [r7, #30]
 8001854:	3301      	adds	r3, #1
 8001856:	77bb      	strb	r3, [r7, #30]
 8001858:	7fbb      	ldrb	r3, [r7, #30]
 800185a:	3320      	adds	r3, #32
 800185c:	443b      	add	r3, r7
 800185e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e5      	bne.n	8001832 <LCD_DrawGameOverScreen+0x1f2>
    }

    // Elapsed Time
    sprintf(buffer, "Time: %ds", elapsedTime);
 8001866:	793a      	ldrb	r2, [r7, #4]
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4918      	ldr	r1, [pc, #96]	@ (80018d0 <LCD_DrawGameOverScreen+0x290>)
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fe36 	bl	80074e0 <siprintf>
    y += 14;
 8001874:	8b7b      	ldrh	r3, [r7, #26]
 8001876:	330e      	adds	r3, #14
 8001878:	837b      	strh	r3, [r7, #26]
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 800187a:	2300      	movs	r3, #0
 800187c:	777b      	strb	r3, [r7, #29]
 800187e:	e012      	b.n	80018a6 <LCD_DrawGameOverScreen+0x266>
        LCD_DisplayChar(x + i * 8, y, buffer[i]);
 8001880:	7f7b      	ldrb	r3, [r7, #29]
 8001882:	b29b      	uxth	r3, r3
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	b29a      	uxth	r2, r3
 8001888:	8b3b      	ldrh	r3, [r7, #24]
 800188a:	4413      	add	r3, r2
 800188c:	b298      	uxth	r0, r3
 800188e:	7f7b      	ldrb	r3, [r7, #29]
 8001890:	3320      	adds	r3, #32
 8001892:	443b      	add	r3, r7
 8001894:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001898:	8b7b      	ldrh	r3, [r7, #26]
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fd60 	bl	8001360 <LCD_DisplayChar>
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 80018a0:	7f7b      	ldrb	r3, [r7, #29]
 80018a2:	3301      	adds	r3, #1
 80018a4:	777b      	strb	r3, [r7, #29]
 80018a6:	7f7b      	ldrb	r3, [r7, #29]
 80018a8:	3320      	adds	r3, #32
 80018aa:	443b      	add	r3, r7
 80018ac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e5      	bne.n	8001880 <LCD_DrawGameOverScreen+0x240>
    }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000004 	.word	0x20000004
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	08007e3c 	.word	0x08007e3c
 80018cc:	08007e4c 	.word	0x08007e4c
 80018d0:	08007e5c 	.word	0x08007e5c

080018d4 <LCD_DrawFloatingCoin>:





void LCD_DrawFloatingCoin(uint8_t column, uint16_t color) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	80bb      	strh	r3, [r7, #4]
	uint16_t x = BOARD_X_START + column * (2 * CELL_RADIUS + CELL_SPACING);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3314      	adds	r3, #20
 80018ee:	81fb      	strh	r3, [r7, #14]
	uint16_t y = BOARD_Y_START - 30;
 80018f0:	231e      	movs	r3, #30
 80018f2:	81bb      	strh	r3, [r7, #12]

    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	89b9      	ldrh	r1, [r7, #12]
 80018f8:	89f8      	ldrh	r0, [r7, #14]
 80018fa:	220e      	movs	r2, #14
 80018fc:	f7ff fc06 	bl	800110c <LCD_Draw_Circle_Fill>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <LCD_Error_Handler+0x8>

08001914 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001918:	f001 fc84 	bl	8003224 <STMPE811_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b02      	cmp	r3, #2
 8001920:	d001      	beq.n	8001926 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001922:	bf00      	nop
 8001924:	e7fd      	b.n	8001922 <InitializeLCDTouch+0xe>
  }
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}

0800192a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 fd2e 	bl	8003394 <STMPE811_ReadTouch>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <placeCoin>:
 *      Author: willa
 */

#include "game_state.h"

int8_t placeCoin(uint8_t board[6][7], uint8_t col, uint8_t player) {
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	4613      	mov	r3, r2
 8001950:	70bb      	strb	r3, [r7, #2]
    for (int8_t row = 5; row >= 0; row--) {
 8001952:	2305      	movs	r3, #5
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e01d      	b.n	8001994 <placeCoin+0x52>
        if (board[row][col] == 0) {
 8001958:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	441a      	add	r2, r3
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10c      	bne.n	8001988 <placeCoin+0x46>
            board[row][col] = player;
 800196e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	441a      	add	r2, r3
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	78b9      	ldrb	r1, [r7, #2]
 8001980:	54d1      	strb	r1, [r2, r3]
            return row;
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	e00b      	b.n	80019a0 <placeCoin+0x5e>
    for (int8_t row = 5; row >= 0; row--) {
 8001988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	dadd      	bge.n	8001958 <placeCoin+0x16>
        }
    }
    return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <countDirection>:

static uint8_t countDirection(uint8_t board[6][7], uint8_t startRow, uint8_t startCol, uint8_t chngRow, uint8_t chngCol, uint8_t player) {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	460b      	mov	r3, r1
 80019c0:	70bb      	strb	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
	uint8_t count = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
	uint8_t r = startRow + chngRow;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	4413      	add	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
	uint8_t c = startCol + chngCol;
 80019d2:	78ba      	ldrb	r2, [r7, #2]
 80019d4:	7e3b      	ldrb	r3, [r7, #24]
 80019d6:	4413      	add	r3, r2
 80019d8:	737b      	strb	r3, [r7, #13]
    while ((r >= 0) && (r < 6) && (c >= 0) && (c < 7) && (board[r][c] == player)) {
 80019da:	e00a      	b.n	80019f2 <countDirection+0x46>
        count++;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
        r += chngRow;
 80019e2:	7bba      	ldrb	r2, [r7, #14]
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	4413      	add	r3, r2
 80019e8:	73bb      	strb	r3, [r7, #14]
        c += chngCol;
 80019ea:	7b7a      	ldrb	r2, [r7, #13]
 80019ec:	7e3b      	ldrb	r3, [r7, #24]
 80019ee:	4413      	add	r3, r2
 80019f0:	737b      	strb	r3, [r7, #13]
    while ((r >= 0) && (r < 6) && (c >= 0) && (c < 7) && (board[r][c] == player)) {
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d80d      	bhi.n	8001a14 <countDirection+0x68>
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d80a      	bhi.n	8001a14 <countDirection+0x68>
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	441a      	add	r2, r3
 8001a0a:	7b7b      	ldrb	r3, [r7, #13]
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	7f3a      	ldrb	r2, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d0e3      	beq.n	80019dc <countDirection+0x30>
    }
    return count;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <checkWinOrTie>:


// 1 IS PLAYER WIN
// 2 IS TIE
// 0 NO WIN OR TIE, GAME STILL GOING
uint8_t checkWinOrTie(uint8_t board[6][7], uint8_t row, uint8_t col, uint8_t player) {
 8001a22:	b590      	push	{r4, r7, lr}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af02      	add	r7, sp, #8
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	4608      	mov	r0, r1
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	70fb      	strb	r3, [r7, #3]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70bb      	strb	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
    if (1 + countDirection(board, row, col, 0, 1, player) +
 8001a3c:	78ba      	ldrb	r2, [r7, #2]
 8001a3e:	78f9      	ldrb	r1, [r7, #3]
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffae 	bl	80019ac <countDirection>
 8001a50:	4603      	mov	r3, r0
 8001a52:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 0, -1, player) >= 4)
 8001a54:	78ba      	ldrb	r2, [r7, #2]
 8001a56:	78f9      	ldrb	r1, [r7, #3]
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	23ff      	movs	r3, #255	@ 0xff
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <countDirection>
 8001a68:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 0, 1, player) +
 8001a6a:	4423      	add	r3, r4
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	dd01      	ble.n	8001a74 <checkWinOrTie+0x52>
        return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e072      	b.n	8001b5a <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, 1, 0, player) +
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	78f9      	ldrb	r1, [r7, #3]
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff92 	bl	80019ac <countDirection>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, 0, player) >= 4)
 8001a8c:	78ba      	ldrb	r2, [r7, #2]
 8001a8e:	78f9      	ldrb	r1, [r7, #3]
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	23ff      	movs	r3, #255	@ 0xff
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ff86 	bl	80019ac <countDirection>
 8001aa0:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 0, player) +
 8001aa2:	4423      	add	r3, r4
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	dd01      	ble.n	8001aac <checkWinOrTie+0x8a>
        return 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e056      	b.n	8001b5a <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, 1, 1, player) +
 8001aac:	78ba      	ldrb	r2, [r7, #2]
 8001aae:	78f9      	ldrb	r1, [r7, #3]
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff76 	bl	80019ac <countDirection>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, -1, player) >= 4)
 8001ac4:	78ba      	ldrb	r2, [r7, #2]
 8001ac6:	78f9      	ldrb	r1, [r7, #3]
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	23ff      	movs	r3, #255	@ 0xff
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	23ff      	movs	r3, #255	@ 0xff
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff6a 	bl	80019ac <countDirection>
 8001ad8:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 1, player) +
 8001ada:	4423      	add	r3, r4
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	dd01      	ble.n	8001ae4 <checkWinOrTie+0xc2>
        return 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e03a      	b.n	8001b5a <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, -1, 1, player) +
 8001ae4:	78ba      	ldrb	r2, [r7, #2]
 8001ae6:	78f9      	ldrb	r1, [r7, #3]
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	23ff      	movs	r3, #255	@ 0xff
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff5a 	bl	80019ac <countDirection>
 8001af8:	4603      	mov	r3, r0
 8001afa:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 1, -1, player) >= 4)
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	78f9      	ldrb	r1, [r7, #3]
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	23ff      	movs	r3, #255	@ 0xff
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff4e 	bl	80019ac <countDirection>
 8001b10:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, -1, 1, player) +
 8001b12:	4423      	add	r3, r4
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	dd01      	ble.n	8001b1c <checkWinOrTie+0xfa>
        return 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01e      	b.n	8001b5a <checkWinOrTie+0x138>

    for (uint8_t r = 0; r < 6; r++) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e017      	b.n	8001b52 <checkWinOrTie+0x130>
        for (uint8_t c = 0; c < 7; c++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]
 8001b26:	e00e      	b.n	8001b46 <checkWinOrTie+0x124>
            if (board[r][c] == 0)
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	441a      	add	r2, r3
 8001b34:	7bbb      	ldrb	r3, [r7, #14]
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <checkWinOrTie+0x11e>
                return 0; // GAME STILL RUNNING
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e00c      	b.n	8001b5a <checkWinOrTie+0x138>
        for (uint8_t c = 0; c < 7; c++) {
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73bb      	strb	r3, [r7, #14]
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d9ed      	bls.n	8001b28 <checkWinOrTie+0x106>
    for (uint8_t r = 0; r < 6; r++) {
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d9e4      	bls.n	8001b22 <checkWinOrTie+0x100>
        }
    }

    return 2;
 8001b58:	2302      	movs	r3, #2
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}

08001b62 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001b66:	f000 f9ff 	bl	8001f68 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001b6a:	20ca      	movs	r0, #202	@ 0xca
 8001b6c:	f000 f943 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001b70:	20c3      	movs	r0, #195	@ 0xc3
 8001b72:	f000 f94d 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001b76:	2008      	movs	r0, #8
 8001b78:	f000 f94a 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001b7c:	2050      	movs	r0, #80	@ 0x50
 8001b7e:	f000 f947 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001b82:	20cf      	movs	r0, #207	@ 0xcf
 8001b84:	f000 f937 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f941 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001b8e:	20c1      	movs	r0, #193	@ 0xc1
 8001b90:	f000 f93e 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001b94:	2030      	movs	r0, #48	@ 0x30
 8001b96:	f000 f93b 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001b9a:	20ed      	movs	r0, #237	@ 0xed
 8001b9c:	f000 f92b 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001ba0:	2064      	movs	r0, #100	@ 0x64
 8001ba2:	f000 f935 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f000 f932 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001bac:	2012      	movs	r0, #18
 8001bae:	f000 f92f 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001bb2:	2081      	movs	r0, #129	@ 0x81
 8001bb4:	f000 f92c 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001bb8:	20e8      	movs	r0, #232	@ 0xe8
 8001bba:	f000 f91c 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001bbe:	2085      	movs	r0, #133	@ 0x85
 8001bc0:	f000 f926 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 f923 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001bca:	2078      	movs	r0, #120	@ 0x78
 8001bcc:	f000 f920 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001bd0:	20cb      	movs	r0, #203	@ 0xcb
 8001bd2:	f000 f910 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001bd6:	2039      	movs	r0, #57	@ 0x39
 8001bd8:	f000 f91a 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001bdc:	202c      	movs	r0, #44	@ 0x2c
 8001bde:	f000 f917 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f914 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001be8:	2034      	movs	r0, #52	@ 0x34
 8001bea:	f000 f911 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f000 f90e 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001bf4:	20f7      	movs	r0, #247	@ 0xf7
 8001bf6:	f000 f8fe 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001bfa:	2020      	movs	r0, #32
 8001bfc:	f000 f908 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c00:	20ea      	movs	r0, #234	@ 0xea
 8001c02:	f000 f8f8 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f902 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f8ff 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001c12:	20b1      	movs	r0, #177	@ 0xb1
 8001c14:	f000 f8ef 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f8f9 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c1e:	201b      	movs	r0, #27
 8001c20:	f000 f8f6 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c24:	20b6      	movs	r0, #182	@ 0xb6
 8001c26:	f000 f8e6 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f000 f8f0 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001c30:	20a2      	movs	r0, #162	@ 0xa2
 8001c32:	f000 f8ed 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001c36:	20c0      	movs	r0, #192	@ 0xc0
 8001c38:	f000 f8dd 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c3c:	2010      	movs	r0, #16
 8001c3e:	f000 f8e7 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001c42:	20c1      	movs	r0, #193	@ 0xc1
 8001c44:	f000 f8d7 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f000 f8e1 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001c4e:	20c5      	movs	r0, #197	@ 0xc5
 8001c50:	f000 f8d1 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001c54:	2045      	movs	r0, #69	@ 0x45
 8001c56:	f000 f8db 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001c5a:	2015      	movs	r0, #21
 8001c5c:	f000 f8d8 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001c60:	20c7      	movs	r0, #199	@ 0xc7
 8001c62:	f000 f8c8 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001c66:	2090      	movs	r0, #144	@ 0x90
 8001c68:	f000 f8d2 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001c6c:	2036      	movs	r0, #54	@ 0x36
 8001c6e:	f000 f8c2 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001c72:	20c8      	movs	r0, #200	@ 0xc8
 8001c74:	f000 f8cc 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001c78:	20f2      	movs	r0, #242	@ 0xf2
 8001c7a:	f000 f8bc 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f8c6 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001c84:	20b0      	movs	r0, #176	@ 0xb0
 8001c86:	f000 f8b6 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001c8a:	20c2      	movs	r0, #194	@ 0xc2
 8001c8c:	f000 f8c0 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c90:	20b6      	movs	r0, #182	@ 0xb6
 8001c92:	f000 f8b0 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c96:	200a      	movs	r0, #10
 8001c98:	f000 f8ba 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001c9c:	20a7      	movs	r0, #167	@ 0xa7
 8001c9e:	f000 f8b7 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001ca2:	2027      	movs	r0, #39	@ 0x27
 8001ca4:	f000 f8b4 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001ca8:	2004      	movs	r0, #4
 8001caa:	f000 f8b1 	bl	8001e10 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001cae:	202a      	movs	r0, #42	@ 0x2a
 8001cb0:	f000 f8a1 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f8ab 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 f8a8 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 f8a5 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001cc6:	20ef      	movs	r0, #239	@ 0xef
 8001cc8:	f000 f8a2 	bl	8001e10 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001ccc:	202b      	movs	r0, #43	@ 0x2b
 8001cce:	f000 f892 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f89c 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f899 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 f896 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001ce4:	203f      	movs	r0, #63	@ 0x3f
 8001ce6:	f000 f893 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001cea:	20f6      	movs	r0, #246	@ 0xf6
 8001cec:	f000 f883 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f000 f88d 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f000 f88a 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f000 f887 	bl	8001e10 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d02:	202c      	movs	r0, #44	@ 0x2c
 8001d04:	f000 f877 	bl	8001df6 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d08:	20c8      	movs	r0, #200	@ 0xc8
 8001d0a:	f000 f9e9 	bl	80020e0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001d0e:	2026      	movs	r0, #38	@ 0x26
 8001d10:	f000 f871 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f000 f87b 	bl	8001e10 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001d1a:	20e0      	movs	r0, #224	@ 0xe0
 8001d1c:	f000 f86b 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001d20:	200f      	movs	r0, #15
 8001d22:	f000 f875 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001d26:	2029      	movs	r0, #41	@ 0x29
 8001d28:	f000 f872 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001d2c:	2024      	movs	r0, #36	@ 0x24
 8001d2e:	f000 f86f 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001d32:	200c      	movs	r0, #12
 8001d34:	f000 f86c 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001d38:	200e      	movs	r0, #14
 8001d3a:	f000 f869 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d3e:	2009      	movs	r0, #9
 8001d40:	f000 f866 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001d44:	204e      	movs	r0, #78	@ 0x4e
 8001d46:	f000 f863 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d4a:	2078      	movs	r0, #120	@ 0x78
 8001d4c:	f000 f860 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001d50:	203c      	movs	r0, #60	@ 0x3c
 8001d52:	f000 f85d 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d56:	2009      	movs	r0, #9
 8001d58:	f000 f85a 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001d5c:	2013      	movs	r0, #19
 8001d5e:	f000 f857 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d62:	2005      	movs	r0, #5
 8001d64:	f000 f854 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001d68:	2017      	movs	r0, #23
 8001d6a:	f000 f851 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d6e:	2011      	movs	r0, #17
 8001d70:	f000 f84e 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 f84b 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001d7a:	20e1      	movs	r0, #225	@ 0xe1
 8001d7c:	f000 f83b 	bl	8001df6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f845 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001d86:	2016      	movs	r0, #22
 8001d88:	f000 f842 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d8c:	201b      	movs	r0, #27
 8001d8e:	f000 f83f 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d92:	2004      	movs	r0, #4
 8001d94:	f000 f83c 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d98:	2011      	movs	r0, #17
 8001d9a:	f000 f839 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001d9e:	2007      	movs	r0, #7
 8001da0:	f000 f836 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001da4:	2031      	movs	r0, #49	@ 0x31
 8001da6:	f000 f833 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001daa:	2033      	movs	r0, #51	@ 0x33
 8001dac:	f000 f830 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001db0:	2042      	movs	r0, #66	@ 0x42
 8001db2:	f000 f82d 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001db6:	2005      	movs	r0, #5
 8001db8:	f000 f82a 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001dbc:	200c      	movs	r0, #12
 8001dbe:	f000 f827 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f000 f824 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001dc8:	2028      	movs	r0, #40	@ 0x28
 8001dca:	f000 f821 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001dce:	202f      	movs	r0, #47	@ 0x2f
 8001dd0:	f000 f81e 	bl	8001e10 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001dd4:	200f      	movs	r0, #15
 8001dd6:	f000 f81b 	bl	8001e10 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001dda:	2011      	movs	r0, #17
 8001ddc:	f000 f80b 	bl	8001df6 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001de0:	20c8      	movs	r0, #200	@ 0xc8
 8001de2:	f000 f97d 	bl	80020e0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001de6:	2029      	movs	r0, #41	@ 0x29
 8001de8:	f000 f805 	bl	8001df6 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001dec:	202c      	movs	r0, #44	@ 0x2c
 8001dee:	f000 f802 	bl	8001df6 <ili9341_Write_Reg>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f94a 	bl	800209c <LCD_IO_WriteReg>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f91b 	bl	8002058 <LCD_IO_WriteData>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e30:	4819      	ldr	r0, [pc, #100]	@ (8001e98 <SPI_Init+0x6c>)
 8001e32:	f004 fdf4 	bl	8006a1e <HAL_SPI_GetState>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d12b      	bne.n	8001e94 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <SPI_Init+0x6c>)
 8001e3e:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <SPI_Init+0x70>)
 8001e40:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <SPI_Init+0x6c>)
 8001e44:	2218      	movs	r2, #24
 8001e46:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <SPI_Init+0x6c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <SPI_Init+0x6c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <SPI_Init+0x6c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <SPI_Init+0x6c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <SPI_Init+0x6c>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <SPI_Init+0x6c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <SPI_Init+0x6c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <SPI_Init+0x6c>)
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <SPI_Init+0x6c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <SPI_Init+0x6c>)
 8001e82:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e86:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001e88:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <SPI_Init+0x6c>)
 8001e8a:	f000 f833 	bl	8001ef4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e8e:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <SPI_Init+0x6c>)
 8001e90:	f004 fbd0 	bl	8006634 <HAL_SPI_Init>
  }
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20025978 	.word	0x20025978
 8001e9c:	40015000 	.word	0x40015000

08001ea0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <SPI_Write+0x34>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1db9      	adds	r1, r7, #6
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <SPI_Write+0x38>)
 8001eb8:	f004 fc6d 	bl	8006796 <HAL_SPI_Transmit>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001ec6:	f000 f809 	bl	8001edc <SPI_Error>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000014 	.word	0x20000014
 8001ed8:	20025978 	.word	0x20025978

08001edc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <SPI_Error+0x14>)
 8001ee2:	f004 fc30 	bl	8006746 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001ee6:	f7ff ffa1 	bl	8001e2c <SPI_Init>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20025978 	.word	0x20025978

08001ef4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	4a16      	ldr	r2, [pc, #88]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	4a0f      	ldr	r2, [pc, #60]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <SPI_MspInit+0x6c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001f34:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001f42:	2301      	movs	r3, #1
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <SPI_MspInit+0x70>)
 8001f52:	f001 fed1 	bl	8003cf8 <HAL_GPIO_Init>
}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	@ 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40021400 	.word	0x40021400

08001f68 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <LCD_IO_Init+0xe0>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d164      	bne.n	8002040 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <LCD_IO_Init+0xe0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <LCD_IO_Init+0xe4>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	4a31      	ldr	r2, [pc, #196]	@ (800204c <LCD_IO_Init+0xe4>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <LCD_IO_Init+0xe4>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4827      	ldr	r0, [pc, #156]	@ (8002050 <LCD_IO_Init+0xe8>)
 8001fb2:	f001 fea1 	bl	8003cf8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <LCD_IO_Init+0xe4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a23      	ldr	r2, [pc, #140]	@ (800204c <LCD_IO_Init+0xe4>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b21      	ldr	r3, [pc, #132]	@ (800204c <LCD_IO_Init+0xe4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4819      	ldr	r0, [pc, #100]	@ (8002050 <LCD_IO_Init+0xe8>)
 8001fec:	f001 fe84 	bl	8003cf8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <LCD_IO_Init+0xe4>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <LCD_IO_Init+0xe4>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <LCD_IO_Init+0xe4>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800200c:	2304      	movs	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	480c      	ldr	r0, [pc, #48]	@ (8002054 <LCD_IO_Init+0xec>)
 8002024:	f001 fe68 	bl	8003cf8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002028:	2200      	movs	r2, #0
 800202a:	2104      	movs	r1, #4
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <LCD_IO_Init+0xec>)
 800202e:	f002 f91b 	bl	8004268 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002032:	2201      	movs	r2, #1
 8002034:	2104      	movs	r1, #4
 8002036:	4807      	ldr	r0, [pc, #28]	@ (8002054 <LCD_IO_Init+0xec>)
 8002038:	f002 f916 	bl	8004268 <HAL_GPIO_WritePin>

    SPI_Init();
 800203c:	f7ff fef6 	bl	8001e2c <SPI_Init>
  }
}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200259d0 	.word	0x200259d0
 800204c:	40023800 	.word	0x40023800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40020800 	.word	0x40020800

08002058 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002068:	480a      	ldr	r0, [pc, #40]	@ (8002094 <LCD_IO_WriteData+0x3c>)
 800206a:	f002 f8fd 	bl	8004268 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800206e:	2200      	movs	r2, #0
 8002070:	2104      	movs	r1, #4
 8002072:	4809      	ldr	r0, [pc, #36]	@ (8002098 <LCD_IO_WriteData+0x40>)
 8002074:	f002 f8f8 	bl	8004268 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff10 	bl	8001ea0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002080:	2201      	movs	r2, #1
 8002082:	2104      	movs	r1, #4
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <LCD_IO_WriteData+0x40>)
 8002086:	f002 f8ef 	bl	8004268 <HAL_GPIO_WritePin>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40020800 	.word	0x40020800

0800209c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ac:	480a      	ldr	r0, [pc, #40]	@ (80020d8 <LCD_IO_WriteReg+0x3c>)
 80020ae:	f002 f8db 	bl	8004268 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80020b2:	2200      	movs	r2, #0
 80020b4:	2104      	movs	r1, #4
 80020b6:	4809      	ldr	r0, [pc, #36]	@ (80020dc <LCD_IO_WriteReg+0x40>)
 80020b8:	f002 f8d6 	bl	8004268 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff feed 	bl	8001ea0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020c6:	2201      	movs	r2, #1
 80020c8:	2104      	movs	r1, #4
 80020ca:	4804      	ldr	r0, [pc, #16]	@ (80020dc <LCD_IO_WriteReg+0x40>)
 80020cc:	f002 f8cc 	bl	8004268 <HAL_GPIO_WritePin>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40020800 	.word	0x40020800

080020e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 fccf 	bl	8003a8c <HAL_Delay>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
  HAL_Init();
 80020fe:	f001 fc53 	bl	80039a8 <HAL_Init>

  SystemClock_Config();
 8002102:	f000 f959 	bl	80023b8 <SystemClock_Config>

  MX_GPIO_Init();
 8002106:	f000 fb67 	bl	80027d8 <MX_GPIO_Init>
  MX_LTDC_Init();
 800210a:	f000 f9ff 	bl	800250c <MX_LTDC_Init>
  MX_RNG_Init();
 800210e:	f000 faaf 	bl	8002670 <MX_RNG_Init>
  MX_SPI5_Init();
 8002112:	f000 fac1 	bl	8002698 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002116:	f000 f9b9 	bl	800248c <MX_I2C3_Init>
  ApplicationInit();
 800211a:	f7fe fe5b 	bl	8000dd4 <ApplicationInit>

  game_seconds  = 0;
 800211e:	4b9a      	ldr	r3, [pc, #616]	@ (8002388 <main+0x290>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  seconds_flag = true;
 8002124:	4b99      	ldr	r3, [pc, #612]	@ (800238c <main+0x294>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]

  HAL_Delay(500);
 800212a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800212e:	f001 fcad 	bl	8003a8c <HAL_Delay>

  STMPE811_TouchData touch;
  while (1){
	  gameConfig();
 8002132:	f000 fd05 	bl	8002b40 <gameConfig>
  while (1){
      if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fbf6 	bl	800192a <returnTouchStateAndLocation>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f8      	bne.n	8002136 <main+0x3e>
          if (touch.y < 120) {
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b77      	cmp	r3, #119	@ 0x77
 8002148:	d803      	bhi.n	8002152 <main+0x5a>
              onePlayerMode = ONE_PLAYER_MODE;
 800214a:	4b91      	ldr	r3, [pc, #580]	@ (8002390 <main+0x298>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
          } else {
              onePlayerMode = TWO_PLAYER_MODE;
          }
          break;
 8002150:	e002      	b.n	8002158 <main+0x60>
              onePlayerMode = TWO_PLAYER_MODE;
 8002152:	4b8f      	ldr	r3, [pc, #572]	@ (8002390 <main+0x298>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
      }
  }
  LCD_DrawGameBoard(board);
 8002158:	488e      	ldr	r0, [pc, #568]	@ (8002394 <main+0x29c>)
 800215a:	f7ff f98b 	bl	8001474 <LCD_DrawGameBoard>
  MX_TIM2_Init();
 800215e:	f000 fad1 	bl	8002704 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002162:	488d      	ldr	r0, [pc, #564]	@ (8002398 <main+0x2a0>)
 8002164:	f004 fd96 	bl	8006c94 <HAL_TIM_Base_Start_IT>

  switch (onePlayerMode) {
 8002168:	4b89      	ldr	r3, [pc, #548]	@ (8002390 <main+0x298>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d04f      	beq.n	8002210 <main+0x118>
 8002170:	2b01      	cmp	r3, #1
 8002172:	f000 80eb 	beq.w	800234c <main+0x254>
 8002176:	e0ef      	b.n	8002358 <main+0x260>
      case 0: // 2 PLAYER
    	  while (!gameOver) {
    		  if (currentPlayer == 1) {
 8002178:	4b88      	ldr	r3, [pc, #544]	@ (800239c <main+0x2a4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d104      	bne.n	800218a <main+0x92>
    			  color = COLOR_PLAYER1;
 8002180:	4b87      	ldr	r3, [pc, #540]	@ (80023a0 <main+0x2a8>)
 8002182:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	e003      	b.n	8002192 <main+0x9a>
    		  } else {
    			  color = COLOR_PLAYER2;
 800218a:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <main+0x2a8>)
 800218c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002190:	801a      	strh	r2, [r3, #0]
    		  }
    		  HAL_Delay(50);
 8002192:	2032      	movs	r0, #50	@ 0x32
 8002194:	f001 fc7a 	bl	8003a8c <HAL_Delay>
    		  LCD_DrawFloatingCoin(currentColumn, color);
 8002198:	4b82      	ldr	r3, [pc, #520]	@ (80023a4 <main+0x2ac>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <main+0x2a8>)
 800219e:	8812      	ldrh	r2, [r2, #0]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb96 	bl	80018d4 <LCD_DrawFloatingCoin>

    		  if (seconds_flag) {
 80021a8:	4b78      	ldr	r3, [pc, #480]	@ (800238c <main+0x294>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <main+0xcc>
    		    seconds_flag = false;
 80021b2:	4b76      	ldr	r3, [pc, #472]	@ (800238c <main+0x294>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
    		    draw_elapsed_time(game_seconds);
 80021b8:	4b73      	ldr	r3, [pc, #460]	@ (8002388 <main+0x290>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f9d0 	bl	8001564 <draw_elapsed_time>
    		  }

    		  if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fbaf 	bl	800192a <returnTouchStateAndLocation>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11e      	bne.n	8002210 <main+0x118>
    			  LCD_ClearFloatingBand();
 80021d2:	f7ff f9a5 	bl	8001520 <LCD_ClearFloatingBand>
    			  if (touch.y < 120) currentColumn = MAX(0, currentColumn - 1);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b77      	cmp	r3, #119	@ 0x77
 80021da:	d80c      	bhi.n	80021f6 <main+0xfe>
 80021dc:	4b71      	ldr	r3, [pc, #452]	@ (80023a4 <main+0x2ac>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <main+0xf6>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	@ (80023a4 <main+0x2ac>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e000      	b.n	80021f0 <main+0xf8>
 80021ee:	2300      	movs	r3, #0
 80021f0:	4a6c      	ldr	r2, [pc, #432]	@ (80023a4 <main+0x2ac>)
 80021f2:	7013      	strb	r3, [r2, #0]
 80021f4:	e009      	b.n	800220a <main+0x112>
    			  else currentColumn = MIN(6, currentColumn + 1);
 80021f6:	4b6b      	ldr	r3, [pc, #428]	@ (80023a4 <main+0x2ac>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	bf28      	it	cs
 80021fe:	2305      	movcs	r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <main+0x2ac>)
 8002208:	701a      	strb	r2, [r3, #0]
    			  HAL_Delay(100);
 800220a:	2064      	movs	r0, #100	@ 0x64
 800220c:	f001 fc3e 	bl	8003a8c <HAL_Delay>
    	  while (!gameOver) {
 8002210:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <main+0x2b0>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0af      	beq.n	8002178 <main+0x80>
    		  }
    	  }
          break;
 8002218:	e09e      	b.n	8002358 <main+0x260>

      case 1: // 1 PLAYER
          while (!gameOver) {
              if (currentPlayer == HUMAN_PLAYER) {
 800221a:	4b60      	ldr	r3, [pc, #384]	@ (800239c <main+0x2a4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d143      	bne.n	80022aa <main+0x1b2>
            	  color = COLOR_PLAYER1;
 8002222:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <main+0x2a8>)
 8002224:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002228:	801a      	strh	r2, [r3, #0]
        		  HAL_Delay(50);
 800222a:	2032      	movs	r0, #50	@ 0x32
 800222c:	f001 fc2e 	bl	8003a8c <HAL_Delay>
        		  LCD_DrawFloatingCoin(currentColumn, color);
 8002230:	4b5c      	ldr	r3, [pc, #368]	@ (80023a4 <main+0x2ac>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4a5a      	ldr	r2, [pc, #360]	@ (80023a0 <main+0x2a8>)
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fb4a 	bl	80018d4 <LCD_DrawFloatingCoin>

        		  if (seconds_flag) {
 8002240:	4b52      	ldr	r3, [pc, #328]	@ (800238c <main+0x294>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <main+0x164>
        		    seconds_flag = false;
 800224a:	4b50      	ldr	r3, [pc, #320]	@ (800238c <main+0x294>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
        		    draw_elapsed_time(game_seconds);
 8002250:	4b4d      	ldr	r3, [pc, #308]	@ (8002388 <main+0x290>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f984 	bl	8001564 <draw_elapsed_time>
        		  }

        		  if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fb63 	bl	800192a <returnTouchStateAndLocation>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d170      	bne.n	800234c <main+0x254>
        			  LCD_ClearFloatingBand();
 800226a:	f7ff f959 	bl	8001520 <LCD_ClearFloatingBand>

        			  if (touch.y < 120) currentColumn = MAX(0, currentColumn - 1);
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b77      	cmp	r3, #119	@ 0x77
 8002272:	d80c      	bhi.n	800228e <main+0x196>
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <main+0x2ac>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <main+0x18e>
 800227c:	4b49      	ldr	r3, [pc, #292]	@ (80023a4 <main+0x2ac>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e000      	b.n	8002288 <main+0x190>
 8002286:	2300      	movs	r3, #0
 8002288:	4a46      	ldr	r2, [pc, #280]	@ (80023a4 <main+0x2ac>)
 800228a:	7013      	strb	r3, [r2, #0]
 800228c:	e009      	b.n	80022a2 <main+0x1aa>
        			  else currentColumn = MIN(6, currentColumn + 1);
 800228e:	4b45      	ldr	r3, [pc, #276]	@ (80023a4 <main+0x2ac>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b05      	cmp	r3, #5
 8002294:	bf28      	it	cs
 8002296:	2305      	movcs	r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3301      	adds	r3, #1
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b41      	ldr	r3, [pc, #260]	@ (80023a4 <main+0x2ac>)
 80022a0:	701a      	strb	r2, [r3, #0]
        			  HAL_Delay(100);
 80022a2:	2064      	movs	r0, #100	@ 0x64
 80022a4:	f001 fbf2 	bl	8003a8c <HAL_Delay>
 80022a8:	e050      	b.n	800234c <main+0x254>
        		  }
              } else {
                  // AI TURN
                  HAL_Delay(200);
 80022aa:	20c8      	movs	r0, #200	@ 0xc8
 80022ac:	f001 fbee 	bl	8003a8c <HAL_Delay>
                  color = COLOR_PLAYER2;
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <main+0x2a8>)
 80022b2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80022b6:	801a      	strh	r2, [r3, #0]
                  uint8_t aiCol = getBestMove(board);
 80022b8:	4836      	ldr	r0, [pc, #216]	@ (8002394 <main+0x29c>)
 80022ba:	f7fe fd3b 	bl	8000d34 <getBestMove>
 80022be:	4603      	mov	r3, r0
 80022c0:	73fb      	strb	r3, [r7, #15]
                  int8_t  row = placeCoin(board, aiCol, AI_PLAYER);
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	2202      	movs	r2, #2
 80022c6:	4619      	mov	r1, r3
 80022c8:	4832      	ldr	r0, [pc, #200]	@ (8002394 <main+0x29c>)
 80022ca:	f7ff fb3a 	bl	8001942 <placeCoin>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73bb      	strb	r3, [r7, #14]

                  LCD_DrawGameBoard(board);
 80022d2:	4830      	ldr	r0, [pc, #192]	@ (8002394 <main+0x29c>)
 80022d4:	f7ff f8ce 	bl	8001474 <LCD_DrawGameBoard>

                  if (row >= 0) {
 80022d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db24      	blt.n	800232a <main+0x232>
                      uint8_t outcome = checkWinOrTie(board, row, aiCol, AI_PLAYER);
 80022e0:	7bb9      	ldrb	r1, [r7, #14]
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	2302      	movs	r3, #2
 80022e6:	482b      	ldr	r0, [pc, #172]	@ (8002394 <main+0x29c>)
 80022e8:	f7ff fb9b 	bl	8001a22 <checkWinOrTie>
 80022ec:	4603      	mov	r3, r0
 80022ee:	737b      	strb	r3, [r7, #13]
                      if (outcome == 1) {
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10c      	bne.n	8002310 <main+0x218>
                          winner   = AI_PLAYER;
 80022f6:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <main+0x2b4>)
 80022f8:	2202      	movs	r2, #2
 80022fa:	701a      	strb	r2, [r3, #0]
                          gameOver = 1;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <main+0x2b0>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]

                          yellowWins++;
 8002302:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <main+0x2b8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <main+0x2b8>)
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e00c      	b.n	800232a <main+0x232>
                      } else if (outcome == 2) {
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d106      	bne.n	8002324 <main+0x22c>
                          winner   = 0;
 8002316:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <main+0x2b4>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
                          gameOver = 1;
 800231c:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <main+0x2b0>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e002      	b.n	800232a <main+0x232>
                      } else {
                          currentPlayer = HUMAN_PLAYER;
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <main+0x2a4>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
                      }
                  }

                  if (seconds_flag) {
 800232a:	4b18      	ldr	r3, [pc, #96]	@ (800238c <main+0x294>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <main+0x24e>
                      seconds_flag = false;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <main+0x294>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
                      draw_elapsed_time(game_seconds);
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <main+0x290>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f90f 	bl	8001564 <draw_elapsed_time>
                  }
                  LCD_DrawGameBoard(board);
 8002346:	4813      	ldr	r0, [pc, #76]	@ (8002394 <main+0x29c>)
 8002348:	f7ff f894 	bl	8001474 <LCD_DrawGameBoard>
          while (!gameOver) {
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <main+0x2b0>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f43f af62 	beq.w	800221a <main+0x122>
              }
          }
          break;
 8002356:	bf00      	nop
  }
  HAL_Delay(500);
 8002358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800235c:	f001 fb96 	bl	8003a8c <HAL_Delay>
  LCD_DrawGameOverScreen(winner, redWins, yellowWins, game_seconds);
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <main+0x2b4>)
 8002362:	7818      	ldrb	r0, [r3, #0]
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <main+0x2bc>)
 8002366:	7819      	ldrb	r1, [r3, #0]
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <main+0x2b8>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <main+0x290>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f7ff f965 	bl	8001640 <LCD_DrawGameOverScreen>
  while (returnTouchStateAndLocation(&touch) != STMPE811_State_Pressed){
 8002376:	bf00      	nop
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fad5 	bl	800192a <returnTouchStateAndLocation>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f8      	bne.n	8002378 <main+0x280>
  while (1){
 8002386:	e6d4      	b.n	8002132 <main+0x3a>
 8002388:	20025bb2 	.word	0x20025bb2
 800238c:	20025bb3 	.word	0x20025bb3
 8002390:	20025baa 	.word	0x20025baa
 8002394:	20025b80 	.word	0x20025b80
 8002398:	20025b38 	.word	0x20025b38
 800239c:	20000018 	.word	0x20000018
 80023a0:	20025bb0 	.word	0x20025bb0
 80023a4:	20000019 	.word	0x20000019
 80023a8:	20025bab 	.word	0x20025bab
 80023ac:	20025bac 	.word	0x20025bac
 80023b0:	20025bae 	.word	0x20025bae
 80023b4:	20025bad 	.word	0x20025bad

080023b8 <SystemClock_Config>:
  }
  }
}
void SystemClock_Config(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b094      	sub	sp, #80	@ 0x50
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	2230      	movs	r2, #48	@ 0x30
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f8aa 	bl	8007520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <SystemClock_Config+0xcc>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <SystemClock_Config+0xcc>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ec:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <SystemClock_Config+0xcc>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f8:	2300      	movs	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <SystemClock_Config+0xd0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <SystemClock_Config+0xd0>)
 8002402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <SystemClock_Config+0xd0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002414:	2301      	movs	r3, #1
 8002416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800241e:	2302      	movs	r3, #2
 8002420:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002428:	2308      	movs	r3, #8
 800242a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800242c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002432:	2302      	movs	r3, #2
 8002434:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002436:	2307      	movs	r3, #7
 8002438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fa8a 	bl	8005958 <HAL_RCC_OscConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800244a:	f000 fc43 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244e:	230f      	movs	r3, #15
 8002450:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002452:	2302      	movs	r3, #2
 8002454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800245a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800245e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	2105      	movs	r1, #5
 800246c:	4618      	mov	r0, r3
 800246e:	f003 fceb 	bl	8005e48 <HAL_RCC_ClockConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002478:	f000 fc2c 	bl	8002cd4 <Error_Handler>
  }
}
 800247c:	bf00      	nop
 800247e:	3750      	adds	r7, #80	@ 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000

0800248c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <MX_I2C3_Init+0x74>)
 8002492:	4a1c      	ldr	r2, [pc, #112]	@ (8002504 <MX_I2C3_Init+0x78>)
 8002494:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <MX_I2C3_Init+0x74>)
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <MX_I2C3_Init+0x7c>)
 800249a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800249c:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <MX_I2C3_Init+0x74>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024c8:	480d      	ldr	r0, [pc, #52]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024ca:	f001 feff 	bl	80042cc <HAL_I2C_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024d4:	f000 fbfe 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	4809      	ldr	r0, [pc, #36]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024dc:	f002 ff1a 	bl	8005314 <HAL_I2CEx_ConfigAnalogFilter>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80024e6:	f000 fbf5 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024ee:	f002 ff4d 	bl	800538c <HAL_I2CEx_ConfigDigitalFilter>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80024f8:	f000 fbec 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200259d4 	.word	0x200259d4
 8002504:	40005c00 	.word	0x40005c00
 8002508:	000186a0 	.word	0x000186a0

0800250c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09a      	sub	sp, #104	@ 0x68
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002512:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002516:	2234      	movs	r2, #52	@ 0x34
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f005 f800 	bl	8007520 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002520:	463b      	mov	r3, r7
 8002522:	2234      	movs	r2, #52	@ 0x34
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fffa 	bl	8007520 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800252c:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800252e:	4a4f      	ldr	r2, [pc, #316]	@ (800266c <MX_LTDC_Init+0x160>)
 8002530:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002532:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002538:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800253e:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002544:	4b48      	ldr	r3, [pc, #288]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800254c:	2207      	movs	r2, #7
 800254e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002550:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002552:	2203      	movs	r2, #3
 8002554:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002558:	220e      	movs	r2, #14
 800255a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800255c:	4b42      	ldr	r3, [pc, #264]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800255e:	2205      	movs	r2, #5
 8002560:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002564:	f240 228e 	movw	r2, #654	@ 0x28e
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800256c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002572:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002574:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800257c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002582:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800258a:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002592:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800259a:	4833      	ldr	r0, [pc, #204]	@ (8002668 <MX_LTDC_Init+0x15c>)
 800259c:	f002 ff36 	bl	800540c <HAL_LTDC_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80025a6:	f000 fb95 	bl	8002cd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025ba:	2300      	movs	r3, #0
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80025c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ca:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80025cc:	2305      	movs	r3, #5
 80025ce:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80025ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025f2:	2200      	movs	r2, #0
 80025f4:	4619      	mov	r1, r3
 80025f6:	481c      	ldr	r0, [pc, #112]	@ (8002668 <MX_LTDC_Init+0x15c>)
 80025f8:	f002 ffd8 	bl	80055ac <HAL_LTDC_ConfigLayer>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002602:	f000 fb67 	bl	8002cd4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002626:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002628:	2305      	movs	r3, #5
 800262a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800264a:	463b      	mov	r3, r7
 800264c:	2201      	movs	r2, #1
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	@ (8002668 <MX_LTDC_Init+0x15c>)
 8002652:	f002 ffab 	bl	80055ac <HAL_LTDC_ConfigLayer>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800265c:	f000 fb3a 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	3768      	adds	r7, #104	@ 0x68
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20025a28 	.word	0x20025a28
 800266c:	40016800 	.word	0x40016800

08002670 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_RNG_Init+0x20>)
 8002676:	4a07      	ldr	r2, [pc, #28]	@ (8002694 <MX_RNG_Init+0x24>)
 8002678:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_RNG_Init+0x20>)
 800267c:	f003 ffb0 	bl	80065e0 <HAL_RNG_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002686:	f000 fb25 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20025ad0 	.word	0x20025ad0
 8002694:	50060800 	.word	0x50060800

08002698 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800269c:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <MX_SPI5_Init+0x64>)
 800269e:	4a18      	ldr	r2, [pc, #96]	@ (8002700 <MX_SPI5_Init+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026a2:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80026aa:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026e4:	220a      	movs	r2, #10
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	@ (80026fc <MX_SPI5_Init+0x64>)
 80026ea:	f003 ffa3 	bl	8006634 <HAL_SPI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80026f4:	f000 faee 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20025ae0 	.word	0x20025ae0
 8002700:	40015000 	.word	0x40015000

08002704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <MX_TIM2_Init+0xcc>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <MX_TIM2_Init+0xcc>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b2d      	ldr	r3, [pc, #180]	@ (80027d0 <MX_TIM2_Init+0xcc>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002748:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800274c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002756:	f242 720f 	movw	r2, #9999	@ 0x270f
 800275a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002768:	481a      	ldr	r0, [pc, #104]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 800276a:	f004 fa43 	bl	8006bf4 <HAL_TIM_Base_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002774:	f000 faae 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800277c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	4813      	ldr	r0, [pc, #76]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 8002786:	f004 fbe5 	bl	8006f54 <HAL_TIM_ConfigClockSource>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002790:	f000 faa0 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	4619      	mov	r1, r3
 80027a2:	480c      	ldr	r0, [pc, #48]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 80027a4:	f004 fe0c 	bl	80073c0 <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80027ae:	f000 fa91 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80027b2:	4808      	ldr	r0, [pc, #32]	@ (80027d4 <MX_TIM2_Init+0xd0>)
 80027b4:	f004 fa6e 	bl	8006c94 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2102      	movs	r1, #2
 80027bc:	201c      	movs	r0, #28
 80027be:	f001 fa64 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027c2:	201c      	movs	r0, #28
 80027c4:	f001 fa7d 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	20025b38 	.word	0x20025b38

080027d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	@ 0x38
 80027dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	4bb3      	ldr	r3, [pc, #716]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4ab2      	ldr	r2, [pc, #712]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4bb0      	ldr	r3, [pc, #704]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	4bac      	ldr	r3, [pc, #688]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	4aab      	ldr	r2, [pc, #684]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002814:	f043 0320 	orr.w	r3, r3, #32
 8002818:	6313      	str	r3, [r2, #48]	@ 0x30
 800281a:	4ba9      	ldr	r3, [pc, #676]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4aa4      	ldr	r2, [pc, #656]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002834:	6313      	str	r3, [r2, #48]	@ 0x30
 8002836:	4ba2      	ldr	r3, [pc, #648]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	4b9e      	ldr	r3, [pc, #632]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a9d      	ldr	r2, [pc, #628]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b9b      	ldr	r3, [pc, #620]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b97      	ldr	r3, [pc, #604]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a96      	ldr	r2, [pc, #600]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b90      	ldr	r3, [pc, #576]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a8f      	ldr	r2, [pc, #572]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 8002884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a88      	ldr	r2, [pc, #544]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80028a0:	f043 0310 	orr.w	r3, r3, #16
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b86      	ldr	r3, [pc, #536]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	4b82      	ldr	r3, [pc, #520]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a81      	ldr	r2, [pc, #516]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <MX_GPIO_Init+0x2e8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2116      	movs	r1, #22
 80028d2:	487c      	ldr	r0, [pc, #496]	@ (8002ac4 <MX_GPIO_Init+0x2ec>)
 80028d4:	f001 fcc8 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	@ 0x80
 80028dc:	487a      	ldr	r0, [pc, #488]	@ (8002ac8 <MX_GPIO_Init+0x2f0>)
 80028de:	f001 fcc3 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80028e8:	4878      	ldr	r0, [pc, #480]	@ (8002acc <MX_GPIO_Init+0x2f4>)
 80028ea:	f001 fcbd 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80028ee:	2200      	movs	r2, #0
 80028f0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80028f4:	4876      	ldr	r0, [pc, #472]	@ (8002ad0 <MX_GPIO_Init+0x2f8>)
 80028f6:	f001 fcb7 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80028fa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800290c:	230c      	movs	r3, #12
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	486f      	ldr	r0, [pc, #444]	@ (8002ad4 <MX_GPIO_Init+0x2fc>)
 8002918:	f001 f9ee 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800292c:	230c      	movs	r3, #12
 800292e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4863      	ldr	r0, [pc, #396]	@ (8002ac4 <MX_GPIO_Init+0x2ec>)
 8002938:	f001 f9de 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800293c:	2316      	movs	r3, #22
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	485c      	ldr	r0, [pc, #368]	@ (8002ac4 <MX_GPIO_Init+0x2ec>)
 8002954:	f001 f9d0 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;// DISABLE FUNCTIONALITY FOR INT1 & 2?
 8002958:	2301      	movs	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800295c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296a:	4619      	mov	r1, r3
 800296c:	4856      	ldr	r0, [pc, #344]	@ (8002ac8 <MX_GPIO_Init+0x2f0>)
 800296e:	f001 f9c3 	bl	8003cf8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);///////////////////////////////////CONFIGURE NVIC//////////////////////////////////////////
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2006      	movs	r0, #6
 8002978:	f001 f987 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800297c:	2006      	movs	r0, #6
 800297e:	f001 f9a0 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	484b      	ldr	r0, [pc, #300]	@ (8002ac8 <MX_GPIO_Init+0x2f0>)
 800299a:	f001 f9ad 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800299e:	2320      	movs	r3, #32
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4844      	ldr	r0, [pc, #272]	@ (8002ac4 <MX_GPIO_Init+0x2ec>)
 80029b4:	f001 f9a0 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029b8:	2304      	movs	r3, #4
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	4843      	ldr	r0, [pc, #268]	@ (8002ad8 <MX_GPIO_Init+0x300>)
 80029cc:	f001 f994 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80029d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e2:	230c      	movs	r3, #12
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4838      	ldr	r0, [pc, #224]	@ (8002ad0 <MX_GPIO_Init+0x2f8>)
 80029ee:	f001 f983 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80029f2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a04:	230c      	movs	r3, #12
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4833      	ldr	r0, [pc, #204]	@ (8002adc <MX_GPIO_Init+0x304>)
 8002a10:	f001 f972 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002a14:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002a26:	230c      	movs	r3, #12
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4829      	ldr	r0, [pc, #164]	@ (8002ad8 <MX_GPIO_Init+0x300>)
 8002a32:	f001 f961 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4823      	ldr	r0, [pc, #140]	@ (8002ad8 <MX_GPIO_Init+0x300>)
 8002a4c:	f001 f954 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002a50:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a62:	230c      	movs	r3, #12
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4817      	ldr	r0, [pc, #92]	@ (8002acc <MX_GPIO_Init+0x2f4>)
 8002a6e:	f001 f943 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002a72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a84:	4619      	mov	r1, r3
 8002a86:	4811      	ldr	r0, [pc, #68]	@ (8002acc <MX_GPIO_Init+0x2f4>)
 8002a88:	f001 f936 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002a8c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a92:	2301      	movs	r3, #1
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4809      	ldr	r0, [pc, #36]	@ (8002acc <MX_GPIO_Init+0x2f4>)
 8002aa6:	f001 f927 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002aaa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002abc:	2307      	movs	r3, #7
 8002abe:	e00f      	b.n	8002ae0 <MX_GPIO_Init+0x308>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40021800 	.word	0x40021800
 8002ad4:	40021400 	.word	0x40021400
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4812      	ldr	r0, [pc, #72]	@ (8002b34 <MX_GPIO_Init+0x35c>)
 8002aea:	f001 f905 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002aee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	2301      	movs	r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b04:	4619      	mov	r1, r3
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <MX_GPIO_Init+0x360>)
 8002b08:	f001 f8f6 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b0c:	2360      	movs	r3, #96	@ 0x60
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_GPIO_Init+0x364>)
 8002b28:	f001 f8e6 	bl	8003cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3738      	adds	r7, #56	@ 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40020400 	.word	0x40020400

08002b40 <gameConfig>:

/* USER CODE BEGIN 4 */
void gameConfig(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	  memset(board, 0, sizeof(board[0][0]) * 6 * 7);
 8002b44:	222a      	movs	r2, #42	@ 0x2a
 8002b46:	2100      	movs	r1, #0
 8002b48:	480d      	ldr	r0, [pc, #52]	@ (8002b80 <gameConfig+0x40>)
 8002b4a:	f004 fce9 	bl	8007520 <memset>
	  currentPlayer = 1;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <gameConfig+0x44>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
	  currentColumn = 3;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <gameConfig+0x48>)
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
	  gameOver = 0;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <gameConfig+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
	  winner = 0;
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <gameConfig+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
	  game_seconds = 0;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <gameConfig+0x54>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
	  seconds_flag = true;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <gameConfig+0x58>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
	  LCD_DrawMenuScreen();
 8002b72:	f7fe fc17 	bl	80013a4 <LCD_DrawMenuScreen>
	  HAL_Delay(200);
 8002b76:	20c8      	movs	r0, #200	@ 0xc8
 8002b78:	f000 ff88 	bl	8003a8c <HAL_Delay>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20025b80 	.word	0x20025b80
 8002b84:	20000018 	.word	0x20000018
 8002b88:	20000019 	.word	0x20000019
 8002b8c:	20025bab 	.word	0x20025bab
 8002b90:	20025bac 	.word	0x20025bac
 8002b94:	20025bb2 	.word	0x20025bb2
 8002b98:	20025bb3 	.word	0x20025bb3

08002b9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPressTime = 0;
	if (HAL_GetTick() - lastPressTime < 200)
 8002ba6:	f000 ff65 	bl	8003a74 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b32      	ldr	r3, [pc, #200]	@ (8002c78 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bb4:	d959      	bls.n	8002c6a <HAL_GPIO_EXTI_Callback+0xce>
		return;
	lastPressTime = HAL_GetTick();
 8002bb6:	f000 ff5d 	bl	8003a74 <HAL_GetTick>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002c78 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002bbe:	6013      	str	r3, [r2, #0]

    if (GPIO_Pin == GPIO_PIN_0) {
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d14d      	bne.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
        int8_t placedRow = placeCoin(board, currentColumn, currentPlayer);
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c7c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	482c      	ldr	r0, [pc, #176]	@ (8002c84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002bd2:	f7fe feb6 	bl	8001942 <placeCoin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]
        if (placedRow == -1) // THIS CHECKS IF ROW IS FULL, IT WON'T PLACE THE COIN IF THE ROW IS FULL
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d044      	beq.n	8002c6e <HAL_GPIO_EXTI_Callback+0xd2>
        	return;
		uint8_t result = checkWinOrTie(board, placedRow, currentColumn, currentPlayer);
 8002be4:	7bf9      	ldrb	r1, [r7, #15]
 8002be6:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4825      	ldr	r0, [pc, #148]	@ (8002c84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002bf0:	f7fe ff17 	bl	8001a22 <checkWinOrTie>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73bb      	strb	r3, [r7, #14]
		if (result == 1) {
 8002bf8:	7bbb      	ldrb	r3, [r7, #14]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d11c      	bne.n	8002c38 <HAL_GPIO_EXTI_Callback+0x9c>
			winner = currentPlayer;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c04:	701a      	strb	r2, [r3, #0]
			gameOver = 1;
 8002c06:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
			if (winner == 1)
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_GPIO_EXTI_Callback+0x86>
				redWins++;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e01f      	b.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
			else if (winner == 2)
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d11b      	bne.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
				yellowWins++;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e014      	b.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
		} else if (result == 2) {
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d106      	bne.n	8002c4c <HAL_GPIO_EXTI_Callback+0xb0>
			winner = 0;
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			gameOver = 1;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e00a      	b.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
		}else {
			if (currentPlayer == 1) {
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d103      	bne.n	8002c5c <HAL_GPIO_EXTI_Callback+0xc0>
				currentPlayer = 2;
 8002c54:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e002      	b.n	8002c62 <HAL_GPIO_EXTI_Callback+0xc6>
			} else {
				currentPlayer = 1;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
			}
		}
    }
    LCD_DrawGameBoard(board);
 8002c62:	4808      	ldr	r0, [pc, #32]	@ (8002c84 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c64:	f7fe fc06 	bl	8001474 <LCD_DrawGameBoard>
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_EXTI_Callback+0xd4>
		return;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_EXTI_Callback+0xd4>
        	return;
 8002c6e:	bf00      	nop
}
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20025bb4 	.word	0x20025bb4
 8002c7c:	20000019 	.word	0x20000019
 8002c80:	20000018 	.word	0x20000018
 8002c84:	20025b80 	.word	0x20025b80
 8002c88:	20025bac 	.word	0x20025bac
 8002c8c:	20025bab 	.word	0x20025bab
 8002c90:	20025bad 	.word	0x20025bad
 8002c94:	20025bae 	.word	0x20025bae

08002c98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d109      	bne.n	8002cbe <HAL_TIM_PeriodElapsedCallback+0x26>
    game_seconds++;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002cb6:	701a      	strb	r2, [r3, #0]
    seconds_flag = true;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20025bb2 	.word	0x20025bb2
 8002cd0:	20025bb3 	.word	0x20025bb3

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <Error_Handler+0x8>

08002ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d1e:	2007      	movs	r0, #7
 8002d20:	f000 ffa8 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	@ (8002df4 <HAL_I2C_MspInit+0xc4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d14b      	bne.n	8002dea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	4b28      	ldr	r3, [pc, #160]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a27      	ldr	r2, [pc, #156]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d90:	2312      	movs	r3, #18
 8002d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	4815      	ldr	r0, [pc, #84]	@ (8002dfc <HAL_I2C_MspInit+0xcc>)
 8002da8:	f000 ffa6 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db2:	2312      	movs	r3, #18
 8002db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480d      	ldr	r0, [pc, #52]	@ (8002e00 <HAL_I2C_MspInit+0xd0>)
 8002dca:	f000 ff95 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002dd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_I2C_MspInit+0xc8>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	@ 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40005c00 	.word	0x40005c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b09a      	sub	sp, #104	@ 0x68
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e20:	2230      	movs	r2, #48	@ 0x30
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fb7b 	bl	8007520 <memset>
  if(hltdc->Instance==LTDC)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a81      	ldr	r2, [pc, #516]	@ (8003034 <HAL_LTDC_MspInit+0x230>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	f040 80fb 	bne.w	800302c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e36:	2308      	movs	r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002e3a:	23c8      	movs	r3, #200	@ 0xc8
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002e42:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002e46:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fa07 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002e58:	f7ff ff3c 	bl	8002cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	4b75      	ldr	r3, [pc, #468]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e64:	4a74      	ldr	r2, [pc, #464]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6c:	4b72      	ldr	r3, [pc, #456]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	4b6e      	ldr	r3, [pc, #440]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	4a6d      	ldr	r2, [pc, #436]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e82:	f043 0320 	orr.w	r3, r3, #32
 8002e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e88:	4b6b      	ldr	r3, [pc, #428]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	4b67      	ldr	r3, [pc, #412]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	4a66      	ldr	r2, [pc, #408]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea4:	4b64      	ldr	r3, [pc, #400]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	4b59      	ldr	r3, [pc, #356]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	4a58      	ldr	r2, [pc, #352]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002edc:	4b56      	ldr	r3, [pc, #344]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	4b52      	ldr	r3, [pc, #328]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4a51      	ldr	r2, [pc, #324]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f14:	4b48      	ldr	r3, [pc, #288]	@ (8003038 <HAL_LTDC_MspInit+0x234>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f32:	230e      	movs	r3, #14
 8002f34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	483f      	ldr	r0, [pc, #252]	@ (800303c <HAL_LTDC_MspInit+0x238>)
 8002f3e:	f000 fedb 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f42:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f46:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f54:	230e      	movs	r3, #14
 8002f56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4838      	ldr	r0, [pc, #224]	@ (8003040 <HAL_LTDC_MspInit+0x23c>)
 8002f60:	f000 feca 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002f64:	2303      	movs	r3, #3
 8002f66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f74:	2309      	movs	r3, #9
 8002f76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4831      	ldr	r0, [pc, #196]	@ (8003044 <HAL_LTDC_MspInit+0x240>)
 8002f80:	f000 feba 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002f84:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f96:	230e      	movs	r3, #14
 8002f98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4828      	ldr	r0, [pc, #160]	@ (8003044 <HAL_LTDC_MspInit+0x240>)
 8002fa2:	f000 fea9 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002fa6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002faa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fb8:	230e      	movs	r3, #14
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4821      	ldr	r0, [pc, #132]	@ (8003048 <HAL_LTDC_MspInit+0x244>)
 8002fc4:	f000 fe98 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002fc8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fda:	230e      	movs	r3, #14
 8002fdc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4819      	ldr	r0, [pc, #100]	@ (800304c <HAL_LTDC_MspInit+0x248>)
 8002fe6:	f000 fe87 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002fea:	2348      	movs	r3, #72	@ 0x48
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ffa:	230e      	movs	r3, #14
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003002:	4619      	mov	r1, r3
 8003004:	4812      	ldr	r0, [pc, #72]	@ (8003050 <HAL_LTDC_MspInit+0x24c>)
 8003006:	f000 fe77 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800300a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800300e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800301c:	2309      	movs	r3, #9
 800301e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003024:	4619      	mov	r1, r3
 8003026:	4808      	ldr	r0, [pc, #32]	@ (8003048 <HAL_LTDC_MspInit+0x244>)
 8003028:	f000 fe66 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800302c:	bf00      	nop
 800302e:	3768      	adds	r7, #104	@ 0x68
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40016800 	.word	0x40016800
 8003038:	40023800 	.word	0x40023800
 800303c:	40021400 	.word	0x40021400
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40021800 	.word	0x40021800
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00

08003054 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0b      	ldr	r2, [pc, #44]	@ (8003090 <HAL_RNG_MspInit+0x3c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10d      	bne.n	8003082 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_RNG_MspInit+0x40>)
 800306c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RNG_MspInit+0x40>)
 8003070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003074:	6353      	str	r3, [r2, #52]	@ 0x34
 8003076:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <HAL_RNG_MspInit+0x40>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	50060800 	.word	0x50060800
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	@ 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	@ (800311c <HAL_SPI_MspInit+0x84>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12c      	bne.n	8003114 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	4a10      	ldr	r2, [pc, #64]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_SPI_MspInit+0x88>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80030f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003104:	2305      	movs	r3, #5
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	4805      	ldr	r0, [pc, #20]	@ (8003124 <HAL_SPI_MspInit+0x8c>)
 8003110:	f000 fdf2 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40015000 	.word	0x40015000
 8003120:	40023800 	.word	0x40023800
 8003124:	40021400 	.word	0x40021400

08003128 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <HAL_SPI_MspDeInit+0x30>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10a      	bne.n	8003150 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800313a:	4b08      	ldr	r3, [pc, #32]	@ (800315c <HAL_SPI_MspDeInit+0x34>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <HAL_SPI_MspDeInit+0x34>)
 8003140:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003144:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003146:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800314a:	4805      	ldr	r0, [pc, #20]	@ (8003160 <HAL_SPI_MspDeInit+0x38>)
 800314c:	f000 ff80 	bl	8004050 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40015000 	.word	0x40015000
 800315c:	40023800 	.word	0x40023800
 8003160:	40021400 	.word	0x40021400

08003164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003174:	d10d      	bne.n	8003192 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_TIM_Base_MspInit+0x3c>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6413      	str	r3, [r2, #64]	@ 0x40
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <NMI_Handler+0x4>

080031ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <MemManage_Handler+0x4>

080031bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <UsageFault_Handler+0x4>

080031cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fa:	f000 fc27 	bl	8003a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}

08003202 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003206:	2001      	movs	r0, #1
 8003208:	f001 f848 	bl	800429c <HAL_GPIO_EXTI_IRQHandler>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8003214:	4802      	ldr	r0, [pc, #8]	@ (8003220 <TIM2_IRQHandler+0x10>)
 8003216:	f003 fdad 	bl	8006d74 <HAL_TIM_IRQHandler>
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20025b38 	.word	0x20025b38

08003224 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800322a:	f000 f9cd 	bl	80035c8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800322e:	f000 f98d 	bl	800354c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003232:	2202      	movs	r2, #2
 8003234:	2103      	movs	r1, #3
 8003236:	2082      	movs	r0, #130	@ 0x82
 8003238:	f000 fa1a 	bl	8003670 <I2C3_Write>
    HAL_Delay(5);
 800323c:	2005      	movs	r0, #5
 800323e:	f000 fc25 	bl	8003a8c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003242:	2200      	movs	r2, #0
 8003244:	2103      	movs	r1, #3
 8003246:	2082      	movs	r0, #130	@ 0x82
 8003248:	f000 fa12 	bl	8003670 <I2C3_Write>
    HAL_Delay(2);
 800324c:	2002      	movs	r0, #2
 800324e:	f000 fc1d 	bl	8003a8c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003252:	1cba      	adds	r2, r7, #2
 8003254:	2302      	movs	r3, #2
 8003256:	2100      	movs	r1, #0
 8003258:	2082      	movs	r0, #130	@ 0x82
 800325a:	f000 fa59 	bl	8003710 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29a      	uxth	r2, r3
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4313      	orrs	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	f640 0211 	movw	r2, #2065	@ 0x811
 8003276:	4293      	cmp	r3, r2
 8003278:	d001      	beq.n	800327e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800327a:	2303      	movs	r3, #3
 800327c:	e075      	b.n	800336a <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800327e:	2202      	movs	r2, #2
 8003280:	2103      	movs	r1, #3
 8003282:	2082      	movs	r0, #130	@ 0x82
 8003284:	f000 f9f4 	bl	8003670 <I2C3_Write>
    HAL_Delay(5);
 8003288:	2005      	movs	r0, #5
 800328a:	f000 fbff 	bl	8003a8c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800328e:	2200      	movs	r2, #0
 8003290:	2103      	movs	r1, #3
 8003292:	2082      	movs	r0, #130	@ 0x82
 8003294:	f000 f9ec 	bl	8003670 <I2C3_Write>
    HAL_Delay(2);
 8003298:	2002      	movs	r0, #2
 800329a:	f000 fbf7 	bl	8003a8c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800329e:	2004      	movs	r0, #4
 80032a0:	f000 f867 	bl	8003372 <STMPE811_Read>
 80032a4:	4603      	mov	r3, r0
 80032a6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80032a8:	797b      	ldrb	r3, [r7, #5]
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80032b0:	797b      	ldrb	r3, [r7, #5]
 80032b2:	461a      	mov	r2, r3
 80032b4:	2104      	movs	r1, #4
 80032b6:	2082      	movs	r0, #130	@ 0x82
 80032b8:	f000 f9da 	bl	8003670 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80032bc:	2004      	movs	r0, #4
 80032be:	f000 f858 	bl	8003372 <STMPE811_Read>
 80032c2:	4603      	mov	r3, r0
 80032c4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80032c6:	797b      	ldrb	r3, [r7, #5]
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80032ce:	797b      	ldrb	r3, [r7, #5]
 80032d0:	461a      	mov	r2, r3
 80032d2:	2104      	movs	r1, #4
 80032d4:	2082      	movs	r0, #130	@ 0x82
 80032d6:	f000 f9cb 	bl	8003670 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80032da:	2249      	movs	r2, #73	@ 0x49
 80032dc:	2120      	movs	r1, #32
 80032de:	2082      	movs	r0, #130	@ 0x82
 80032e0:	f000 f9c6 	bl	8003670 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80032e4:	2002      	movs	r0, #2
 80032e6:	f000 fbd1 	bl	8003a8c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80032ea:	2201      	movs	r2, #1
 80032ec:	2121      	movs	r1, #33	@ 0x21
 80032ee:	2082      	movs	r0, #130	@ 0x82
 80032f0:	f000 f9be 	bl	8003670 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80032f4:	2017      	movs	r0, #23
 80032f6:	f000 f83c 	bl	8003372 <STMPE811_Read>
 80032fa:	4603      	mov	r3, r0
 80032fc:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80032fe:	797b      	ldrb	r3, [r7, #5]
 8003300:	f043 031e 	orr.w	r3, r3, #30
 8003304:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003306:	797b      	ldrb	r3, [r7, #5]
 8003308:	461a      	mov	r2, r3
 800330a:	2117      	movs	r1, #23
 800330c:	2082      	movs	r0, #130	@ 0x82
 800330e:	f000 f9af 	bl	8003670 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003312:	229a      	movs	r2, #154	@ 0x9a
 8003314:	2141      	movs	r1, #65	@ 0x41
 8003316:	2082      	movs	r0, #130	@ 0x82
 8003318:	f000 f9aa 	bl	8003670 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800331c:	2201      	movs	r2, #1
 800331e:	214a      	movs	r1, #74	@ 0x4a
 8003320:	2082      	movs	r0, #130	@ 0x82
 8003322:	f000 f9a5 	bl	8003670 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003326:	2201      	movs	r2, #1
 8003328:	214b      	movs	r1, #75	@ 0x4b
 800332a:	2082      	movs	r0, #130	@ 0x82
 800332c:	f000 f9a0 	bl	8003670 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003330:	2200      	movs	r2, #0
 8003332:	214b      	movs	r1, #75	@ 0x4b
 8003334:	2082      	movs	r0, #130	@ 0x82
 8003336:	f000 f99b 	bl	8003670 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800333a:	2201      	movs	r2, #1
 800333c:	2156      	movs	r1, #86	@ 0x56
 800333e:	2082      	movs	r0, #130	@ 0x82
 8003340:	f000 f996 	bl	8003670 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003344:	2201      	movs	r2, #1
 8003346:	2158      	movs	r1, #88	@ 0x58
 8003348:	2082      	movs	r0, #130	@ 0x82
 800334a:	f000 f991 	bl	8003670 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800334e:	2203      	movs	r2, #3
 8003350:	2140      	movs	r1, #64	@ 0x40
 8003352:	2082      	movs	r0, #130	@ 0x82
 8003354:	f000 f98c 	bl	8003670 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003358:	22ff      	movs	r2, #255	@ 0xff
 800335a:	210b      	movs	r1, #11
 800335c:	2082      	movs	r0, #130	@ 0x82
 800335e:	f000 f987 	bl	8003670 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003362:	20c8      	movs	r0, #200	@ 0xc8
 8003364:	f000 fb92 	bl	8003a8c <HAL_Delay>

    return STMPE811_State_Ok;
 8003368:	2302      	movs	r3, #2

}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800337c:	f107 020f 	add.w	r2, r7, #15
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4619      	mov	r1, r3
 8003384:	2082      	movs	r0, #130	@ 0x82
 8003386:	f000 f99d 	bl	80036c4 <I2C3_Read>

    return readData;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	791a      	ldrb	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80033a4:	2040      	movs	r0, #64	@ 0x40
 80033a6:	f7ff ffe4 	bl	8003372 <STMPE811_Read>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0e      	blt.n	80033d4 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80033bc:	2201      	movs	r2, #1
 80033be:	214b      	movs	r1, #75	@ 0x4b
 80033c0:	2082      	movs	r0, #130	@ 0x82
 80033c2:	f000 f955 	bl	8003670 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80033c6:	2200      	movs	r2, #0
 80033c8:	214b      	movs	r1, #75	@ 0x4b
 80033ca:	2082      	movs	r0, #130	@ 0x82
 80033cc:	f000 f950 	bl	8003670 <I2C3_Write>

        return STMPE811_State_Released;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0a7      	b.n	8003524 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	799b      	ldrb	r3, [r3, #6]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d117      	bne.n	800340c <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f9b7 	bl	8003754 <TM_STMPE811_ReadX>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	885b      	ldrh	r3, [r3, #2]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fa0a 	bl	8003810 <TM_STMPE811_ReadY>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003402:	3301      	adds	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	805a      	strh	r2, [r3, #2]
 800340a:	e048      	b.n	800349e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	799b      	ldrb	r3, [r3, #6]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d112      	bne.n	800343a <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f99b 	bl	8003754 <TM_STMPE811_ReadX>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	885b      	ldrh	r3, [r3, #2]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f9f0 	bl	8003810 <TM_STMPE811_ReadY>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	805a      	strh	r2, [r3, #2]
 8003438:	e031      	b.n	800349e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	799b      	ldrb	r3, [r3, #6]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d115      	bne.n	800346e <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	885b      	ldrh	r3, [r3, #2]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f984 	bl	8003754 <TM_STMPE811_ReadX>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f9d9 	bl	8003810 <TM_STMPE811_ReadY>
 800345e:	4603      	mov	r3, r0
 8003460:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003464:	3301      	adds	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e017      	b.n	800349e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	799b      	ldrb	r3, [r3, #6]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d113      	bne.n	800349e <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f96a 	bl	8003754 <TM_STMPE811_ReadX>
 8003480:	4603      	mov	r3, r0
 8003482:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f9bd 	bl	8003810 <TM_STMPE811_ReadY>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800349e:	2201      	movs	r2, #1
 80034a0:	214b      	movs	r1, #75	@ 0x4b
 80034a2:	2082      	movs	r0, #130	@ 0x82
 80034a4:	f000 f8e4 	bl	8003670 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80034a8:	2200      	movs	r2, #0
 80034aa:	214b      	movs	r1, #75	@ 0x4b
 80034ac:	2082      	movs	r0, #130	@ 0x82
 80034ae:	f000 f8df 	bl	8003670 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	799b      	ldrb	r3, [r3, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <STMPE811_ReadTouch+0x12e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	799b      	ldrb	r3, [r3, #6]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d115      	bne.n	80034ee <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d027      	beq.n	800351a <STMPE811_ReadTouch+0x186>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2bee      	cmp	r3, #238	@ 0xee
 80034d0:	d823      	bhi.n	800351a <STMPE811_ReadTouch+0x186>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	885b      	ldrh	r3, [r3, #2]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01f      	beq.n	800351a <STMPE811_ReadTouch+0x186>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	885b      	ldrh	r3, [r3, #2]
 80034de:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80034e2:	d81a      	bhi.n	800351a <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e01a      	b.n	8003524 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <STMPE811_ReadTouch+0x188>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80034fe:	d80d      	bhi.n	800351c <STMPE811_ReadTouch+0x188>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	885b      	ldrh	r3, [r3, #2]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <STMPE811_ReadTouch+0x188>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	885b      	ldrh	r3, [r3, #2]
 800350c:	2bee      	cmp	r3, #238	@ 0xee
 800350e:	d805      	bhi.n	800351c <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003516:	2300      	movs	r3, #0
 8003518:	e004      	b.n	8003524 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800351a:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20025c0c 	.word	0x20025c0c

0800354c <I2C3_Init>:

static void I2C3_Init()
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <I2C3_Init+0x6c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <I2C3_Init+0x6c>)
 800355c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <I2C3_Init+0x6c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800356e:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <I2C3_Init+0x70>)
 8003570:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <I2C3_Init+0x74>)
 8003572:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <I2C3_Init+0x70>)
 8003576:	4a13      	ldr	r2, [pc, #76]	@ (80035c4 <I2C3_Init+0x78>)
 8003578:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800357a:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <I2C3_Init+0x70>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003580:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <I2C3_Init+0x70>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <I2C3_Init+0x70>)
 8003588:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800358c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <I2C3_Init+0x70>)
 8003590:	2200      	movs	r2, #0
 8003592:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <I2C3_Init+0x70>)
 8003596:	2200      	movs	r2, #0
 8003598:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800359a:	4808      	ldr	r0, [pc, #32]	@ (80035bc <I2C3_Init+0x70>)
 800359c:	f000 fe96 	bl	80042cc <HAL_I2C_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <I2C3_Init+0x5e>
    }
    return;
 80035ae:	bf00      	nop
}
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	20025bb8 	.word	0x20025bb8
 80035c0:	40005c00 	.word	0x40005c00
 80035c4:	000186a0 	.word	0x000186a0

080035c8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <I2C3_MspInit+0x9c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <I2C3_MspInit+0x9c>)
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <I2C3_MspInit+0x9c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <I2C3_MspInit+0x9c>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <I2C3_MspInit+0x9c>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <I2C3_MspInit+0x9c>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800361a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800361c:	2312      	movs	r3, #18
 800361e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003628:	2304      	movs	r3, #4
 800362a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	4619      	mov	r1, r3
 8003632:	480d      	ldr	r0, [pc, #52]	@ (8003668 <I2C3_MspInit+0xa0>)
 8003634:	f000 fb60 	bl	8003cf8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800363c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800363e:	2312      	movs	r3, #18
 8003640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800364a:	2304      	movs	r3, #4
 800364c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	@ (800366c <I2C3_MspInit+0xa4>)
 8003656:	f000 fb4f 	bl	8003cf8 <HAL_GPIO_Init>
    
}
 800365a:	bf00      	nop
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40020800 	.word	0x40020800
 800366c:	40020000 	.word	0x40020000

08003670 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af04      	add	r7, sp, #16
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
 800367a:	460b      	mov	r3, r1
 800367c:	717b      	strb	r3, [r7, #5]
 800367e:	4613      	mov	r3, r2
 8003680:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003682:	793b      	ldrb	r3, [r7, #4]
 8003684:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003686:	797b      	ldrb	r3, [r7, #5]
 8003688:	b29a      	uxth	r2, r3
 800368a:	88f9      	ldrh	r1, [r7, #6]
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <I2C3_Write+0x48>)
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	2301      	movs	r3, #1
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	f107 030f 	add.w	r3, r7, #15
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	4807      	ldr	r0, [pc, #28]	@ (80036bc <I2C3_Write+0x4c>)
 800369e:	f000 ff59 	bl	8004554 <HAL_I2C_Mem_Write>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <I2C3_Write+0x50>)
 80036a8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80036aa:	f7ff ff3f 	bl	800352c <verifyHAL_I2C_IS_OKAY>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	0003d090 	.word	0x0003d090
 80036bc:	20025bb8 	.word	0x20025bb8
 80036c0:	20025c0c 	.word	0x20025c0c

080036c4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af04      	add	r7, sp, #16
 80036ca:	4603      	mov	r3, r0
 80036cc:	603a      	str	r2, [r7, #0]
 80036ce:	71fb      	strb	r3, [r7, #7]
 80036d0:	460b      	mov	r3, r1
 80036d2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	b299      	uxth	r1, r3
 80036d8:	79bb      	ldrb	r3, [r7, #6]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <I2C3_Read+0x40>)
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	2301      	movs	r3, #1
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2301      	movs	r3, #1
 80036ea:	4807      	ldr	r0, [pc, #28]	@ (8003708 <I2C3_Read+0x44>)
 80036ec:	f001 f82c 	bl	8004748 <HAL_I2C_Mem_Read>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <I2C3_Read+0x48>)
 80036f6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80036f8:	f7ff ff18 	bl	800352c <verifyHAL_I2C_IS_OKAY>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	0003d090 	.word	0x0003d090
 8003708:	20025bb8 	.word	0x20025bb8
 800370c:	20025c0c 	.word	0x20025c0c

08003710 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af04      	add	r7, sp, #16
 8003716:	603a      	str	r2, [r7, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	460b      	mov	r3, r1
 8003720:	71bb      	strb	r3, [r7, #6]
 8003722:	4613      	mov	r3, r2
 8003724:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	b299      	uxth	r1, r3
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <I2C3_MulitByteRead+0x3c>)
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	88bb      	ldrh	r3, [r7, #4]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2301      	movs	r3, #1
 800373c:	4804      	ldr	r0, [pc, #16]	@ (8003750 <I2C3_MulitByteRead+0x40>)
 800373e:	f001 f803 	bl	8004748 <HAL_I2C_Mem_Read>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	0003d090 	.word	0x0003d090
 8003750:	20025bb8 	.word	0x20025bb8

08003754 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800375e:	204d      	movs	r0, #77	@ 0x4d
 8003760:	f7ff fe07 	bl	8003372 <STMPE811_Read>
 8003764:	4603      	mov	r3, r0
 8003766:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003768:	204e      	movs	r0, #78	@ 0x4e
 800376a:	f7ff fe02 	bl	8003372 <STMPE811_Read>
 800376e:	4603      	mov	r3, r0
 8003770:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003772:	7a7b      	ldrb	r3, [r7, #9]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	b21a      	sxth	r2, r3
 8003778:	7a3b      	ldrb	r3, [r7, #8]
 800377a:	b21b      	sxth	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003784:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003788:	4293      	cmp	r3, r2
 800378a:	dc06      	bgt.n	800379a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003792:	330c      	adds	r3, #12
 8003794:	b29b      	uxth	r3, r3
 8003796:	81fb      	strh	r3, [r7, #14]
 8003798:	e005      	b.n	80037a6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800379a:	89fb      	ldrh	r3, [r7, #14]
 800379c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80037a0:	3308      	adds	r3, #8
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80037a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037aa:	4a18      	ldr	r2, [pc, #96]	@ (800380c <TM_STMPE811_ReadX+0xb8>)
 80037ac:	fb82 1203 	smull	r1, r2, r2, r3
 80037b0:	441a      	add	r2, r3
 80037b2:	10d2      	asrs	r2, r2, #3
 80037b4:	17db      	asrs	r3, r3, #31
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80037ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037be:	2bef      	cmp	r3, #239	@ 0xef
 80037c0:	dd02      	ble.n	80037c8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80037c2:	23ef      	movs	r3, #239	@ 0xef
 80037c4:	81fb      	strh	r3, [r7, #14]
 80037c6:	e005      	b.n	80037d4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80037c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da01      	bge.n	80037d4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80037d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	429a      	cmp	r2, r3
 80037dc:	dd05      	ble.n	80037ea <TM_STMPE811_ReadX+0x96>
 80037de:	89fa      	ldrh	r2, [r7, #14]
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	b21b      	sxth	r3, r3
 80037e8:	e004      	b.n	80037f4 <TM_STMPE811_ReadX+0xa0>
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80037f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	dd01      	ble.n	8003802 <TM_STMPE811_ReadX+0xae>
        return val;
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	e000      	b.n	8003804 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003802:	88fb      	ldrh	r3, [r7, #6]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	88888889 	.word	0x88888889

08003810 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800381a:	204f      	movs	r0, #79	@ 0x4f
 800381c:	f7ff fda9 	bl	8003372 <STMPE811_Read>
 8003820:	4603      	mov	r3, r0
 8003822:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003824:	2050      	movs	r0, #80	@ 0x50
 8003826:	f7ff fda4 	bl	8003372 <STMPE811_Read>
 800382a:	4603      	mov	r3, r0
 800382c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800382e:	7a7b      	ldrb	r3, [r7, #9]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	b21a      	sxth	r2, r3
 8003834:	7a3b      	ldrb	r3, [r7, #8]
 8003836:	b21b      	sxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003842:	b29b      	uxth	r3, r3
 8003844:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800384a:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <TM_STMPE811_ReadY+0xa0>)
 800384c:	fb82 1203 	smull	r1, r2, r2, r3
 8003850:	1052      	asrs	r2, r2, #1
 8003852:	17db      	asrs	r3, r3, #31
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800385c:	2b00      	cmp	r3, #0
 800385e:	dc02      	bgt.n	8003866 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	81fb      	strh	r3, [r7, #14]
 8003864:	e007      	b.n	8003876 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800386a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800386e:	db02      	blt.n	8003876 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003870:	f240 133f 	movw	r3, #319	@ 0x13f
 8003874:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003876:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	429a      	cmp	r2, r3
 800387e:	dd05      	ble.n	800388c <TM_STMPE811_ReadY+0x7c>
 8003880:	89fa      	ldrh	r2, [r7, #14]
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	b29b      	uxth	r3, r3
 8003888:	b21b      	sxth	r3, r3
 800388a:	e004      	b.n	8003896 <TM_STMPE811_ReadY+0x86>
 800388c:	89fb      	ldrh	r3, [r7, #14]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	b21b      	sxth	r3, r3
 8003896:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800389c:	2b04      	cmp	r3, #4
 800389e:	dd01      	ble.n	80038a4 <TM_STMPE811_ReadY+0x94>
        return val;
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	e000      	b.n	80038a6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80038a4:	88fb      	ldrh	r3, [r7, #6]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2e8ba2e9 	.word	0x2e8ba2e9

080038b4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <_sbrk+0x5c>)
 80038ce:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <_sbrk+0x60>)
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d8:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <_sbrk+0x64>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <_sbrk+0x64>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	@ (800392c <_sbrk+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d207      	bcs.n	8003904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f4:	f003 fe1c 	bl	8007530 <__errno>
 80038f8:	4603      	mov	r3, r0
 80038fa:	220c      	movs	r2, #12
 80038fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e009      	b.n	8003918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	4a05      	ldr	r2, [pc, #20]	@ (8003928 <_sbrk+0x64>)
 8003914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20030000 	.word	0x20030000
 8003924:	00000400 	.word	0x00000400
 8003928:	20025c10 	.word	0x20025c10
 800392c:	20025d60 	.word	0x20025d60

08003930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800398c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003958:	f7ff ffea 	bl	8003930 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800395c:	480c      	ldr	r0, [pc, #48]	@ (8003990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800395e:	490d      	ldr	r1, [pc, #52]	@ (8003994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003960:	4a0d      	ldr	r2, [pc, #52]	@ (8003998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800396c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003972:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003974:	4c0a      	ldr	r4, [pc, #40]	@ (80039a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003982:	f003 fddb 	bl	800753c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003986:	f7fe fbb7 	bl	80020f8 <main>
  bx  lr    
 800398a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800398c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003994:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003998:	08009994 	.word	0x08009994
  ldr r2, =_sbss
 800399c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80039a0:	20025d60 	.word	0x20025d60

080039a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039a4:	e7fe      	b.n	80039a4 <ADC_IRQHandler>
	...

080039a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039ac:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <HAL_Init+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <HAL_Init+0x40>)
 80039b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <HAL_Init+0x40>)
 80039be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c4:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_Init+0x40>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <HAL_Init+0x40>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f000 f94f 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f000 f808 	bl	80039ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039dc:	f7ff f980 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00

080039ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_InitTick+0x54>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_InitTick+0x58>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f967 	bl	8003cde <HAL_SYSTICK_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00e      	b.n	8003a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d80a      	bhi.n	8003a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	2200      	movs	r2, #0
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 f92f 	bl	8003c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a2c:	4a06      	ldr	r2, [pc, #24]	@ (8003a48 <HAL_InitTick+0x5c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	2000001c 	.word	0x2000001c
 8003a44:	20000024 	.word	0x20000024
 8003a48:	20000020 	.word	0x20000020

08003a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_IncTick+0x20>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_IncTick+0x24>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a04      	ldr	r2, [pc, #16]	@ (8003a70 <HAL_IncTick+0x24>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000024 	.word	0x20000024
 8003a70:	20025c14 	.word	0x20025c14

08003a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTick;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <HAL_GetTick+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20025c14 	.word	0x20025c14

08003a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff ffee 	bl	8003a74 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d005      	beq.n	8003ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <HAL_Delay+0x44>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ab2:	bf00      	nop
 8003ab4:	f7ff ffde 	bl	8003a74 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d8f7      	bhi.n	8003ab4 <HAL_Delay+0x28>
  {
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000024 	.word	0x20000024

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	@ (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	@ (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	@ (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff8e 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff29 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff3e 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff8e 	bl	8003bc8 <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5d 	bl	8003b74 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff31 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e177      	b.n	8004004 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f040 8166 	bne.w	8003ffe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d130      	bne.n	8003dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 0201 	and.w	r2, r3, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d017      	beq.n	8003de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d123      	bne.n	8003e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	08da      	lsrs	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3208      	adds	r2, #8
 8003dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80c0 	beq.w	8003ffe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_GPIO_Init+0x324>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_GPIO_Init+0x324>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e8e:	4b63      	ldr	r3, [pc, #396]	@ (800401c <HAL_GPIO_Init+0x324>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9a:	4a61      	ldr	r2, [pc, #388]	@ (8004020 <HAL_GPIO_Init+0x328>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	@ (8004024 <HAL_GPIO_Init+0x32c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d037      	beq.n	8003f36 <HAL_GPIO_Init+0x23e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	@ (8004028 <HAL_GPIO_Init+0x330>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0x23a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	@ (800402c <HAL_GPIO_Init+0x334>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x236>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a55      	ldr	r2, [pc, #340]	@ (8004030 <HAL_GPIO_Init+0x338>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x232>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a54      	ldr	r2, [pc, #336]	@ (8004034 <HAL_GPIO_Init+0x33c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x22e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a53      	ldr	r2, [pc, #332]	@ (8004038 <HAL_GPIO_Init+0x340>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	@ (800403c <HAL_GPIO_Init+0x344>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	@ (8004040 <HAL_GPIO_Init+0x348>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a50      	ldr	r2, [pc, #320]	@ (8004044 <HAL_GPIO_Init+0x34c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4f      	ldr	r2, [pc, #316]	@ (8004048 <HAL_GPIO_Init+0x350>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e012      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e010      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	@ (8004020 <HAL_GPIO_Init+0x328>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a34      	ldr	r2, [pc, #208]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b32      	ldr	r3, [pc, #200]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae84 	bls.w	8003d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40022000 	.word	0x40022000
 8004048:	40022400 	.word	0x40022400
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e0d9      	b.n	8004220 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800406c:	2201      	movs	r2, #1
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	429a      	cmp	r2, r3
 8004084:	f040 80c9 	bne.w	800421a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004088:	4a6b      	ldr	r2, [pc, #428]	@ (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a63      	ldr	r2, [pc, #396]	@ (800423c <HAL_GPIO_DeInit+0x1ec>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d037      	beq.n	8004122 <HAL_GPIO_DeInit+0xd2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a62      	ldr	r2, [pc, #392]	@ (8004240 <HAL_GPIO_DeInit+0x1f0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d031      	beq.n	800411e <HAL_GPIO_DeInit+0xce>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a61      	ldr	r2, [pc, #388]	@ (8004244 <HAL_GPIO_DeInit+0x1f4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d02b      	beq.n	800411a <HAL_GPIO_DeInit+0xca>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a60      	ldr	r2, [pc, #384]	@ (8004248 <HAL_GPIO_DeInit+0x1f8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d025      	beq.n	8004116 <HAL_GPIO_DeInit+0xc6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a5f      	ldr	r2, [pc, #380]	@ (800424c <HAL_GPIO_DeInit+0x1fc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01f      	beq.n	8004112 <HAL_GPIO_DeInit+0xc2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004250 <HAL_GPIO_DeInit+0x200>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d019      	beq.n	800410e <HAL_GPIO_DeInit+0xbe>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004254 <HAL_GPIO_DeInit+0x204>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_GPIO_DeInit+0xba>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004258 <HAL_GPIO_DeInit+0x208>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00d      	beq.n	8004106 <HAL_GPIO_DeInit+0xb6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a5b      	ldr	r2, [pc, #364]	@ (800425c <HAL_GPIO_DeInit+0x20c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <HAL_GPIO_DeInit+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004260 <HAL_GPIO_DeInit+0x210>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_GPIO_DeInit+0xae>
 80040fa:	2309      	movs	r3, #9
 80040fc:	e012      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 80040fe:	230a      	movs	r3, #10
 8004100:	e010      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004102:	2308      	movs	r3, #8
 8004104:	e00e      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004106:	2307      	movs	r3, #7
 8004108:	e00c      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800410a:	2306      	movs	r3, #6
 800410c:	e00a      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800410e:	2305      	movs	r3, #5
 8004110:	e008      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004112:	2304      	movs	r3, #4
 8004114:	e006      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004116:	2303      	movs	r3, #3
 8004118:	e004      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800411a:	2302      	movs	r3, #2
 800411c:	e002      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004122:	2300      	movs	r3, #0
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	f002 0203 	and.w	r2, r2, #3
 800412a:	0092      	lsls	r2, r2, #2
 800412c:	4093      	lsls	r3, r2
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	d132      	bne.n	800419a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004134:	4b4b      	ldr	r3, [pc, #300]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	4949      	ldr	r1, [pc, #292]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 800413e:	4013      	ands	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004142:	4b48      	ldr	r3, [pc, #288]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	4946      	ldr	r1, [pc, #280]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 800414c:	4013      	ands	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004150:	4b44      	ldr	r3, [pc, #272]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43db      	mvns	r3, r3
 8004158:	4942      	ldr	r1, [pc, #264]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 800415a:	4013      	ands	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800415e:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	493f      	ldr	r1, [pc, #252]	@ (8004264 <HAL_GPIO_DeInit+0x214>)
 8004168:	4013      	ands	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800417c:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	43da      	mvns	r2, r3
 800418c:	482a      	ldr	r0, [pc, #168]	@ (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	400a      	ands	r2, r1
 8004194:	3302      	adds	r3, #2
 8004196:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2103      	movs	r1, #3
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	08d2      	lsrs	r2, r2, #3
 80041d0:	4019      	ands	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2103      	movs	r1, #3
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	2101      	movs	r1, #1
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2103      	movs	r1, #3
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	401a      	ands	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f af22 	bls.w	800406c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40021c00 	.word	0x40021c00
 800425c:	40022000 	.word	0x40022000
 8004260:	40022400 	.word	0x40022400
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042b2:	4a05      	ldr	r2, [pc, #20]	@ (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fc6e 	bl	8002b9c <HAL_GPIO_EXTI_Callback>
  }
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40013c00 	.word	0x40013c00

080042cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e12b      	b.n	8004536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe fd1c 	bl	8002d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004330:	f001 ff82 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4a81      	ldr	r2, [pc, #516]	@ (8004540 <HAL_I2C_Init+0x274>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d807      	bhi.n	8004350 <HAL_I2C_Init+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a80      	ldr	r2, [pc, #512]	@ (8004544 <HAL_I2C_Init+0x278>)
 8004344:	4293      	cmp	r3, r2
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e006      	b.n	800435e <HAL_I2C_Init+0x92>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a7d      	ldr	r2, [pc, #500]	@ (8004548 <HAL_I2C_Init+0x27c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	bf94      	ite	ls
 8004358:	2301      	movls	r3, #1
 800435a:	2300      	movhi	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0e7      	b.n	8004536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a78      	ldr	r2, [pc, #480]	@ (800454c <HAL_I2C_Init+0x280>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a6a      	ldr	r2, [pc, #424]	@ (8004540 <HAL_I2C_Init+0x274>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d802      	bhi.n	80043a0 <HAL_I2C_Init+0xd4>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	3301      	adds	r3, #1
 800439e:	e009      	b.n	80043b4 <HAL_I2C_Init+0xe8>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	4a69      	ldr	r2, [pc, #420]	@ (8004550 <HAL_I2C_Init+0x284>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	3301      	adds	r3, #1
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	495c      	ldr	r1, [pc, #368]	@ (8004540 <HAL_I2C_Init+0x274>)
 80043d0:	428b      	cmp	r3, r1
 80043d2:	d819      	bhi.n	8004408 <HAL_I2C_Init+0x13c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e59      	subs	r1, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043e8:	400b      	ands	r3, r1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_I2C_Init+0x138>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e59      	subs	r1, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004402:	e051      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004404:	2304      	movs	r3, #4
 8004406:	e04f      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d111      	bne.n	8004434 <HAL_I2C_Init+0x168>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1e58      	subs	r0, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e012      	b.n	800445a <HAL_I2C_Init+0x18e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e58      	subs	r0, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	0099      	lsls	r1, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	fbb0 f3f3 	udiv	r3, r0, r3
 800444a:	3301      	adds	r3, #1
 800444c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Init+0x196>
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <HAL_I2C_Init+0x1bc>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e58      	subs	r0, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	440b      	add	r3, r1
 8004478:	fbb0 f3f3 	udiv	r3, r0, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004486:	e00f      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	0099      	lsls	r1, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	6809      	ldr	r1, [r1, #0]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6911      	ldr	r1, [r2, #16]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68d2      	ldr	r2, [r2, #12]
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	000186a0 	.word	0x000186a0
 8004544:	001e847f 	.word	0x001e847f
 8004548:	003d08ff 	.word	0x003d08ff
 800454c:	431bde83 	.word	0x431bde83
 8004550:	10624dd3 	.word	0x10624dd3

08004554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800456e:	f7ff fa81 	bl	8003a74 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	f040 80d9 	bne.w	8004734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2319      	movs	r3, #25
 8004588:	2201      	movs	r2, #1
 800458a:	496d      	ldr	r1, [pc, #436]	@ (8004740 <HAL_I2C_Mem_Write+0x1ec>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fc8b 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
 800459a:	e0cc      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Write+0x56>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0c5      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d007      	beq.n	80045d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2221      	movs	r2, #33	@ 0x21
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2240      	movs	r2, #64	@ 0x40
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a4d      	ldr	r2, [pc, #308]	@ (8004744 <HAL_I2C_Mem_Write+0x1f0>)
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004612:	88f8      	ldrh	r0, [r7, #6]
 8004614:	893a      	ldrh	r2, [r7, #8]
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fac2 	bl	8004bac <I2C_RequestMemoryWrite>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d052      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e081      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fd50 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b04      	cmp	r3, #4
 8004648:	d107      	bne.n	800465a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06b      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11b      	bne.n	80046d4 <HAL_I2C_Mem_Write+0x180>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1aa      	bne.n	8004632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fd43 	bl	800516c <I2C_WaitOnBTFFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d107      	bne.n	8004704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e016      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	00100002 	.word	0x00100002
 8004744:	ffff0000 	.word	0xffff0000

08004748 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	@ 0x30
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	460b      	mov	r3, r1
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004762:	f7ff f987 	bl	8003a74 <HAL_GetTick>
 8004766:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	f040 8214 	bne.w	8004b9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2319      	movs	r3, #25
 800477c:	2201      	movs	r2, #1
 800477e:	497b      	ldr	r1, [pc, #492]	@ (800496c <HAL_I2C_Mem_Read+0x224>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fb91 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
 800478e:	e207      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2C_Mem_Read+0x56>
 800479a:	2302      	movs	r3, #2
 800479c:	e200      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d007      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2222      	movs	r2, #34	@ 0x22
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2240      	movs	r2, #64	@ 0x40
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a5b      	ldr	r2, [pc, #364]	@ (8004970 <HAL_I2C_Mem_Read+0x228>)
 8004804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004806:	88f8      	ldrh	r0, [r7, #6]
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fa5e 	bl	8004cd8 <I2C_RequestMemoryRead>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1bc      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d113      	bne.n	8004856 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e190      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	2b01      	cmp	r3, #1
 800485c:	d11b      	bne.n	8004896 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e170      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	2b02      	cmp	r3, #2
 800489c:	d11b      	bne.n	80048d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	e150      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048ec:	e144      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	f200 80f1 	bhi.w	8004ada <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d123      	bne.n	8004948 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004902:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fc79 	bl	80051fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e145      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004946:	e117      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494c:	2b02      	cmp	r3, #2
 800494e:	d14e      	bne.n	80049ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	4906      	ldr	r1, [pc, #24]	@ (8004974 <HAL_I2C_Mem_Read+0x22c>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 faa4 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e11a      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
 800496a:	bf00      	nop
 800496c:	00100002 	.word	0x00100002
 8004970:	ffff0000 	.word	0xffff0000
 8004974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049ec:	e0c4      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	2200      	movs	r2, #0
 80049f6:	496c      	ldr	r1, [pc, #432]	@ (8004ba8 <HAL_I2C_Mem_Read+0x460>)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fa55 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0cb      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	2200      	movs	r2, #0
 8004a52:	4955      	ldr	r1, [pc, #340]	@ (8004ba8 <HAL_I2C_Mem_Read+0x460>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa27 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e09d      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ad8:	e04e      	b.n	8004b78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fb8c 	bl	80051fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e058      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d124      	bne.n	8004b78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d107      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f47f aeb6 	bne.w	80048ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	@ 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	00010004 	.word	0x00010004

08004bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f960 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfc:	d103      	bne.n	8004c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e05f      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	492d      	ldr	r1, [pc, #180]	@ (8004cd4 <I2C_RequestMemoryWrite+0x128>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f9bb 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04c      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fa46 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e02b      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e021      	b.n	8004cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa20 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e005      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	00010002 	.word	0x00010002

08004cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	817b      	strh	r3, [r7, #10]
 8004cea:	460b      	mov	r3, r1
 8004cec:	813b      	strh	r3, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f8c2 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d38:	d103      	bne.n	8004d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0aa      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	4952      	ldr	r1, [pc, #328]	@ (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f91d 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e097      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f9a8 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e076      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e021      	b.n	8004e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc0:	893b      	ldrh	r3, [r7, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f982 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e050      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfa:	893b      	ldrh	r3, [r7, #8]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e06:	6a39      	ldr	r1, [r7, #32]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f967 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d107      	bne.n	8004e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e035      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f82b 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e013      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	4906      	ldr	r1, [pc, #24]	@ (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f886 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb8:	e048      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d044      	beq.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fe fdd7 	bl	8003a74 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d139      	bne.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0c1b      	lsrs	r3, r3, #16
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10d      	bne.n	8004efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	43da      	mvns	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	e00c      	b.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	43da      	mvns	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d116      	bne.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e023      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10d      	bne.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	43da      	mvns	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	e00c      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d093      	beq.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004faa:	e071      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d123      	bne.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e067      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d041      	beq.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fe fd32 	bl	8003a74 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d136      	bne.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10c      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	43da      	mvns	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e00b      	b.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	43da      	mvns	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e021      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d10c      	bne.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	43da      	mvns	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e00b      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f47f af6d 	bne.w	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e8:	e034      	b.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8e3 	bl	80052b6 <I2C_IsAcknowledgeFailed>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e034      	b.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d028      	beq.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fe fcb7 	bl	8003a74 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11d      	bne.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b80      	cmp	r3, #128	@ 0x80
 8005124:	d016      	beq.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d1c3      	bne.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f89b 	bl	80052b6 <I2C_IsAcknowledgeFailed>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e034      	b.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d028      	beq.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fe fc6f 	bl	8003a74 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d016      	beq.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e007      	b.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d1c3      	bne.n	800517a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005208:	e049      	b.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d119      	bne.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0210 	mvn.w	r2, #16
 8005220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e030      	b.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fe fc12 	bl	8003a74 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11d      	bne.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d016      	beq.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e007      	b.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d1ae      	bne.n	800520a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d11b      	bne.n	8005306 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f043 0204 	orr.w	r2, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d129      	bne.n	800537e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2224      	movs	r2, #36	@ 0x24
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0210 	bic.w	r2, r2, #16
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d12a      	bne.n	80053fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2224      	movs	r2, #36	@ 0x24
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	f023 030f 	bic.w	r3, r3, #15
 80053cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	89fa      	ldrh	r2, [r7, #14]
 80053de:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0bf      	b.n	800559e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fd fce6 	bl	8002e04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800544e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6999      	ldr	r1, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005464:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b4a      	ldr	r3, [pc, #296]	@ (80055a8 <HAL_LTDC_Init+0x19c>)
 8005480:	400b      	ands	r3, r1
 8005482:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b3e      	ldr	r3, [pc, #248]	@ (80055a8 <HAL_LTDC_Init+0x19c>)
 80054ae:	400b      	ands	r3, r1
 80054b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68d9      	ldr	r1, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6919      	ldr	r1, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b33      	ldr	r3, [pc, #204]	@ (80055a8 <HAL_LTDC_Init+0x19c>)
 80054dc:	400b      	ands	r3, r1
 80054de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6919      	ldr	r1, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6959      	ldr	r1, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <HAL_LTDC_Init+0x19c>)
 800550a:	400b      	ands	r3, r1
 800550c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6959      	ldr	r1, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800554e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0206 	orr.w	r2, r2, #6
 800557a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	f000f800 	.word	0xf000f800

080055ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055ac:	b5b0      	push	{r4, r5, r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_LTDC_ConfigLayer+0x1a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e02c      	b.n	8005620 <HAL_LTDC_ConfigLayer+0x74>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2134      	movs	r1, #52	@ 0x34
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4614      	mov	r4, r2
 80055ea:	461d      	mov	r5, r3
 80055ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f811 	bl	8005628 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bdb0      	pop	{r4, r5, r7, pc}

08005628 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	@ 0x24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	4413      	add	r3, r2
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	01db      	lsls	r3, r3, #7
 8005654:	4413      	add	r3, r2
 8005656:	3384      	adds	r3, #132	@ 0x84
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	4611      	mov	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	01d2      	lsls	r2, r2, #7
 8005664:	440a      	add	r2, r1
 8005666:	3284      	adds	r2, #132	@ 0x84
 8005668:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800566c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800567e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005680:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	440b      	add	r3, r1
 800568e:	3384      	adds	r3, #132	@ 0x84
 8005690:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005696:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a6:	4413      	add	r3, r2
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	@ 0x84
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	4611      	mov	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	01d2      	lsls	r2, r2, #7
 80056c6:	440a      	add	r2, r1
 80056c8:	3284      	adds	r2, #132	@ 0x84
 80056ca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80056ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056de:	4413      	add	r3, r2
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	01db      	lsls	r3, r3, #7
 80056ec:	440b      	add	r3, r1
 80056ee:	3384      	adds	r3, #132	@ 0x84
 80056f0:	4619      	mov	r1, r3
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	01db      	lsls	r3, r3, #7
 8005702:	4413      	add	r3, r2
 8005704:	3384      	adds	r3, #132	@ 0x84
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	4611      	mov	r1, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	01d2      	lsls	r2, r2, #7
 8005712:	440a      	add	r2, r1
 8005714:	3284      	adds	r2, #132	@ 0x84
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4413      	add	r3, r2
 8005728:	3384      	adds	r3, #132	@ 0x84
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	01db      	lsls	r3, r3, #7
 8005758:	4413      	add	r3, r2
 800575a:	3384      	adds	r3, #132	@ 0x84
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	01db      	lsls	r3, r3, #7
 8005768:	4413      	add	r3, r2
 800576a:	3384      	adds	r3, #132	@ 0x84
 800576c:	461a      	mov	r2, r3
 800576e:	2300      	movs	r3, #0
 8005770:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005778:	461a      	mov	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	431a      	orrs	r2, r3
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4619      	mov	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	01db      	lsls	r3, r3, #7
 800578c:	440b      	add	r3, r1
 800578e:	3384      	adds	r3, #132	@ 0x84
 8005790:	4619      	mov	r1, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	01db      	lsls	r3, r3, #7
 80057a2:	4413      	add	r3, r2
 80057a4:	3384      	adds	r3, #132	@ 0x84
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4611      	mov	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	01d2      	lsls	r2, r2, #7
 80057b2:	440a      	add	r2, r1
 80057b4:	3284      	adds	r2, #132	@ 0x84
 80057b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	4413      	add	r3, r2
 80057c8:	3384      	adds	r3, #132	@ 0x84
 80057ca:	461a      	mov	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	01db      	lsls	r3, r3, #7
 80057dc:	4413      	add	r3, r2
 80057de:	3384      	adds	r3, #132	@ 0x84
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	4611      	mov	r1, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	01d2      	lsls	r2, r2, #7
 80057ec:	440a      	add	r2, r1
 80057ee:	3284      	adds	r2, #132	@ 0x84
 80057f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6809      	ldr	r1, [r1, #0]
 8005806:	4608      	mov	r0, r1
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	01c9      	lsls	r1, r1, #7
 800580c:	4401      	add	r1, r0
 800580e:	3184      	adds	r1, #132	@ 0x84
 8005810:	4313      	orrs	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	01db      	lsls	r3, r3, #7
 800581e:	4413      	add	r3, r2
 8005820:	3384      	adds	r3, #132	@ 0x84
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	@ 0x84
 8005832:	461a      	mov	r2, r3
 8005834:	2300      	movs	r3, #0
 8005836:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	01db      	lsls	r3, r3, #7
 8005842:	4413      	add	r3, r2
 8005844:	3384      	adds	r3, #132	@ 0x84
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005856:	2304      	movs	r3, #4
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e01b      	b.n	8005894 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005864:	2303      	movs	r3, #3
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	e014      	b.n	8005894 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00b      	beq.n	800588a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005876:	2b02      	cmp	r3, #2
 8005878:	d007      	beq.n	800588a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800587e:	2b03      	cmp	r3, #3
 8005880:	d003      	beq.n	800588a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005886:	2b07      	cmp	r3, #7
 8005888:	d102      	bne.n	8005890 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800588a:	2302      	movs	r3, #2
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e001      	b.n	8005894 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	@ 0x84
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	4611      	mov	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	01d2      	lsls	r2, r2, #7
 80058ae:	440a      	add	r2, r1
 80058b0:	3284      	adds	r2, #132	@ 0x84
 80058b2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80058b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	1acb      	subs	r3, r1, r3
 80058ce:	69f9      	ldr	r1, [r7, #28]
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	6809      	ldr	r1, [r1, #0]
 80058da:	4608      	mov	r0, r1
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	01c9      	lsls	r1, r1, #7
 80058e0:	4401      	add	r1, r0
 80058e2:	3184      	adds	r1, #132	@ 0x84
 80058e4:	4313      	orrs	r3, r2
 80058e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	4413      	add	r3, r2
 80058f4:	3384      	adds	r3, #132	@ 0x84
 80058f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	4611      	mov	r1, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	01d2      	lsls	r2, r2, #7
 8005902:	440a      	add	r2, r1
 8005904:	3284      	adds	r2, #132	@ 0x84
 8005906:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	4413      	add	r3, r2
 800591c:	3384      	adds	r3, #132	@ 0x84
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	4413      	add	r3, r2
 8005932:	3384      	adds	r3, #132	@ 0x84
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	4611      	mov	r1, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	01d2      	lsls	r2, r2, #7
 8005940:	440a      	add	r2, r1
 8005942:	3284      	adds	r2, #132	@ 0x84
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	3724      	adds	r7, #36	@ 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e267      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d075      	beq.n	8005a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005976:	4b88      	ldr	r3, [pc, #544]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00c      	beq.n	800599c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005982:	4b85      	ldr	r3, [pc, #532]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800598a:	2b08      	cmp	r3, #8
 800598c:	d112      	bne.n	80059b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598e:	4b82      	ldr	r3, [pc, #520]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599a:	d10b      	bne.n	80059b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05b      	beq.n	8005a60 <HAL_RCC_OscConfig+0x108>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d157      	bne.n	8005a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e242      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d106      	bne.n	80059cc <HAL_RCC_OscConfig+0x74>
 80059be:	4b76      	ldr	r3, [pc, #472]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a75      	ldr	r2, [pc, #468]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e01d      	b.n	8005a08 <HAL_RCC_OscConfig+0xb0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x98>
 80059d6:	4b70      	ldr	r3, [pc, #448]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a6f      	ldr	r2, [pc, #444]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e00b      	b.n	8005a08 <HAL_RCC_OscConfig+0xb0>
 80059f0:	4b69      	ldr	r3, [pc, #420]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a68      	ldr	r2, [pc, #416]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4b66      	ldr	r3, [pc, #408]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a65      	ldr	r2, [pc, #404]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d013      	beq.n	8005a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fe f830 	bl	8003a74 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fe f82c 	bl	8003a74 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	@ 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e207      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0xc0>
 8005a36:	e014      	b.n	8005a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a38:	f7fe f81c 	bl	8003a74 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a40:	f7fe f818 	bl	8003a74 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	@ 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e1f3      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a52:	4b51      	ldr	r3, [pc, #324]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0xe8>
 8005a5e:	e000      	b.n	8005a62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d063      	beq.n	8005b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7a:	4b47      	ldr	r3, [pc, #284]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d11c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a86:	4b44      	ldr	r3, [pc, #272]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d116      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a92:	4b41      	ldr	r3, [pc, #260]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_RCC_OscConfig+0x152>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e1c7      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4937      	ldr	r1, [pc, #220]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abe:	e03a      	b.n	8005b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d020      	beq.n	8005b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac8:	4b34      	ldr	r3, [pc, #208]	@ (8005b9c <HAL_RCC_OscConfig+0x244>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fd ffd1 	bl	8003a74 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fd ffcd 	bl	8003a74 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e1a8      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af4:	4b28      	ldr	r3, [pc, #160]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4925      	ldr	r1, [pc, #148]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	600b      	str	r3, [r1, #0]
 8005b08:	e015      	b.n	8005b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0a:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <HAL_RCC_OscConfig+0x244>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b10:	f7fd ffb0 	bl	8003a74 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b18:	f7fd ffac 	bl	8003a74 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e187      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d036      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d016      	beq.n	8005b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <HAL_RCC_OscConfig+0x248>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b50:	f7fd ff90 	bl	8003a74 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b58:	f7fd ff8c 	bl	8003a74 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e167      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x200>
 8005b76:	e01b      	b.n	8005bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b78:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <HAL_RCC_OscConfig+0x248>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fd ff79 	bl	8003a74 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b86:	f7fd ff75 	bl	8003a74 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d907      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e150      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	42470000 	.word	0x42470000
 8005ba0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	4b88      	ldr	r3, [pc, #544]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ea      	bne.n	8005b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8097 	beq.w	8005cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc2:	4b81      	ldr	r3, [pc, #516]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bde:	4b7a      	ldr	r3, [pc, #488]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bea:	2301      	movs	r3, #1
 8005bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bee:	4b77      	ldr	r3, [pc, #476]	@ (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d118      	bne.n	8005c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfa:	4b74      	ldr	r3, [pc, #464]	@ (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a73      	ldr	r2, [pc, #460]	@ (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c06:	f7fd ff35 	bl	8003a74 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0e:	f7fd ff31 	bl	8003a74 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e10c      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	4b6a      	ldr	r3, [pc, #424]	@ (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x2ea>
 8005c34:	4b64      	ldr	r3, [pc, #400]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c38:	4a63      	ldr	r2, [pc, #396]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c40:	e01c      	b.n	8005c7c <HAL_RCC_OscConfig+0x324>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d10c      	bne.n	8005c64 <HAL_RCC_OscConfig+0x30c>
 8005c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c50:	f043 0304 	orr.w	r3, r3, #4
 8005c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c56:	4b5c      	ldr	r3, [pc, #368]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c62:	e00b      	b.n	8005c7c <HAL_RCC_OscConfig+0x324>
 8005c64:	4b58      	ldr	r3, [pc, #352]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c68:	4a57      	ldr	r2, [pc, #348]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c70:	4b55      	ldr	r3, [pc, #340]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	4a54      	ldr	r2, [pc, #336]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d015      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fd fef6 	bl	8003a74 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	e00a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f7fd fef2 	bl	8003a74 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0cb      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca2:	4b49      	ldr	r3, [pc, #292]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0ee      	beq.n	8005c8c <HAL_RCC_OscConfig+0x334>
 8005cae:	e014      	b.n	8005cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fee0 	bl	8003a74 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd fedc 	bl	8003a74 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0b5      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cce:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1ee      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d105      	bne.n	8005cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce0:	4b39      	ldr	r3, [pc, #228]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	4a38      	ldr	r2, [pc, #224]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80a1 	beq.w	8005e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf6:	4b34      	ldr	r3, [pc, #208]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d05c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d141      	bne.n	8005d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b31      	ldr	r3, [pc, #196]	@ (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fd feb0 	bl	8003a74 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fd feac 	bl	8003a74 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e087      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	4b27      	ldr	r3, [pc, #156]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	491b      	ldr	r1, [pc, #108]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d60:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fd fe85 	bl	8003a74 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fd fe81 	bl	8003a74 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e05c      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d80:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x416>
 8005d8c:	e054      	b.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8e:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fd fe6e 	bl	8003a74 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd fe6a 	bl	8003a74 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e045      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x444>
 8005dba:	e03d      	b.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e038      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <HAL_RCC_OscConfig+0x4ec>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d028      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d121      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d11a      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d111      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d107      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800

08005e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0cc      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b68      	ldr	r3, [pc, #416]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90c      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b65      	ldr	r3, [pc, #404]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b63      	ldr	r3, [pc, #396]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0b8      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e9c:	4b59      	ldr	r3, [pc, #356]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb4:	4b53      	ldr	r3, [pc, #332]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a52      	ldr	r2, [pc, #328]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec0:	4b50      	ldr	r3, [pc, #320]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	494d      	ldr	r1, [pc, #308]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d044      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	4b47      	ldr	r3, [pc, #284]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d119      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d003      	beq.n	8005f06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f06:	4b3f      	ldr	r3, [pc, #252]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e06f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f16:	4b3b      	ldr	r3, [pc, #236]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e067      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f26:	4b37      	ldr	r3, [pc, #220]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f023 0203 	bic.w	r2, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4934      	ldr	r1, [pc, #208]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f38:	f7fd fd9c 	bl	8003a74 <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f40:	f7fd fd98 	bl	8003a74 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e04f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	4b2b      	ldr	r3, [pc, #172]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 020c 	and.w	r2, r3, #12
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1eb      	bne.n	8005f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f68:	4b25      	ldr	r3, [pc, #148]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20c      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b22      	ldr	r3, [pc, #136]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b20      	ldr	r3, [pc, #128]	@ (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e032      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b19      	ldr	r3, [pc, #100]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4916      	ldr	r1, [pc, #88]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fba:	4b12      	ldr	r3, [pc, #72]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	490e      	ldr	r1, [pc, #56]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fce:	f000 f821 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	490a      	ldr	r1, [pc, #40]	@ (8006008 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe0:	5ccb      	ldrb	r3, [r1, r3]
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	4a09      	ldr	r2, [pc, #36]	@ (800600c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fea:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <HAL_RCC_ClockConfig+0x1c8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd fcfc 	bl	80039ec <HAL_InitTick>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40023c00 	.word	0x40023c00
 8006004:	40023800 	.word	0x40023800
 8006008:	08009938 	.word	0x08009938
 800600c:	2000001c 	.word	0x2000001c
 8006010:	20000020 	.word	0x20000020

08006014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b094      	sub	sp, #80	@ 0x50
 800601a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800602c:	4b79      	ldr	r3, [pc, #484]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 030c 	and.w	r3, r3, #12
 8006034:	2b08      	cmp	r3, #8
 8006036:	d00d      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x40>
 8006038:	2b08      	cmp	r3, #8
 800603a:	f200 80e1 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x34>
 8006042:	2b04      	cmp	r3, #4
 8006044:	d003      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x3a>
 8006046:	e0db      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b73      	ldr	r3, [pc, #460]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800604c:	e0db      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800604e:	4b73      	ldr	r3, [pc, #460]	@ (800621c <HAL_RCC_GetSysClockFreq+0x208>)
 8006050:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006052:	e0d8      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006054:	4b6f      	ldr	r3, [pc, #444]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800605c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800605e:	4b6d      	ldr	r3, [pc, #436]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d063      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606a:	4b6a      	ldr	r3, [pc, #424]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	2200      	movs	r2, #0
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006074:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
 800607e:	2300      	movs	r3, #0
 8006080:	637b      	str	r3, [r7, #52]	@ 0x34
 8006082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	f04f 0000 	mov.w	r0, #0
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	0159      	lsls	r1, r3, #5
 8006094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006098:	0150      	lsls	r0, r2, #5
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4621      	mov	r1, r4
 80060a0:	1a51      	subs	r1, r2, r1
 80060a2:	6139      	str	r1, [r7, #16]
 80060a4:	4629      	mov	r1, r5
 80060a6:	eb63 0301 	sbc.w	r3, r3, r1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b8:	4659      	mov	r1, fp
 80060ba:	018b      	lsls	r3, r1, #6
 80060bc:	4651      	mov	r1, sl
 80060be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060c2:	4651      	mov	r1, sl
 80060c4:	018a      	lsls	r2, r1, #6
 80060c6:	4651      	mov	r1, sl
 80060c8:	ebb2 0801 	subs.w	r8, r2, r1
 80060cc:	4659      	mov	r1, fp
 80060ce:	eb63 0901 	sbc.w	r9, r3, r1
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e6:	4690      	mov	r8, r2
 80060e8:	4699      	mov	r9, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	eb18 0303 	adds.w	r3, r8, r3
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	462b      	mov	r3, r5
 80060f4:	eb49 0303 	adc.w	r3, r9, r3
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006106:	4629      	mov	r1, r5
 8006108:	024b      	lsls	r3, r1, #9
 800610a:	4621      	mov	r1, r4
 800610c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006110:	4621      	mov	r1, r4
 8006112:	024a      	lsls	r2, r1, #9
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800611a:	2200      	movs	r2, #0
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800611e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006124:	f7fa f8bc 	bl	80002a0 <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4613      	mov	r3, r2
 800612e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006130:	e058      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006132:	4b38      	ldr	r3, [pc, #224]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	2200      	movs	r2, #0
 800613a:	4618      	mov	r0, r3
 800613c:	4611      	mov	r1, r2
 800613e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006142:	623b      	str	r3, [r7, #32]
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
 8006148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	f04f 0000 	mov.w	r0, #0
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	0159      	lsls	r1, r3, #5
 800615a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800615e:	0150      	lsls	r0, r2, #5
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4641      	mov	r1, r8
 8006166:	ebb2 0a01 	subs.w	sl, r2, r1
 800616a:	4649      	mov	r1, r9
 800616c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800617c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006184:	ebb2 040a 	subs.w	r4, r2, sl
 8006188:	eb63 050b 	sbc.w	r5, r3, fp
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	00eb      	lsls	r3, r5, #3
 8006196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619a:	00e2      	lsls	r2, r4, #3
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	18e3      	adds	r3, r4, r3
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	464b      	mov	r3, r9
 80061a8:	eb45 0303 	adc.w	r3, r5, r3
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ba:	4629      	mov	r1, r5
 80061bc:	028b      	lsls	r3, r1, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c4:	4621      	mov	r1, r4
 80061c6:	028a      	lsls	r2, r1, #10
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ce:	2200      	movs	r2, #0
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	61fa      	str	r2, [r7, #28]
 80061d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d8:	f7fa f862 	bl	80002a0 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80061f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x204>)
 8006202:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006208:	4618      	mov	r0, r3
 800620a:	3750      	adds	r7, #80	@ 0x50
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	007a1200 	.word	0x007a1200

08006220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000001c 	.word	0x2000001c

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	@ (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	08009948 	.word	0x08009948

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006290:	2b00      	cmp	r3, #0
 8006292:	d075      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006294:	4b91      	ldr	r3, [pc, #580]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629a:	f7fd fbeb 	bl	8003a74 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062a2:	f7fd fbe7 	bl	8003a74 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e189      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062b4:	4b8a      	ldr	r3, [pc, #552]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f0      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	019a      	lsls	r2, r3, #6
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	071b      	lsls	r3, r3, #28
 80062d8:	4981      	ldr	r1, [pc, #516]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062ec:	4b7c      	ldr	r3, [pc, #496]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f2:	0f1b      	lsrs	r3, r3, #28
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	019a      	lsls	r2, r3, #6
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	431a      	orrs	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	071b      	lsls	r3, r3, #28
 800630c:	4974      	ldr	r1, [pc, #464]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006314:	4b72      	ldr	r3, [pc, #456]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800631a:	f023 021f 	bic.w	r2, r3, #31
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	3b01      	subs	r3, #1
 8006324:	496e      	ldr	r1, [pc, #440]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	019a      	lsls	r2, r3, #6
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	071b      	lsls	r3, r3, #28
 800634c:	4964      	ldr	r1, [pc, #400]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006354:	4b61      	ldr	r3, [pc, #388]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800635a:	f7fd fb8b 	bl	8003a74 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006362:	f7fd fb87 	bl	8003a74 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e129      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006374:	4b5a      	ldr	r3, [pc, #360]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006394:	2b00      	cmp	r3, #0
 8006396:	d079      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006398:	4b52      	ldr	r3, [pc, #328]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800639e:	f7fd fb69 	bl	8003a74 <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063a4:	e008      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063a6:	f7fd fb65 	bl	8003a74 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e107      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063b8:	4b49      	ldr	r3, [pc, #292]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c4:	d0ef      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d020      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063d2:	4b43      	ldr	r3, [pc, #268]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	0f1b      	lsrs	r3, r3, #28
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	019a      	lsls	r2, r3, #6
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	061b      	lsls	r3, r3, #24
 80063ec:	431a      	orrs	r2, r3
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	071b      	lsls	r3, r3, #28
 80063f2:	493b      	ldr	r1, [pc, #236]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063fa:	4b39      	ldr	r3, [pc, #228]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006400:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	3b01      	subs	r3, #1
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4934      	ldr	r1, [pc, #208]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01e      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006420:	4b2f      	ldr	r3, [pc, #188]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006426:	0e1b      	lsrs	r3, r3, #24
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	019a      	lsls	r2, r3, #6
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	061b      	lsls	r3, r3, #24
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	071b      	lsls	r3, r3, #28
 8006440:	4927      	ldr	r1, [pc, #156]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006448:	4b25      	ldr	r3, [pc, #148]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800644e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	4922      	ldr	r1, [pc, #136]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800645e:	4b21      	ldr	r3, [pc, #132]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006464:	f7fd fb06 	bl	8003a74 <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800646c:	f7fd fb02 	bl	8003a74 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e0a4      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800647e:	4b18      	ldr	r3, [pc, #96]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648a:	d1ef      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 808b 	beq.w	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	4b10      	ldr	r3, [pc, #64]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	4a0f      	ldr	r2, [pc, #60]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064aa:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064b6:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a0b      	ldr	r2, [pc, #44]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064c2:	f7fd fad7 	bl	8003a74 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064c8:	e010      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ca:	f7fd fad3 	bl	8003a74 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d909      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e075      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064dc:	42470068 	.word	0x42470068
 80064e0:	40023800 	.word	0x40023800
 80064e4:	42470070 	.word	0x42470070
 80064e8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064ec:	4b38      	ldr	r3, [pc, #224]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0e8      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f8:	4b36      	ldr	r3, [pc, #216]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006500:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	d028      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006516:	4b2f      	ldr	r3, [pc, #188]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006520:	4b2d      	ldr	r3, [pc, #180]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006526:	4b2c      	ldr	r3, [pc, #176]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800652c:	4a29      	ldr	r2, [pc, #164]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006532:	4b28      	ldr	r3, [pc, #160]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d114      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800653e:	f7fd fa99 	bl	8003a74 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fd fa95 	bl	8003a74 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e035      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655c:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ee      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006574:	d10d      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006576:	4b17      	ldr	r3, [pc, #92]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	4912      	ldr	r1, [pc, #72]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]
 8006590:	e005      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006592:	4b10      	ldr	r3, [pc, #64]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	4a0f      	ldr	r2, [pc, #60]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006598:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800659c:	6093      	str	r3, [r2, #8]
 800659e:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065aa:	490a      	ldr	r1, [pc, #40]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80065c2:	4b06      	ldr	r3, [pc, #24]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80065c4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40007000 	.word	0x40007000
 80065d4:	40023800 	.word	0x40023800
 80065d8:	42470e40 	.word	0x42470e40
 80065dc:	424711e0 	.word	0x424711e0

080065e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e01c      	b.n	800662c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	795b      	ldrb	r3, [r3, #5]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fc fd26 	bl	8003054 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0204 	orr.w	r2, r2, #4
 800661c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e07b      	b.n	800673e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006656:	d009      	beq.n	800666c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
 800665e:	e005      	b.n	800666c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc fd06 	bl	8003098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f0:	ea42 0103 	orr.w	r1, r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 0104 	and.w	r1, r3, #4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	f003 0210 	and.w	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800672c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e01a      	b.n	800678e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800676e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fc fcd9 	bl	8003128 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b088      	sub	sp, #32
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a6:	f7fd f965 	bl	8003a74 <HAL_GetTick>
 80067aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d001      	beq.n	80067c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
 80067be:	e12a      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_Transmit+0x36>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e122      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_SPI_Transmit+0x48>
 80067da:	2302      	movs	r3, #2
 80067dc:	e11b      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2203      	movs	r2, #3
 80067ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800682c:	d10f      	bne.n	800684e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d007      	beq.n	800686c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006874:	d152      	bne.n	800691c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_SPI_Transmit+0xee>
 800687e:	8b7b      	ldrh	r3, [r7, #26]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d145      	bne.n	8006910 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006894:	1c9a      	adds	r2, r3, #2
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068a8:	e032      	b.n	8006910 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d112      	bne.n	80068de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	881a      	ldrh	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	1c9a      	adds	r2, r3, #2
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068dc:	e018      	b.n	8006910 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068de:	f7fd f8c9 	bl	8003a74 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d803      	bhi.n	80068f6 <HAL_SPI_Transmit+0x160>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_Transmit+0x166>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e082      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1c7      	bne.n	80068aa <HAL_SPI_Transmit+0x114>
 800691a:	e053      	b.n	80069c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_Transmit+0x194>
 8006924:	8b7b      	ldrh	r3, [r7, #26]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d147      	bne.n	80069ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	7812      	ldrb	r2, [r2, #0]
 8006936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006950:	e033      	b.n	80069ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d113      	bne.n	8006988 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006986:	e018      	b.n	80069ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006988:	f7fd f874 	bl	8003a74 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d803      	bhi.n	80069a0 <HAL_SPI_Transmit+0x20a>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d102      	bne.n	80069a6 <HAL_SPI_Transmit+0x210>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e02d      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1c6      	bne.n	8006952 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f8bf 	bl	8006b4c <SPI_EndRxTxTransaction>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a14:	2300      	movs	r3, #0
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a2c:	b2db      	uxtb	r3, r3
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a4c:	f7fd f812 	bl	8003a74 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4413      	add	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a5c:	f7fd f80a 	bl	8003a74 <HAL_GetTick>
 8006a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a62:	4b39      	ldr	r3, [pc, #228]	@ (8006b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	015b      	lsls	r3, r3, #5
 8006a68:	0d1b      	lsrs	r3, r3, #20
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a72:	e054      	b.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d050      	beq.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a7c:	f7fc fffa 	bl	8003a74 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d902      	bls.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d13d      	bne.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aaa:	d111      	bne.n	8006ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab4:	d004      	beq.n	8006ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abe:	d107      	bne.n	8006ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad8:	d10f      	bne.n	8006afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e017      	b.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d19b      	bne.n	8006a74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	2000001c 	.word	0x2000001c

08006b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2102      	movs	r1, #2
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff ff6a 	bl	8006a3c <SPI_WaitFlagStateUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b72:	f043 0220 	orr.w	r2, r3, #32
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e032      	b.n	8006be4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <SPI_EndRxTxTransaction+0xa0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <SPI_EndRxTxTransaction+0xa4>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	0d5b      	lsrs	r3, r3, #21
 8006b8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
 8006b92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b9c:	d112      	bne.n	8006bc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2180      	movs	r1, #128	@ 0x80
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff ff47 	bl	8006a3c <SPI_WaitFlagStateUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d016      	beq.n	8006be2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e00f      	b.n	8006be4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bda:	2b80      	cmp	r3, #128	@ 0x80
 8006bdc:	d0f2      	beq.n	8006bc4 <SPI_EndRxTxTransaction+0x78>
 8006bde:	e000      	b.n	8006be2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006be0:	bf00      	nop
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	2000001c 	.word	0x2000001c
 8006bf0:	165e9f81 	.word	0x165e9f81

08006bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e041      	b.n	8006c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fc faa2 	bl	8003164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f000 fa7e 	bl	8007134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e04e      	b.n	8006d4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a23      	ldr	r2, [pc, #140]	@ (8006d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d022      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd6:	d01d      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x80>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d111      	bne.n	8006d38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d010      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d36:	e007      	b.n	8006d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40001800 	.word	0x40001800

08006d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d020      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01b      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0202 	mvn.w	r2, #2
 8006da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f999 	bl	80070f6 <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f98b 	bl	80070e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f99c 	bl	800710a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d020      	beq.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01b      	beq.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0204 	mvn.w	r2, #4
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f973 	bl	80070f6 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f965 	bl	80070e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f976 	bl	800710a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d020      	beq.n	8006e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01b      	beq.n	8006e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0208 	mvn.w	r2, #8
 8006e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f94d 	bl	80070f6 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f93f 	bl	80070e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f950 	bl	800710a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d020      	beq.n	8006ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0210 	mvn.w	r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2208      	movs	r2, #8
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f927 	bl	80070f6 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f919 	bl	80070e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f92a 	bl	800710a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0201 	mvn.w	r2, #1
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fb fedc 	bl	8002c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fae4 	bl	80074cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f8fb 	bl	800711e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0220 	mvn.w	r2, #32
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fab6 	bl	80074b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIM_ConfigClockSource+0x1c>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e0b4      	b.n	80070da <HAL_TIM_ConfigClockSource+0x186>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa8:	d03e      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0xd4>
 8006faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fae:	f200 8087 	bhi.w	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb6:	f000 8086 	beq.w	80070c6 <HAL_TIM_ConfigClockSource+0x172>
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbe:	d87f      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b70      	cmp	r3, #112	@ 0x70
 8006fc2:	d01a      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0xa6>
 8006fc4:	2b70      	cmp	r3, #112	@ 0x70
 8006fc6:	d87b      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc8:	2b60      	cmp	r3, #96	@ 0x60
 8006fca:	d050      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x11a>
 8006fcc:	2b60      	cmp	r3, #96	@ 0x60
 8006fce:	d877      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd0:	2b50      	cmp	r3, #80	@ 0x50
 8006fd2:	d03c      	beq.n	800704e <HAL_TIM_ConfigClockSource+0xfa>
 8006fd4:	2b50      	cmp	r3, #80	@ 0x50
 8006fd6:	d873      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d058      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x13a>
 8006fdc:	2b40      	cmp	r3, #64	@ 0x40
 8006fde:	d86f      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b30      	cmp	r3, #48	@ 0x30
 8006fe2:	d064      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15a>
 8006fe4:	2b30      	cmp	r3, #48	@ 0x30
 8006fe6:	d86b      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d060      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15a>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d867      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15a>
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d05a      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15a>
 8006ff8:	e062      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800700a:	f000 f9b9 	bl	8007380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800701c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	609a      	str	r2, [r3, #8]
      break;
 8007026:	e04f      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007038:	f000 f9a2 	bl	8007380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800704a:	609a      	str	r2, [r3, #8]
      break;
 800704c:	e03c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	461a      	mov	r2, r3
 800705c:	f000 f916 	bl	800728c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2150      	movs	r1, #80	@ 0x50
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f96f 	bl	800734a <TIM_ITRx_SetConfig>
      break;
 800706c:	e02c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	461a      	mov	r2, r3
 800707c:	f000 f935 	bl	80072ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2160      	movs	r1, #96	@ 0x60
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f95f 	bl	800734a <TIM_ITRx_SetConfig>
      break;
 800708c:	e01c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	461a      	mov	r2, r3
 800709c:	f000 f8f6 	bl	800728c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2140      	movs	r1, #64	@ 0x40
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f94f 	bl	800734a <TIM_ITRx_SetConfig>
      break;
 80070ac:	e00c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f000 f946 	bl	800734a <TIM_ITRx_SetConfig>
      break;
 80070be:	e003      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
      break;
 80070c4:	e000      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a46      	ldr	r2, [pc, #280]	@ (8007260 <TIM_Base_SetConfig+0x12c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007152:	d00f      	beq.n	8007174 <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a43      	ldr	r2, [pc, #268]	@ (8007264 <TIM_Base_SetConfig+0x130>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a42      	ldr	r2, [pc, #264]	@ (8007268 <TIM_Base_SetConfig+0x134>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a41      	ldr	r2, [pc, #260]	@ (800726c <TIM_Base_SetConfig+0x138>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a40      	ldr	r2, [pc, #256]	@ (8007270 <TIM_Base_SetConfig+0x13c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d108      	bne.n	8007186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a35      	ldr	r2, [pc, #212]	@ (8007260 <TIM_Base_SetConfig+0x12c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d02b      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007194:	d027      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a32      	ldr	r2, [pc, #200]	@ (8007264 <TIM_Base_SetConfig+0x130>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d023      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a31      	ldr	r2, [pc, #196]	@ (8007268 <TIM_Base_SetConfig+0x134>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d01f      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a30      	ldr	r2, [pc, #192]	@ (800726c <TIM_Base_SetConfig+0x138>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01b      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007270 <TIM_Base_SetConfig+0x13c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d017      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007274 <TIM_Base_SetConfig+0x140>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007278 <TIM_Base_SetConfig+0x144>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00f      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <TIM_Base_SetConfig+0x148>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00b      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007280 <TIM_Base_SetConfig+0x14c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d007      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <TIM_Base_SetConfig+0x150>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d003      	beq.n	80071e6 <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a29      	ldr	r2, [pc, #164]	@ (8007288 <TIM_Base_SetConfig+0x154>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d108      	bne.n	80071f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a10      	ldr	r2, [pc, #64]	@ (8007260 <TIM_Base_SetConfig+0x12c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_Base_SetConfig+0xf8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a12      	ldr	r2, [pc, #72]	@ (8007270 <TIM_Base_SetConfig+0x13c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d103      	bne.n	8007234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d105      	bne.n	8007252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f023 0201 	bic.w	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]
  }
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800
 8007280:	40001800 	.word	0x40001800
 8007284:	40001c00 	.word	0x40001c00
 8007288:	40002000 	.word	0x40002000

0800728c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 030a 	bic.w	r3, r3, #10
 80072c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	f023 0210 	bic.w	r2, r3, #16
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	f043 0307 	orr.w	r3, r3, #7
 800736c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	609a      	str	r2, [r3, #8]
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800739a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e05a      	b.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007424:	d01d      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1d      	ldr	r2, [pc, #116]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1b      	ldr	r2, [pc, #108]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1a      	ldr	r2, [pc, #104]	@ (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a17      	ldr	r2, [pc, #92]	@ (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a15      	ldr	r2, [pc, #84]	@ (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d10c      	bne.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4313      	orrs	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40014000 	.word	0x40014000
 80074b4:	40001800 	.word	0x40001800

080074b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <siprintf>:
 80074e0:	b40e      	push	{r1, r2, r3}
 80074e2:	b500      	push	{lr}
 80074e4:	b09c      	sub	sp, #112	@ 0x70
 80074e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80074e8:	9002      	str	r0, [sp, #8]
 80074ea:	9006      	str	r0, [sp, #24]
 80074ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074f0:	4809      	ldr	r0, [pc, #36]	@ (8007518 <siprintf+0x38>)
 80074f2:	9107      	str	r1, [sp, #28]
 80074f4:	9104      	str	r1, [sp, #16]
 80074f6:	4909      	ldr	r1, [pc, #36]	@ (800751c <siprintf+0x3c>)
 80074f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fc:	9105      	str	r1, [sp, #20]
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	a902      	add	r1, sp, #8
 8007504:	f000 f994 	bl	8007830 <_svfiprintf_r>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	b01c      	add	sp, #112	@ 0x70
 8007510:	f85d eb04 	ldr.w	lr, [sp], #4
 8007514:	b003      	add	sp, #12
 8007516:	4770      	bx	lr
 8007518:	20000028 	.word	0x20000028
 800751c:	ffff0208 	.word	0xffff0208

08007520 <memset>:
 8007520:	4402      	add	r2, r0
 8007522:	4603      	mov	r3, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	d100      	bne.n	800752a <memset+0xa>
 8007528:	4770      	bx	lr
 800752a:	f803 1b01 	strb.w	r1, [r3], #1
 800752e:	e7f9      	b.n	8007524 <memset+0x4>

08007530 <__errno>:
 8007530:	4b01      	ldr	r3, [pc, #4]	@ (8007538 <__errno+0x8>)
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000028 	.word	0x20000028

0800753c <__libc_init_array>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4d0d      	ldr	r5, [pc, #52]	@ (8007574 <__libc_init_array+0x38>)
 8007540:	4c0d      	ldr	r4, [pc, #52]	@ (8007578 <__libc_init_array+0x3c>)
 8007542:	1b64      	subs	r4, r4, r5
 8007544:	10a4      	asrs	r4, r4, #2
 8007546:	2600      	movs	r6, #0
 8007548:	42a6      	cmp	r6, r4
 800754a:	d109      	bne.n	8007560 <__libc_init_array+0x24>
 800754c:	4d0b      	ldr	r5, [pc, #44]	@ (800757c <__libc_init_array+0x40>)
 800754e:	4c0c      	ldr	r4, [pc, #48]	@ (8007580 <__libc_init_array+0x44>)
 8007550:	f000 fc66 	bl	8007e20 <_init>
 8007554:	1b64      	subs	r4, r4, r5
 8007556:	10a4      	asrs	r4, r4, #2
 8007558:	2600      	movs	r6, #0
 800755a:	42a6      	cmp	r6, r4
 800755c:	d105      	bne.n	800756a <__libc_init_array+0x2e>
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	f855 3b04 	ldr.w	r3, [r5], #4
 8007564:	4798      	blx	r3
 8007566:	3601      	adds	r6, #1
 8007568:	e7ee      	b.n	8007548 <__libc_init_array+0xc>
 800756a:	f855 3b04 	ldr.w	r3, [r5], #4
 800756e:	4798      	blx	r3
 8007570:	3601      	adds	r6, #1
 8007572:	e7f2      	b.n	800755a <__libc_init_array+0x1e>
 8007574:	0800998c 	.word	0x0800998c
 8007578:	0800998c 	.word	0x0800998c
 800757c:	0800998c 	.word	0x0800998c
 8007580:	08009990 	.word	0x08009990

08007584 <__retarget_lock_acquire_recursive>:
 8007584:	4770      	bx	lr

08007586 <__retarget_lock_release_recursive>:
 8007586:	4770      	bx	lr

08007588 <_free_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4605      	mov	r5, r0
 800758c:	2900      	cmp	r1, #0
 800758e:	d041      	beq.n	8007614 <_free_r+0x8c>
 8007590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007594:	1f0c      	subs	r4, r1, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfb8      	it	lt
 800759a:	18e4      	addlt	r4, r4, r3
 800759c:	f000 f8e0 	bl	8007760 <__malloc_lock>
 80075a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <_free_r+0x90>)
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	b933      	cbnz	r3, 80075b4 <_free_r+0x2c>
 80075a6:	6063      	str	r3, [r4, #4]
 80075a8:	6014      	str	r4, [r2, #0]
 80075aa:	4628      	mov	r0, r5
 80075ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b0:	f000 b8dc 	b.w	800776c <__malloc_unlock>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d908      	bls.n	80075ca <_free_r+0x42>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	1821      	adds	r1, r4, r0
 80075bc:	428b      	cmp	r3, r1
 80075be:	bf01      	itttt	eq
 80075c0:	6819      	ldreq	r1, [r3, #0]
 80075c2:	685b      	ldreq	r3, [r3, #4]
 80075c4:	1809      	addeq	r1, r1, r0
 80075c6:	6021      	streq	r1, [r4, #0]
 80075c8:	e7ed      	b.n	80075a6 <_free_r+0x1e>
 80075ca:	461a      	mov	r2, r3
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b10b      	cbz	r3, 80075d4 <_free_r+0x4c>
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d9fa      	bls.n	80075ca <_free_r+0x42>
 80075d4:	6811      	ldr	r1, [r2, #0]
 80075d6:	1850      	adds	r0, r2, r1
 80075d8:	42a0      	cmp	r0, r4
 80075da:	d10b      	bne.n	80075f4 <_free_r+0x6c>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	4401      	add	r1, r0
 80075e0:	1850      	adds	r0, r2, r1
 80075e2:	4283      	cmp	r3, r0
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	d1e0      	bne.n	80075aa <_free_r+0x22>
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	6053      	str	r3, [r2, #4]
 80075ee:	4408      	add	r0, r1
 80075f0:	6010      	str	r0, [r2, #0]
 80075f2:	e7da      	b.n	80075aa <_free_r+0x22>
 80075f4:	d902      	bls.n	80075fc <_free_r+0x74>
 80075f6:	230c      	movs	r3, #12
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	e7d6      	b.n	80075aa <_free_r+0x22>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	bf04      	itt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	6063      	str	r3, [r4, #4]
 800760a:	bf04      	itt	eq
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	6054      	str	r4, [r2, #4]
 8007612:	e7ca      	b.n	80075aa <_free_r+0x22>
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20025d5c 	.word	0x20025d5c

0800761c <sbrk_aligned>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4e0f      	ldr	r6, [pc, #60]	@ (800765c <sbrk_aligned+0x40>)
 8007620:	460c      	mov	r4, r1
 8007622:	6831      	ldr	r1, [r6, #0]
 8007624:	4605      	mov	r5, r0
 8007626:	b911      	cbnz	r1, 800762e <sbrk_aligned+0x12>
 8007628:	f000 fba6 	bl	8007d78 <_sbrk_r>
 800762c:	6030      	str	r0, [r6, #0]
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f000 fba1 	bl	8007d78 <_sbrk_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d103      	bne.n	8007642 <sbrk_aligned+0x26>
 800763a:	f04f 34ff 	mov.w	r4, #4294967295
 800763e:	4620      	mov	r0, r4
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	1cc4      	adds	r4, r0, #3
 8007644:	f024 0403 	bic.w	r4, r4, #3
 8007648:	42a0      	cmp	r0, r4
 800764a:	d0f8      	beq.n	800763e <sbrk_aligned+0x22>
 800764c:	1a21      	subs	r1, r4, r0
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fb92 	bl	8007d78 <_sbrk_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d1f2      	bne.n	800763e <sbrk_aligned+0x22>
 8007658:	e7ef      	b.n	800763a <sbrk_aligned+0x1e>
 800765a:	bf00      	nop
 800765c:	20025d58 	.word	0x20025d58

08007660 <_malloc_r>:
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	1ccd      	adds	r5, r1, #3
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	2d00      	cmp	r5, #0
 8007674:	4606      	mov	r6, r0
 8007676:	db01      	blt.n	800767c <_malloc_r+0x1c>
 8007678:	42a9      	cmp	r1, r5
 800767a:	d904      	bls.n	8007686 <_malloc_r+0x26>
 800767c:	230c      	movs	r3, #12
 800767e:	6033      	str	r3, [r6, #0]
 8007680:	2000      	movs	r0, #0
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800775c <_malloc_r+0xfc>
 800768a:	f000 f869 	bl	8007760 <__malloc_lock>
 800768e:	f8d8 3000 	ldr.w	r3, [r8]
 8007692:	461c      	mov	r4, r3
 8007694:	bb44      	cbnz	r4, 80076e8 <_malloc_r+0x88>
 8007696:	4629      	mov	r1, r5
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff ffbf 	bl	800761c <sbrk_aligned>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	4604      	mov	r4, r0
 80076a2:	d158      	bne.n	8007756 <_malloc_r+0xf6>
 80076a4:	f8d8 4000 	ldr.w	r4, [r8]
 80076a8:	4627      	mov	r7, r4
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	d143      	bne.n	8007736 <_malloc_r+0xd6>
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	d04b      	beq.n	800774a <_malloc_r+0xea>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	4639      	mov	r1, r7
 80076b6:	4630      	mov	r0, r6
 80076b8:	eb04 0903 	add.w	r9, r4, r3
 80076bc:	f000 fb5c 	bl	8007d78 <_sbrk_r>
 80076c0:	4581      	cmp	r9, r0
 80076c2:	d142      	bne.n	800774a <_malloc_r+0xea>
 80076c4:	6821      	ldr	r1, [r4, #0]
 80076c6:	1a6d      	subs	r5, r5, r1
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffa6 	bl	800761c <sbrk_aligned>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d03a      	beq.n	800774a <_malloc_r+0xea>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	442b      	add	r3, r5
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	f8d8 3000 	ldr.w	r3, [r8]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	bb62      	cbnz	r2, 800773c <_malloc_r+0xdc>
 80076e2:	f8c8 7000 	str.w	r7, [r8]
 80076e6:	e00f      	b.n	8007708 <_malloc_r+0xa8>
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	1b52      	subs	r2, r2, r5
 80076ec:	d420      	bmi.n	8007730 <_malloc_r+0xd0>
 80076ee:	2a0b      	cmp	r2, #11
 80076f0:	d917      	bls.n	8007722 <_malloc_r+0xc2>
 80076f2:	1961      	adds	r1, r4, r5
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	6025      	str	r5, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	6059      	strne	r1, [r3, #4]
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	bf08      	it	eq
 8007700:	f8c8 1000 	streq.w	r1, [r8]
 8007704:	5162      	str	r2, [r4, r5]
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	4630      	mov	r0, r6
 800770a:	f000 f82f 	bl	800776c <__malloc_unlock>
 800770e:	f104 000b 	add.w	r0, r4, #11
 8007712:	1d23      	adds	r3, r4, #4
 8007714:	f020 0007 	bic.w	r0, r0, #7
 8007718:	1ac2      	subs	r2, r0, r3
 800771a:	bf1c      	itt	ne
 800771c:	1a1b      	subne	r3, r3, r0
 800771e:	50a3      	strne	r3, [r4, r2]
 8007720:	e7af      	b.n	8007682 <_malloc_r+0x22>
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	bf0c      	ite	eq
 8007728:	f8c8 2000 	streq.w	r2, [r8]
 800772c:	605a      	strne	r2, [r3, #4]
 800772e:	e7eb      	b.n	8007708 <_malloc_r+0xa8>
 8007730:	4623      	mov	r3, r4
 8007732:	6864      	ldr	r4, [r4, #4]
 8007734:	e7ae      	b.n	8007694 <_malloc_r+0x34>
 8007736:	463c      	mov	r4, r7
 8007738:	687f      	ldr	r7, [r7, #4]
 800773a:	e7b6      	b.n	80076aa <_malloc_r+0x4a>
 800773c:	461a      	mov	r2, r3
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	42a3      	cmp	r3, r4
 8007742:	d1fb      	bne.n	800773c <_malloc_r+0xdc>
 8007744:	2300      	movs	r3, #0
 8007746:	6053      	str	r3, [r2, #4]
 8007748:	e7de      	b.n	8007708 <_malloc_r+0xa8>
 800774a:	230c      	movs	r3, #12
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f80c 	bl	800776c <__malloc_unlock>
 8007754:	e794      	b.n	8007680 <_malloc_r+0x20>
 8007756:	6005      	str	r5, [r0, #0]
 8007758:	e7d6      	b.n	8007708 <_malloc_r+0xa8>
 800775a:	bf00      	nop
 800775c:	20025d5c 	.word	0x20025d5c

08007760 <__malloc_lock>:
 8007760:	4801      	ldr	r0, [pc, #4]	@ (8007768 <__malloc_lock+0x8>)
 8007762:	f7ff bf0f 	b.w	8007584 <__retarget_lock_acquire_recursive>
 8007766:	bf00      	nop
 8007768:	20025d54 	.word	0x20025d54

0800776c <__malloc_unlock>:
 800776c:	4801      	ldr	r0, [pc, #4]	@ (8007774 <__malloc_unlock+0x8>)
 800776e:	f7ff bf0a 	b.w	8007586 <__retarget_lock_release_recursive>
 8007772:	bf00      	nop
 8007774:	20025d54 	.word	0x20025d54

08007778 <__ssputs_r>:
 8007778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	688e      	ldr	r6, [r1, #8]
 800777e:	461f      	mov	r7, r3
 8007780:	42be      	cmp	r6, r7
 8007782:	680b      	ldr	r3, [r1, #0]
 8007784:	4682      	mov	sl, r0
 8007786:	460c      	mov	r4, r1
 8007788:	4690      	mov	r8, r2
 800778a:	d82d      	bhi.n	80077e8 <__ssputs_r+0x70>
 800778c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007794:	d026      	beq.n	80077e4 <__ssputs_r+0x6c>
 8007796:	6965      	ldr	r5, [r4, #20]
 8007798:	6909      	ldr	r1, [r1, #16]
 800779a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800779e:	eba3 0901 	sub.w	r9, r3, r1
 80077a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077a6:	1c7b      	adds	r3, r7, #1
 80077a8:	444b      	add	r3, r9
 80077aa:	106d      	asrs	r5, r5, #1
 80077ac:	429d      	cmp	r5, r3
 80077ae:	bf38      	it	cc
 80077b0:	461d      	movcc	r5, r3
 80077b2:	0553      	lsls	r3, r2, #21
 80077b4:	d527      	bpl.n	8007806 <__ssputs_r+0x8e>
 80077b6:	4629      	mov	r1, r5
 80077b8:	f7ff ff52 	bl	8007660 <_malloc_r>
 80077bc:	4606      	mov	r6, r0
 80077be:	b360      	cbz	r0, 800781a <__ssputs_r+0xa2>
 80077c0:	6921      	ldr	r1, [r4, #16]
 80077c2:	464a      	mov	r2, r9
 80077c4:	f000 fae8 	bl	8007d98 <memcpy>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	6126      	str	r6, [r4, #16]
 80077d6:	6165      	str	r5, [r4, #20]
 80077d8:	444e      	add	r6, r9
 80077da:	eba5 0509 	sub.w	r5, r5, r9
 80077de:	6026      	str	r6, [r4, #0]
 80077e0:	60a5      	str	r5, [r4, #8]
 80077e2:	463e      	mov	r6, r7
 80077e4:	42be      	cmp	r6, r7
 80077e6:	d900      	bls.n	80077ea <__ssputs_r+0x72>
 80077e8:	463e      	mov	r6, r7
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	4632      	mov	r2, r6
 80077ee:	4641      	mov	r1, r8
 80077f0:	f000 faa8 	bl	8007d44 <memmove>
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	1b9b      	subs	r3, r3, r6
 80077f8:	60a3      	str	r3, [r4, #8]
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	4433      	add	r3, r6
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	2000      	movs	r0, #0
 8007802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007806:	462a      	mov	r2, r5
 8007808:	f000 fad4 	bl	8007db4 <_realloc_r>
 800780c:	4606      	mov	r6, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	d1e0      	bne.n	80077d4 <__ssputs_r+0x5c>
 8007812:	6921      	ldr	r1, [r4, #16]
 8007814:	4650      	mov	r0, sl
 8007816:	f7ff feb7 	bl	8007588 <_free_r>
 800781a:	230c      	movs	r3, #12
 800781c:	f8ca 3000 	str.w	r3, [sl]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	e7e9      	b.n	8007802 <__ssputs_r+0x8a>
	...

08007830 <_svfiprintf_r>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	4698      	mov	r8, r3
 8007836:	898b      	ldrh	r3, [r1, #12]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	b09d      	sub	sp, #116	@ 0x74
 800783c:	4607      	mov	r7, r0
 800783e:	460d      	mov	r5, r1
 8007840:	4614      	mov	r4, r2
 8007842:	d510      	bpl.n	8007866 <_svfiprintf_r+0x36>
 8007844:	690b      	ldr	r3, [r1, #16]
 8007846:	b973      	cbnz	r3, 8007866 <_svfiprintf_r+0x36>
 8007848:	2140      	movs	r1, #64	@ 0x40
 800784a:	f7ff ff09 	bl	8007660 <_malloc_r>
 800784e:	6028      	str	r0, [r5, #0]
 8007850:	6128      	str	r0, [r5, #16]
 8007852:	b930      	cbnz	r0, 8007862 <_svfiprintf_r+0x32>
 8007854:	230c      	movs	r3, #12
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	b01d      	add	sp, #116	@ 0x74
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	2340      	movs	r3, #64	@ 0x40
 8007864:	616b      	str	r3, [r5, #20]
 8007866:	2300      	movs	r3, #0
 8007868:	9309      	str	r3, [sp, #36]	@ 0x24
 800786a:	2320      	movs	r3, #32
 800786c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007870:	f8cd 800c 	str.w	r8, [sp, #12]
 8007874:	2330      	movs	r3, #48	@ 0x30
 8007876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a14 <_svfiprintf_r+0x1e4>
 800787a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800787e:	f04f 0901 	mov.w	r9, #1
 8007882:	4623      	mov	r3, r4
 8007884:	469a      	mov	sl, r3
 8007886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800788a:	b10a      	cbz	r2, 8007890 <_svfiprintf_r+0x60>
 800788c:	2a25      	cmp	r2, #37	@ 0x25
 800788e:	d1f9      	bne.n	8007884 <_svfiprintf_r+0x54>
 8007890:	ebba 0b04 	subs.w	fp, sl, r4
 8007894:	d00b      	beq.n	80078ae <_svfiprintf_r+0x7e>
 8007896:	465b      	mov	r3, fp
 8007898:	4622      	mov	r2, r4
 800789a:	4629      	mov	r1, r5
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff ff6b 	bl	8007778 <__ssputs_r>
 80078a2:	3001      	adds	r0, #1
 80078a4:	f000 80a7 	beq.w	80079f6 <_svfiprintf_r+0x1c6>
 80078a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078aa:	445a      	add	r2, fp
 80078ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ae:	f89a 3000 	ldrb.w	r3, [sl]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 809f 	beq.w	80079f6 <_svfiprintf_r+0x1c6>
 80078b8:	2300      	movs	r3, #0
 80078ba:	f04f 32ff 	mov.w	r2, #4294967295
 80078be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c2:	f10a 0a01 	add.w	sl, sl, #1
 80078c6:	9304      	str	r3, [sp, #16]
 80078c8:	9307      	str	r3, [sp, #28]
 80078ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80078d0:	4654      	mov	r4, sl
 80078d2:	2205      	movs	r2, #5
 80078d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d8:	484e      	ldr	r0, [pc, #312]	@ (8007a14 <_svfiprintf_r+0x1e4>)
 80078da:	f7f8 fc91 	bl	8000200 <memchr>
 80078de:	9a04      	ldr	r2, [sp, #16]
 80078e0:	b9d8      	cbnz	r0, 800791a <_svfiprintf_r+0xea>
 80078e2:	06d0      	lsls	r0, r2, #27
 80078e4:	bf44      	itt	mi
 80078e6:	2320      	movmi	r3, #32
 80078e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ec:	0711      	lsls	r1, r2, #28
 80078ee:	bf44      	itt	mi
 80078f0:	232b      	movmi	r3, #43	@ 0x2b
 80078f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078f6:	f89a 3000 	ldrb.w	r3, [sl]
 80078fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80078fc:	d015      	beq.n	800792a <_svfiprintf_r+0xfa>
 80078fe:	9a07      	ldr	r2, [sp, #28]
 8007900:	4654      	mov	r4, sl
 8007902:	2000      	movs	r0, #0
 8007904:	f04f 0c0a 	mov.w	ip, #10
 8007908:	4621      	mov	r1, r4
 800790a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790e:	3b30      	subs	r3, #48	@ 0x30
 8007910:	2b09      	cmp	r3, #9
 8007912:	d94b      	bls.n	80079ac <_svfiprintf_r+0x17c>
 8007914:	b1b0      	cbz	r0, 8007944 <_svfiprintf_r+0x114>
 8007916:	9207      	str	r2, [sp, #28]
 8007918:	e014      	b.n	8007944 <_svfiprintf_r+0x114>
 800791a:	eba0 0308 	sub.w	r3, r0, r8
 800791e:	fa09 f303 	lsl.w	r3, r9, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	46a2      	mov	sl, r4
 8007928:	e7d2      	b.n	80078d0 <_svfiprintf_r+0xa0>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	1d19      	adds	r1, r3, #4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	9103      	str	r1, [sp, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	bfbb      	ittet	lt
 8007936:	425b      	neglt	r3, r3
 8007938:	f042 0202 	orrlt.w	r2, r2, #2
 800793c:	9307      	strge	r3, [sp, #28]
 800793e:	9307      	strlt	r3, [sp, #28]
 8007940:	bfb8      	it	lt
 8007942:	9204      	strlt	r2, [sp, #16]
 8007944:	7823      	ldrb	r3, [r4, #0]
 8007946:	2b2e      	cmp	r3, #46	@ 0x2e
 8007948:	d10a      	bne.n	8007960 <_svfiprintf_r+0x130>
 800794a:	7863      	ldrb	r3, [r4, #1]
 800794c:	2b2a      	cmp	r3, #42	@ 0x2a
 800794e:	d132      	bne.n	80079b6 <_svfiprintf_r+0x186>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	1d1a      	adds	r2, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	9203      	str	r2, [sp, #12]
 8007958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800795c:	3402      	adds	r4, #2
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a24 <_svfiprintf_r+0x1f4>
 8007964:	7821      	ldrb	r1, [r4, #0]
 8007966:	2203      	movs	r2, #3
 8007968:	4650      	mov	r0, sl
 800796a:	f7f8 fc49 	bl	8000200 <memchr>
 800796e:	b138      	cbz	r0, 8007980 <_svfiprintf_r+0x150>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	eba0 000a 	sub.w	r0, r0, sl
 8007976:	2240      	movs	r2, #64	@ 0x40
 8007978:	4082      	lsls	r2, r0
 800797a:	4313      	orrs	r3, r2
 800797c:	3401      	adds	r4, #1
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	4824      	ldr	r0, [pc, #144]	@ (8007a18 <_svfiprintf_r+0x1e8>)
 8007986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800798a:	2206      	movs	r2, #6
 800798c:	f7f8 fc38 	bl	8000200 <memchr>
 8007990:	2800      	cmp	r0, #0
 8007992:	d036      	beq.n	8007a02 <_svfiprintf_r+0x1d2>
 8007994:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <_svfiprintf_r+0x1ec>)
 8007996:	bb1b      	cbnz	r3, 80079e0 <_svfiprintf_r+0x1b0>
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	3307      	adds	r3, #7
 800799c:	f023 0307 	bic.w	r3, r3, #7
 80079a0:	3308      	adds	r3, #8
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a6:	4433      	add	r3, r6
 80079a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079aa:	e76a      	b.n	8007882 <_svfiprintf_r+0x52>
 80079ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b0:	460c      	mov	r4, r1
 80079b2:	2001      	movs	r0, #1
 80079b4:	e7a8      	b.n	8007908 <_svfiprintf_r+0xd8>
 80079b6:	2300      	movs	r3, #0
 80079b8:	3401      	adds	r4, #1
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 0c0a 	mov.w	ip, #10
 80079c2:	4620      	mov	r0, r4
 80079c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c8:	3a30      	subs	r2, #48	@ 0x30
 80079ca:	2a09      	cmp	r2, #9
 80079cc:	d903      	bls.n	80079d6 <_svfiprintf_r+0x1a6>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c6      	beq.n	8007960 <_svfiprintf_r+0x130>
 80079d2:	9105      	str	r1, [sp, #20]
 80079d4:	e7c4      	b.n	8007960 <_svfiprintf_r+0x130>
 80079d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079da:	4604      	mov	r4, r0
 80079dc:	2301      	movs	r3, #1
 80079de:	e7f0      	b.n	80079c2 <_svfiprintf_r+0x192>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	462a      	mov	r2, r5
 80079e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007a20 <_svfiprintf_r+0x1f0>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4638      	mov	r0, r7
 80079ec:	f3af 8000 	nop.w
 80079f0:	1c42      	adds	r2, r0, #1
 80079f2:	4606      	mov	r6, r0
 80079f4:	d1d6      	bne.n	80079a4 <_svfiprintf_r+0x174>
 80079f6:	89ab      	ldrh	r3, [r5, #12]
 80079f8:	065b      	lsls	r3, r3, #25
 80079fa:	f53f af2d 	bmi.w	8007858 <_svfiprintf_r+0x28>
 80079fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a00:	e72c      	b.n	800785c <_svfiprintf_r+0x2c>
 8007a02:	ab03      	add	r3, sp, #12
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	462a      	mov	r2, r5
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <_svfiprintf_r+0x1f0>)
 8007a0a:	a904      	add	r1, sp, #16
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f000 f879 	bl	8007b04 <_printf_i>
 8007a12:	e7ed      	b.n	80079f0 <_svfiprintf_r+0x1c0>
 8007a14:	08009950 	.word	0x08009950
 8007a18:	0800995a 	.word	0x0800995a
 8007a1c:	00000000 	.word	0x00000000
 8007a20:	08007779 	.word	0x08007779
 8007a24:	08009956 	.word	0x08009956

08007a28 <_printf_common>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	4698      	mov	r8, r3
 8007a30:	688a      	ldr	r2, [r1, #8]
 8007a32:	690b      	ldr	r3, [r1, #16]
 8007a34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	bfb8      	it	lt
 8007a3c:	4613      	movlt	r3, r2
 8007a3e:	6033      	str	r3, [r6, #0]
 8007a40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a44:	4607      	mov	r7, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	b10a      	cbz	r2, 8007a4e <_printf_common+0x26>
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	0699      	lsls	r1, r3, #26
 8007a52:	bf42      	ittt	mi
 8007a54:	6833      	ldrmi	r3, [r6, #0]
 8007a56:	3302      	addmi	r3, #2
 8007a58:	6033      	strmi	r3, [r6, #0]
 8007a5a:	6825      	ldr	r5, [r4, #0]
 8007a5c:	f015 0506 	ands.w	r5, r5, #6
 8007a60:	d106      	bne.n	8007a70 <_printf_common+0x48>
 8007a62:	f104 0a19 	add.w	sl, r4, #25
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	6832      	ldr	r2, [r6, #0]
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	dc26      	bgt.n	8007abe <_printf_common+0x96>
 8007a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	3b00      	subs	r3, #0
 8007a78:	bf18      	it	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	0692      	lsls	r2, r2, #26
 8007a7e:	d42b      	bmi.n	8007ad8 <_printf_common+0xb0>
 8007a80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a84:	4641      	mov	r1, r8
 8007a86:	4638      	mov	r0, r7
 8007a88:	47c8      	blx	r9
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d01e      	beq.n	8007acc <_printf_common+0xa4>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	f003 0306 	and.w	r3, r3, #6
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	bf02      	ittt	eq
 8007a9a:	68e5      	ldreq	r5, [r4, #12]
 8007a9c:	6833      	ldreq	r3, [r6, #0]
 8007a9e:	1aed      	subeq	r5, r5, r3
 8007aa0:	68a3      	ldr	r3, [r4, #8]
 8007aa2:	bf0c      	ite	eq
 8007aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa8:	2500      	movne	r5, #0
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	bfc4      	itt	gt
 8007aae:	1a9b      	subgt	r3, r3, r2
 8007ab0:	18ed      	addgt	r5, r5, r3
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	341a      	adds	r4, #26
 8007ab6:	42b5      	cmp	r5, r6
 8007ab8:	d11a      	bne.n	8007af0 <_printf_common+0xc8>
 8007aba:	2000      	movs	r0, #0
 8007abc:	e008      	b.n	8007ad0 <_printf_common+0xa8>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	4641      	mov	r1, r8
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	47c8      	blx	r9
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d103      	bne.n	8007ad4 <_printf_common+0xac>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	e7c6      	b.n	8007a66 <_printf_common+0x3e>
 8007ad8:	18e1      	adds	r1, r4, r3
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	2030      	movs	r0, #48	@ 0x30
 8007ade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ae2:	4422      	add	r2, r4
 8007ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007aec:	3302      	adds	r3, #2
 8007aee:	e7c7      	b.n	8007a80 <_printf_common+0x58>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4622      	mov	r2, r4
 8007af4:	4641      	mov	r1, r8
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c8      	blx	r9
 8007afa:	3001      	adds	r0, #1
 8007afc:	d0e6      	beq.n	8007acc <_printf_common+0xa4>
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7d9      	b.n	8007ab6 <_printf_common+0x8e>
	...

08007b04 <_printf_i>:
 8007b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	7e0f      	ldrb	r7, [r1, #24]
 8007b0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b0c:	2f78      	cmp	r7, #120	@ 0x78
 8007b0e:	4691      	mov	r9, r2
 8007b10:	4680      	mov	r8, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	469a      	mov	sl, r3
 8007b16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b1a:	d807      	bhi.n	8007b2c <_printf_i+0x28>
 8007b1c:	2f62      	cmp	r7, #98	@ 0x62
 8007b1e:	d80a      	bhi.n	8007b36 <_printf_i+0x32>
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	f000 80d2 	beq.w	8007cca <_printf_i+0x1c6>
 8007b26:	2f58      	cmp	r7, #88	@ 0x58
 8007b28:	f000 80b9 	beq.w	8007c9e <_printf_i+0x19a>
 8007b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b34:	e03a      	b.n	8007bac <_printf_i+0xa8>
 8007b36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b3a:	2b15      	cmp	r3, #21
 8007b3c:	d8f6      	bhi.n	8007b2c <_printf_i+0x28>
 8007b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b44 <_printf_i+0x40>)
 8007b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b44:	08007b9d 	.word	0x08007b9d
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007b2d 	.word	0x08007b2d
 8007b50:	08007b2d 	.word	0x08007b2d
 8007b54:	08007b2d 	.word	0x08007b2d
 8007b58:	08007b2d 	.word	0x08007b2d
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007b2d 	.word	0x08007b2d
 8007b64:	08007b2d 	.word	0x08007b2d
 8007b68:	08007b2d 	.word	0x08007b2d
 8007b6c:	08007b2d 	.word	0x08007b2d
 8007b70:	08007cb1 	.word	0x08007cb1
 8007b74:	08007bdb 	.word	0x08007bdb
 8007b78:	08007c6b 	.word	0x08007c6b
 8007b7c:	08007b2d 	.word	0x08007b2d
 8007b80:	08007b2d 	.word	0x08007b2d
 8007b84:	08007cd3 	.word	0x08007cd3
 8007b88:	08007b2d 	.word	0x08007b2d
 8007b8c:	08007bdb 	.word	0x08007bdb
 8007b90:	08007b2d 	.word	0x08007b2d
 8007b94:	08007b2d 	.word	0x08007b2d
 8007b98:	08007c73 	.word	0x08007c73
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6032      	str	r2, [r6, #0]
 8007ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bac:	2301      	movs	r3, #1
 8007bae:	e09d      	b.n	8007cec <_printf_i+0x1e8>
 8007bb0:	6833      	ldr	r3, [r6, #0]
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1d19      	adds	r1, r3, #4
 8007bb6:	6031      	str	r1, [r6, #0]
 8007bb8:	0606      	lsls	r6, r0, #24
 8007bba:	d501      	bpl.n	8007bc0 <_printf_i+0xbc>
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	e003      	b.n	8007bc8 <_printf_i+0xc4>
 8007bc0:	0645      	lsls	r5, r0, #25
 8007bc2:	d5fb      	bpl.n	8007bbc <_printf_i+0xb8>
 8007bc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	da03      	bge.n	8007bd4 <_printf_i+0xd0>
 8007bcc:	232d      	movs	r3, #45	@ 0x2d
 8007bce:	426d      	negs	r5, r5
 8007bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd4:	4859      	ldr	r0, [pc, #356]	@ (8007d3c <_printf_i+0x238>)
 8007bd6:	230a      	movs	r3, #10
 8007bd8:	e011      	b.n	8007bfe <_printf_i+0xfa>
 8007bda:	6821      	ldr	r1, [r4, #0]
 8007bdc:	6833      	ldr	r3, [r6, #0]
 8007bde:	0608      	lsls	r0, r1, #24
 8007be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007be4:	d402      	bmi.n	8007bec <_printf_i+0xe8>
 8007be6:	0649      	lsls	r1, r1, #25
 8007be8:	bf48      	it	mi
 8007bea:	b2ad      	uxthmi	r5, r5
 8007bec:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bee:	4853      	ldr	r0, [pc, #332]	@ (8007d3c <_printf_i+0x238>)
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	bf14      	ite	ne
 8007bf4:	230a      	movne	r3, #10
 8007bf6:	2308      	moveq	r3, #8
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bfe:	6866      	ldr	r6, [r4, #4]
 8007c00:	60a6      	str	r6, [r4, #8]
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	bfa2      	ittt	ge
 8007c06:	6821      	ldrge	r1, [r4, #0]
 8007c08:	f021 0104 	bicge.w	r1, r1, #4
 8007c0c:	6021      	strge	r1, [r4, #0]
 8007c0e:	b90d      	cbnz	r5, 8007c14 <_printf_i+0x110>
 8007c10:	2e00      	cmp	r6, #0
 8007c12:	d04b      	beq.n	8007cac <_printf_i+0x1a8>
 8007c14:	4616      	mov	r6, r2
 8007c16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c1e:	5dc7      	ldrb	r7, [r0, r7]
 8007c20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c24:	462f      	mov	r7, r5
 8007c26:	42bb      	cmp	r3, r7
 8007c28:	460d      	mov	r5, r1
 8007c2a:	d9f4      	bls.n	8007c16 <_printf_i+0x112>
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d10b      	bne.n	8007c48 <_printf_i+0x144>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07df      	lsls	r7, r3, #31
 8007c34:	d508      	bpl.n	8007c48 <_printf_i+0x144>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	bfde      	ittt	le
 8007c3e:	2330      	movle	r3, #48	@ 0x30
 8007c40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c48:	1b92      	subs	r2, r2, r6
 8007c4a:	6122      	str	r2, [r4, #16]
 8007c4c:	f8cd a000 	str.w	sl, [sp]
 8007c50:	464b      	mov	r3, r9
 8007c52:	aa03      	add	r2, sp, #12
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7ff fee6 	bl	8007a28 <_printf_common>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d14a      	bne.n	8007cf6 <_printf_i+0x1f2>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b004      	add	sp, #16
 8007c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	f043 0320 	orr.w	r3, r3, #32
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	4833      	ldr	r0, [pc, #204]	@ (8007d40 <_printf_i+0x23c>)
 8007c74:	2778      	movs	r7, #120	@ 0x78
 8007c76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	6831      	ldr	r1, [r6, #0]
 8007c7e:	061f      	lsls	r7, r3, #24
 8007c80:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c84:	d402      	bmi.n	8007c8c <_printf_i+0x188>
 8007c86:	065f      	lsls	r7, r3, #25
 8007c88:	bf48      	it	mi
 8007c8a:	b2ad      	uxthmi	r5, r5
 8007c8c:	6031      	str	r1, [r6, #0]
 8007c8e:	07d9      	lsls	r1, r3, #31
 8007c90:	bf44      	itt	mi
 8007c92:	f043 0320 	orrmi.w	r3, r3, #32
 8007c96:	6023      	strmi	r3, [r4, #0]
 8007c98:	b11d      	cbz	r5, 8007ca2 <_printf_i+0x19e>
 8007c9a:	2310      	movs	r3, #16
 8007c9c:	e7ac      	b.n	8007bf8 <_printf_i+0xf4>
 8007c9e:	4827      	ldr	r0, [pc, #156]	@ (8007d3c <_printf_i+0x238>)
 8007ca0:	e7e9      	b.n	8007c76 <_printf_i+0x172>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	f023 0320 	bic.w	r3, r3, #32
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	e7f6      	b.n	8007c9a <_printf_i+0x196>
 8007cac:	4616      	mov	r6, r2
 8007cae:	e7bd      	b.n	8007c2c <_printf_i+0x128>
 8007cb0:	6833      	ldr	r3, [r6, #0]
 8007cb2:	6825      	ldr	r5, [r4, #0]
 8007cb4:	6961      	ldr	r1, [r4, #20]
 8007cb6:	1d18      	adds	r0, r3, #4
 8007cb8:	6030      	str	r0, [r6, #0]
 8007cba:	062e      	lsls	r6, r5, #24
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0x1c0>
 8007cc0:	6019      	str	r1, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <_printf_i+0x1c6>
 8007cc4:	0668      	lsls	r0, r5, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0x1bc>
 8007cc8:	8019      	strh	r1, [r3, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	4616      	mov	r6, r2
 8007cd0:	e7bc      	b.n	8007c4c <_printf_i+0x148>
 8007cd2:	6833      	ldr	r3, [r6, #0]
 8007cd4:	1d1a      	adds	r2, r3, #4
 8007cd6:	6032      	str	r2, [r6, #0]
 8007cd8:	681e      	ldr	r6, [r3, #0]
 8007cda:	6862      	ldr	r2, [r4, #4]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7f8 fa8e 	bl	8000200 <memchr>
 8007ce4:	b108      	cbz	r0, 8007cea <_printf_i+0x1e6>
 8007ce6:	1b80      	subs	r0, r0, r6
 8007ce8:	6060      	str	r0, [r4, #4]
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cf4:	e7aa      	b.n	8007c4c <_printf_i+0x148>
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	47d0      	blx	sl
 8007d00:	3001      	adds	r0, #1
 8007d02:	d0ad      	beq.n	8007c60 <_printf_i+0x15c>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	079b      	lsls	r3, r3, #30
 8007d08:	d413      	bmi.n	8007d32 <_printf_i+0x22e>
 8007d0a:	68e0      	ldr	r0, [r4, #12]
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	4298      	cmp	r0, r3
 8007d10:	bfb8      	it	lt
 8007d12:	4618      	movlt	r0, r3
 8007d14:	e7a6      	b.n	8007c64 <_printf_i+0x160>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4632      	mov	r2, r6
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	47d0      	blx	sl
 8007d20:	3001      	adds	r0, #1
 8007d22:	d09d      	beq.n	8007c60 <_printf_i+0x15c>
 8007d24:	3501      	adds	r5, #1
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	9903      	ldr	r1, [sp, #12]
 8007d2a:	1a5b      	subs	r3, r3, r1
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dcf2      	bgt.n	8007d16 <_printf_i+0x212>
 8007d30:	e7eb      	b.n	8007d0a <_printf_i+0x206>
 8007d32:	2500      	movs	r5, #0
 8007d34:	f104 0619 	add.w	r6, r4, #25
 8007d38:	e7f5      	b.n	8007d26 <_printf_i+0x222>
 8007d3a:	bf00      	nop
 8007d3c:	08009961 	.word	0x08009961
 8007d40:	08009972 	.word	0x08009972

08007d44 <memmove>:
 8007d44:	4288      	cmp	r0, r1
 8007d46:	b510      	push	{r4, lr}
 8007d48:	eb01 0402 	add.w	r4, r1, r2
 8007d4c:	d902      	bls.n	8007d54 <memmove+0x10>
 8007d4e:	4284      	cmp	r4, r0
 8007d50:	4623      	mov	r3, r4
 8007d52:	d807      	bhi.n	8007d64 <memmove+0x20>
 8007d54:	1e43      	subs	r3, r0, #1
 8007d56:	42a1      	cmp	r1, r4
 8007d58:	d008      	beq.n	8007d6c <memmove+0x28>
 8007d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d62:	e7f8      	b.n	8007d56 <memmove+0x12>
 8007d64:	4402      	add	r2, r0
 8007d66:	4601      	mov	r1, r0
 8007d68:	428a      	cmp	r2, r1
 8007d6a:	d100      	bne.n	8007d6e <memmove+0x2a>
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d76:	e7f7      	b.n	8007d68 <memmove+0x24>

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d06      	ldr	r5, [pc, #24]	@ (8007d94 <_sbrk_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7fb fd9e 	bl	80038c4 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20025d50 	.word	0x20025d50

08007d98 <memcpy>:
 8007d98:	440a      	add	r2, r1
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da0:	d100      	bne.n	8007da4 <memcpy+0xc>
 8007da2:	4770      	bx	lr
 8007da4:	b510      	push	{r4, lr}
 8007da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dae:	4291      	cmp	r1, r2
 8007db0:	d1f9      	bne.n	8007da6 <memcpy+0xe>
 8007db2:	bd10      	pop	{r4, pc}

08007db4 <_realloc_r>:
 8007db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db8:	4680      	mov	r8, r0
 8007dba:	4615      	mov	r5, r2
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	b921      	cbnz	r1, 8007dca <_realloc_r+0x16>
 8007dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	f7ff bc4b 	b.w	8007660 <_malloc_r>
 8007dca:	b92a      	cbnz	r2, 8007dd8 <_realloc_r+0x24>
 8007dcc:	f7ff fbdc 	bl	8007588 <_free_r>
 8007dd0:	2400      	movs	r4, #0
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd8:	f000 f81a 	bl	8007e10 <_malloc_usable_size_r>
 8007ddc:	4285      	cmp	r5, r0
 8007dde:	4606      	mov	r6, r0
 8007de0:	d802      	bhi.n	8007de8 <_realloc_r+0x34>
 8007de2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007de6:	d8f4      	bhi.n	8007dd2 <_realloc_r+0x1e>
 8007de8:	4629      	mov	r1, r5
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fc38 	bl	8007660 <_malloc_r>
 8007df0:	4607      	mov	r7, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0ec      	beq.n	8007dd0 <_realloc_r+0x1c>
 8007df6:	42b5      	cmp	r5, r6
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	bf28      	it	cs
 8007dfe:	4632      	movcs	r2, r6
 8007e00:	f7ff ffca 	bl	8007d98 <memcpy>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4640      	mov	r0, r8
 8007e08:	f7ff fbbe 	bl	8007588 <_free_r>
 8007e0c:	463c      	mov	r4, r7
 8007e0e:	e7e0      	b.n	8007dd2 <_realloc_r+0x1e>

08007e10 <_malloc_usable_size_r>:
 8007e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e14:	1f18      	subs	r0, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bfbc      	itt	lt
 8007e1a:	580b      	ldrlt	r3, [r1, r0]
 8007e1c:	18c0      	addlt	r0, r0, r3
 8007e1e:	4770      	bx	lr

08007e20 <_init>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr

08007e2c <_fini>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr
