
WAndersonLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001230  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb8  08007eb8  00008eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec0  08007ec0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec0  08007ec0  00008ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ec4  08007ec4  00008ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007ec8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009074  2**0
                  CONTENTS
 10 .bss          00025d78  20000074  20000074  00009074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025dec  20025dec  00009074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136d9  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300e  00000000  00000000  0001c77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0001f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f58  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027069  00000000  00000000  00021ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a2f  00000000  00000000  00048b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2bc4  00000000  00000000  00061568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0014412c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005838  00000000  00000000  001441b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001499ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c70 	.word	0x08006c70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006c70 	.word	0x08006c70

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fa5c 	bl	8002a40 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 f91a 	bl	80007c0 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8d7 	bl	8000740 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fa08 	bl	80009ac <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fcb6 	bl	8000f0c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090

080005b0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
 80005ba:	4b5a      	ldr	r3, [pc, #360]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005be:	4a59      	ldr	r2, [pc, #356]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005c6:	4b57      	ldr	r3, [pc, #348]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	4b53      	ldr	r3, [pc, #332]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a52      	ldr	r2, [pc, #328]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b50      	ldr	r3, [pc, #320]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000724 <LCD_GPIO_Init+0x174>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b49      	ldr	r3, [pc, #292]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b45      	ldr	r3, [pc, #276]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a44      	ldr	r2, [pc, #272]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b42      	ldr	r3, [pc, #264]	@ (8000724 <LCD_GPIO_Init+0x174>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b3e      	ldr	r3, [pc, #248]	@ (8000724 <LCD_GPIO_Init+0x174>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a3d      	ldr	r2, [pc, #244]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b3b      	ldr	r3, [pc, #236]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b37      	ldr	r3, [pc, #220]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a36      	ldr	r2, [pc, #216]	@ (8000724 <LCD_GPIO_Init+0x174>)
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0320 	and.w	r3, r3, #32
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b30      	ldr	r3, [pc, #192]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a2f      	ldr	r2, [pc, #188]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <LCD_GPIO_Init+0x174>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800067a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800067e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000688:	2302      	movs	r3, #2
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800068c:	230e      	movs	r3, #14
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4824      	ldr	r0, [pc, #144]	@ (8000728 <LCD_GPIO_Init+0x178>)
 8000698:	f002 fbf4 	bl	8002e84 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800069c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006a0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4820      	ldr	r0, [pc, #128]	@ (800072c <LCD_GPIO_Init+0x17c>)
 80006aa:	f002 fbeb 	bl	8002e84 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006ae:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <LCD_GPIO_Init+0x180>)
 80006bc:	f002 fbe2 	bl	8002e84 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006c0:	2348      	movs	r3, #72	@ 0x48
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <LCD_GPIO_Init+0x184>)
 80006cc:	f002 fbda 	bl	8002e84 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4816      	ldr	r0, [pc, #88]	@ (8000738 <LCD_GPIO_Init+0x188>)
 80006de:	f002 fbd1 	bl	8002e84 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006e2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006e6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4813      	ldr	r0, [pc, #76]	@ (800073c <LCD_GPIO_Init+0x18c>)
 80006f0:	f002 fbc8 	bl	8002e84 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80006f4:	2303      	movs	r3, #3
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80006f8:	2309      	movs	r3, #9
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	480a      	ldr	r0, [pc, #40]	@ (800072c <LCD_GPIO_Init+0x17c>)
 8000704:	f002 fbbe 	bl	8002e84 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000708:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <LCD_GPIO_Init+0x18c>)
 8000716:	f002 fbb5 	bl	8002e84 <HAL_GPIO_Init>
}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	@ 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40021400 	.word	0x40021400
 800073c:	40021800 	.word	0x40021800

08000740 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b090      	sub	sp, #64	@ 0x40
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800074e:	23f0      	movs	r3, #240	@ 0xf0
 8000750:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000756:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800075a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000760:	23ff      	movs	r3, #255	@ 0xff
 8000762:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800076e:	2305      	movs	r3, #5
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <LTCD_Layer_Init+0x78>)
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800077c:	23f0      	movs	r3, #240	@ 0xf0
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000780:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000784:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4806      	ldr	r0, [pc, #24]	@ (80007bc <LTCD_Layer_Init+0x7c>)
 80007a2:	f003 ffc9 	bl	8004738 <HAL_LTDC_ConfigLayer>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007ac:	f000 fba8 	bl	8000f00 <LCD_Error_Handler>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3740      	adds	r7, #64	@ 0x40
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000174 	.word	0x20000174
 80007bc:	20000098 	.word	0x20000098

080007c0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <LTCD__Init+0xb0>)
 80007c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000874 <LTCD__Init+0xb4>)
 80007c8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <LTCD__Init+0xb0>)
 80007cc:	2209      	movs	r2, #9
 80007ce:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <LTCD__Init+0xb0>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <LTCD__Init+0xb0>)
 80007d8:	221d      	movs	r2, #29
 80007da:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <LTCD__Init+0xb0>)
 80007de:	2203      	movs	r2, #3
 80007e0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <LTCD__Init+0xb0>)
 80007e4:	f240 120d 	movw	r2, #269	@ 0x10d
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <LTCD__Init+0xb0>)
 80007ec:	f240 1243 	movw	r2, #323	@ 0x143
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <LTCD__Init+0xb0>)
 80007f4:	f240 1217 	movw	r2, #279	@ 0x117
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <LTCD__Init+0xb0>)
 80007fc:	f240 1247 	movw	r2, #327	@ 0x147
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <LTCD__Init+0xb0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <LTCD__Init+0xb0>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <LTCD__Init+0xb0>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <LTCD__Init+0xb8>)
 800081c:	2208      	movs	r2, #8
 800081e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <LTCD__Init+0xb8>)
 8000822:	22c0      	movs	r2, #192	@ 0xc0
 8000824:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <LTCD__Init+0xb8>)
 8000828:	2204      	movs	r2, #4
 800082a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <LTCD__Init+0xb8>)
 800082e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000834:	4810      	ldr	r0, [pc, #64]	@ (8000878 <LTCD__Init+0xb8>)
 8000836:	f004 fdd9 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <LTCD__Init+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <LTCD__Init+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <LTCD__Init+0xb0>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <LTCD__Init+0xb0>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000852:	f7ff fead 	bl	80005b0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <LTCD__Init+0xb0>)
 8000858:	f003 fe9e 	bl	8004598 <HAL_LTDC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000862:	f000 fb4d 	bl	8000f00 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000866:	f000 fba8 	bl	8000fba <ili9341_Init>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000098 	.word	0x20000098
 8000874:	40016800 	.word	0x40016800
 8000878:	20000140 	.word	0x20000140

0800087c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	460b      	mov	r3, r1
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800088e:	88ba      	ldrh	r2, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	461a      	mov	r2, r3
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4413      	add	r3, r2
 800089e:	4905      	ldr	r1, [pc, #20]	@ (80008b4 <LCD_Draw_Pixel+0x38>)
 80008a0:	887a      	ldrh	r2, [r7, #2]
 80008a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000174 	.word	0x20000174

080008b8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4604      	mov	r4, r0
 80008c0:	4608      	mov	r0, r1
 80008c2:	4611      	mov	r1, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	4623      	mov	r3, r4
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	4603      	mov	r3, r0
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	460b      	mov	r3, r1
 80008d0:	807b      	strh	r3, [r7, #2]
 80008d2:	4613      	mov	r3, r2
 80008d4:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	425b      	negs	r3, r3
 80008da:	b29b      	uxth	r3, r3
 80008dc:	81fb      	strh	r3, [r7, #14]
 80008de:	e034      	b.n	800094a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	425b      	negs	r3, r3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	81bb      	strh	r3, [r7, #12]
 80008e8:	e024      	b.n	8000934 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80008ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008f2:	fb03 f202 	mul.w	r2, r3, r2
 80008f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	441a      	add	r2, r3
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	8879      	ldrh	r1, [r7, #2]
 8000908:	fb01 f303 	mul.w	r3, r1, r3
 800090c:	429a      	cmp	r2, r3
 800090e:	dc0b      	bgt.n	8000928 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000910:	89ba      	ldrh	r2, [r7, #12]
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	4413      	add	r3, r2
 8000916:	b298      	uxth	r0, r3
 8000918:	89fa      	ldrh	r2, [r7, #14]
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff ffaa 	bl	800087c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000928:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800092c:	b29b      	uxth	r3, r3
 800092e:	3301      	adds	r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	81bb      	strh	r3, [r7, #12]
 8000934:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	429a      	cmp	r2, r3
 800093c:	ddd5      	ble.n	80008ea <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800093e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000942:	b29b      	uxth	r3, r3
 8000944:	3301      	adds	r3, #1
 8000946:	b29b      	uxth	r3, r3
 8000948:	81fb      	strh	r3, [r7, #14]
 800094a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	429a      	cmp	r2, r3
 8000952:	ddc5      	ble.n	80008e0 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}

0800095e <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800095e:	b590      	push	{r4, r7, lr}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	4604      	mov	r4, r0
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	461a      	mov	r2, r3
 800096c:	4623      	mov	r3, r4
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	4603      	mov	r3, r0
 8000972:	80bb      	strh	r3, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
 8000978:	4613      	mov	r3, r2
 800097a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]
 8000980:	e00b      	b.n	800099a <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000982:	89fa      	ldrh	r2, [r7, #14]
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	b299      	uxth	r1, r3
 800098a:	883a      	ldrh	r2, [r7, #0]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff74 	bl	800087c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000994:	89fb      	ldrh	r3, [r7, #14]
 8000996:	3301      	adds	r3, #1
 8000998:	81fb      	strh	r3, [r7, #14]
 800099a:	89fa      	ldrh	r2, [r7, #14]
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3ef      	bcc.n	8000982 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10e      	bne.n	80009e0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e007      	b.n	80009d8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009c8:	4908      	ldr	r1, [pc, #32]	@ (80009ec <LCD_Clear+0x40>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009de:	d3f3      	bcc.n	80009c8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000174 	.word	0x20000174

080009f0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <LCD_SetTextColor+0x1c>)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	8013      	strh	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000000 	.word	0x20000000

08000a10 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <LCD_SetFont+0x1c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000170 	.word	0x20000170

08000a30 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	603a      	str	r2, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e04c      	b.n	8000ae8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e03f      	b.n	8000ad4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	4a27      	ldr	r2, [pc, #156]	@ (8000b04 <LCD_Draw_Char+0xd4>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	2280      	movs	r2, #128	@ 0x80
 8000a74:	409a      	lsls	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	fa42 f303 	asr.w	r3, r2, r3
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <LCD_Draw_Char+0x5c>
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d920      	bls.n	8000ace <LCD_Draw_Char+0x9e>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	fa42 f303 	asr.w	r3, r2, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <LCD_Draw_Char+0x80>
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	889b      	ldrh	r3, [r3, #4]
 8000aac:	2b0c      	cmp	r3, #12
 8000aae:	d80e      	bhi.n	8000ace <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b298      	uxth	r0, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <LCD_Draw_Char+0xd8>)
 8000ac6:	8812      	ldrh	r2, [r2, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f7ff fed7 	bl	800087c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d3b8      	bcc.n	8000a54 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	88db      	ldrh	r3, [r3, #6]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d3ab      	bcc.n	8000a4e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000170 	.word	0x20000170
 8000b04:	aaaaaaab 	.word	0xaaaaaaab
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	460b      	mov	r3, r1
 8000b18:	80bb      	strh	r3, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	3b20      	subs	r3, #32
 8000b22:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <LCD_DisplayChar+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <LCD_DisplayChar+0x40>)
 8000b2e:	6809      	ldr	r1, [r1, #0]
 8000b30:	88c9      	ldrh	r1, [r1, #6]
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	441a      	add	r2, r3
 8000b3a:	88b9      	ldrh	r1, [r7, #4]
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff76 	bl	8000a30 <LCD_Draw_Char>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000170 	.word	0x20000170

08000b50 <LCD_DrawMenuScreen>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void LCD_DrawMenuScreen(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    LCD_Clear(0, COLOR_BG);
 8000b54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff27 	bl	80009ac <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ff46 	bl	80009f0 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000b64:	482d      	ldr	r0, [pc, #180]	@ (8000c1c <LCD_DrawMenuScreen+0xcc>)
 8000b66:	f7ff ff53 	bl	8000a10 <LCD_SetFont>
    LCD_DisplayChar(50, 40, '1');
 8000b6a:	2231      	movs	r2, #49	@ 0x31
 8000b6c:	2128      	movs	r1, #40	@ 0x28
 8000b6e:	2032      	movs	r0, #50	@ 0x32
 8000b70:	f7ff ffcc 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 60, '-');
 8000b74:	222d      	movs	r2, #45	@ 0x2d
 8000b76:	213c      	movs	r1, #60	@ 0x3c
 8000b78:	2032      	movs	r0, #50	@ 0x32
 8000b7a:	f7ff ffc7 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 80, 'P');
 8000b7e:	2250      	movs	r2, #80	@ 0x50
 8000b80:	2150      	movs	r1, #80	@ 0x50
 8000b82:	2032      	movs	r0, #50	@ 0x32
 8000b84:	f7ff ffc2 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 100, 'L');
 8000b88:	224c      	movs	r2, #76	@ 0x4c
 8000b8a:	2164      	movs	r1, #100	@ 0x64
 8000b8c:	2032      	movs	r0, #50	@ 0x32
 8000b8e:	f7ff ffbd 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 120, 'A');
 8000b92:	2241      	movs	r2, #65	@ 0x41
 8000b94:	2178      	movs	r1, #120	@ 0x78
 8000b96:	2032      	movs	r0, #50	@ 0x32
 8000b98:	f7ff ffb8 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 140, 'Y');
 8000b9c:	2259      	movs	r2, #89	@ 0x59
 8000b9e:	218c      	movs	r1, #140	@ 0x8c
 8000ba0:	2032      	movs	r0, #50	@ 0x32
 8000ba2:	f7ff ffb3 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 160, 'E');
 8000ba6:	2245      	movs	r2, #69	@ 0x45
 8000ba8:	21a0      	movs	r1, #160	@ 0xa0
 8000baa:	2032      	movs	r0, #50	@ 0x32
 8000bac:	f7ff ffae 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(50, 180, 'R');
 8000bb0:	2252      	movs	r2, #82	@ 0x52
 8000bb2:	21b4      	movs	r1, #180	@ 0xb4
 8000bb4:	2032      	movs	r0, #50	@ 0x32
 8000bb6:	f7ff ffa9 	bl	8000b0c <LCD_DisplayChar>

    LCD_DisplayChar(170, 40, '2');
 8000bba:	2232      	movs	r2, #50	@ 0x32
 8000bbc:	2128      	movs	r1, #40	@ 0x28
 8000bbe:	20aa      	movs	r0, #170	@ 0xaa
 8000bc0:	f7ff ffa4 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 60, '-');
 8000bc4:	222d      	movs	r2, #45	@ 0x2d
 8000bc6:	213c      	movs	r1, #60	@ 0x3c
 8000bc8:	20aa      	movs	r0, #170	@ 0xaa
 8000bca:	f7ff ff9f 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 80, 'P');
 8000bce:	2250      	movs	r2, #80	@ 0x50
 8000bd0:	2150      	movs	r1, #80	@ 0x50
 8000bd2:	20aa      	movs	r0, #170	@ 0xaa
 8000bd4:	f7ff ff9a 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 100, 'L');
 8000bd8:	224c      	movs	r2, #76	@ 0x4c
 8000bda:	2164      	movs	r1, #100	@ 0x64
 8000bdc:	20aa      	movs	r0, #170	@ 0xaa
 8000bde:	f7ff ff95 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 120, 'A');
 8000be2:	2241      	movs	r2, #65	@ 0x41
 8000be4:	2178      	movs	r1, #120	@ 0x78
 8000be6:	20aa      	movs	r0, #170	@ 0xaa
 8000be8:	f7ff ff90 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 140, 'Y');
 8000bec:	2259      	movs	r2, #89	@ 0x59
 8000bee:	218c      	movs	r1, #140	@ 0x8c
 8000bf0:	20aa      	movs	r0, #170	@ 0xaa
 8000bf2:	f7ff ff8b 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 160, 'E');
 8000bf6:	2245      	movs	r2, #69	@ 0x45
 8000bf8:	21a0      	movs	r1, #160	@ 0xa0
 8000bfa:	20aa      	movs	r0, #170	@ 0xaa
 8000bfc:	f7ff ff86 	bl	8000b0c <LCD_DisplayChar>
    LCD_DisplayChar(170, 180, 'R');
 8000c00:	2252      	movs	r2, #82	@ 0x52
 8000c02:	21b4      	movs	r1, #180	@ 0xb4
 8000c04:	20aa      	movs	r0, #170	@ 0xaa
 8000c06:	f7ff ff81 	bl	8000b0c <LCD_DisplayChar>

    LCD_Draw_Vertical_Line(120, 40, 240, LCD_COLOR_BLACK);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	22f0      	movs	r2, #240	@ 0xf0
 8000c0e:	2128      	movs	r1, #40	@ 0x28
 8000c10:	2078      	movs	r0, #120	@ 0x78
 8000c12:	f7ff fea4 	bl	800095e <LCD_Draw_Vertical_Line>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000004 	.word	0x20000004

08000c20 <LCD_DrawGameBoard>:

void LCD_DrawGameBoard(int board[6][7]) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 8000c28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff febd 	bl	80009ac <LCD_Clear>

    for (int row = 0; row < BOARD_ROWS; row++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e047      	b.n	8000cc8 <LCD_DrawGameBoard+0xa8>
        for (int col = 0; col < BOARD_COLS; col++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	e03e      	b.n	8000cbc <LCD_DrawGameBoard+0x9c>
            int x = BOARD_X_START + col * (2 * CELL_RADIUS + CELL_SPACING);
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	3314      	adds	r3, #20
 8000c44:	613b      	str	r3, [r7, #16]
            int y = BOARD_Y_START + row * (2 * CELL_RADIUS + CELL_SPACING);
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	333c      	adds	r3, #60	@ 0x3c
 8000c4c:	60fb      	str	r3, [r7, #12]
            uint16_t color = COLOR_BG;
 8000c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c52:	82fb      	strh	r3, [r7, #22]

            if (board[row][col] == 1) color = COLOR_PLAYER1;
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	4613      	mov	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d103      	bne.n	8000c76 <LCD_DrawGameBoard+0x56>
 8000c6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c72:	82fb      	strh	r3, [r7, #22]
 8000c74:	e00f      	b.n	8000c96 <LCD_DrawGameBoard+0x76>
            else if (board[row][col] == 2) color = COLOR_PLAYER2;
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d102      	bne.n	8000c96 <LCD_DrawGameBoard+0x76>
 8000c90:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c94:	82fb      	strh	r3, [r7, #22]

            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, COLOR_GRID);     // background
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	b298      	uxth	r0, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	231f      	movs	r3, #31
 8000ca0:	220e      	movs	r2, #14
 8000ca2:	f7ff fe09 	bl	80008b8 <LCD_Draw_Circle_Fill>
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS - 3, color);       //draw coin
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	8afb      	ldrh	r3, [r7, #22]
 8000cb0:	220b      	movs	r2, #11
 8000cb2:	f7ff fe01 	bl	80008b8 <LCD_Draw_Circle_Fill>
        for (int col = 0; col < BOARD_COLS; col++) {
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	ddbd      	ble.n	8000c3e <LCD_DrawGameBoard+0x1e>
    for (int row = 0; row < BOARD_ROWS; row++) {
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	ddb4      	ble.n	8000c38 <LCD_DrawGameBoard+0x18>
        }
    }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LCD_ClearFloatingBand>:

void LCD_ClearFloatingBand(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	e012      	b.n	8000d0a <LCD_ClearFloatingBand+0x32>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	80bb      	strh	r3, [r7, #4]
 8000ce8:	e009      	b.n	8000cfe <LCD_ClearFloatingBand+0x26>
        LCD_Draw_Pixel(x, y, COLOR_BG);
 8000cea:	88f9      	ldrh	r1, [r7, #6]
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fdc2 	bl	800087c <LCD_Draw_Pixel>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	2bef      	cmp	r3, #239	@ 0xef
 8000d02:	d9f2      	bls.n	8000cea <LCD_ClearFloatingBand+0x12>
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	3301      	adds	r3, #1
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d0e:	d9e9      	bls.n	8000ce4 <LCD_ClearFloatingBand+0xc>
      }
    }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <LCD_DrawGameOverScreen>:


void LCD_DrawGameOverScreen(int winner, int redWins, int yellowWins, int elapsedTime) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
    LCD_Clear(0, COLOR_BG);
 8000d2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fe3c 	bl	80009ac <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fe5b 	bl	80009f0 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000d3a:	4863      	ldr	r0, [pc, #396]	@ (8000ec8 <LCD_DrawGameOverScreen+0x1ac>)
 8000d3c:	f7ff fe68 	bl	8000a10 <LCD_SetFont>

    if (winner == 1) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d128      	bne.n	8000d98 <LCD_DrawGameOverScreen+0x7c>
        LCD_DisplayChar(40, 40, 'R');
 8000d46:	2252      	movs	r2, #82	@ 0x52
 8000d48:	2128      	movs	r1, #40	@ 0x28
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f7ff fede 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 60, 'E');
 8000d50:	2245      	movs	r2, #69	@ 0x45
 8000d52:	213c      	movs	r1, #60	@ 0x3c
 8000d54:	2028      	movs	r0, #40	@ 0x28
 8000d56:	f7ff fed9 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 80, 'D');
 8000d5a:	2244      	movs	r2, #68	@ 0x44
 8000d5c:	2150      	movs	r1, #80	@ 0x50
 8000d5e:	2028      	movs	r0, #40	@ 0x28
 8000d60:	f7ff fed4 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 100, ' ');
 8000d64:	2220      	movs	r2, #32
 8000d66:	2164      	movs	r1, #100	@ 0x64
 8000d68:	2028      	movs	r0, #40	@ 0x28
 8000d6a:	f7ff fecf 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 120, 'W');
 8000d6e:	2257      	movs	r2, #87	@ 0x57
 8000d70:	2178      	movs	r1, #120	@ 0x78
 8000d72:	2028      	movs	r0, #40	@ 0x28
 8000d74:	f7ff feca 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 140, 'I');
 8000d78:	2249      	movs	r2, #73	@ 0x49
 8000d7a:	218c      	movs	r1, #140	@ 0x8c
 8000d7c:	2028      	movs	r0, #40	@ 0x28
 8000d7e:	f7ff fec5 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 160, 'N');
 8000d82:	224e      	movs	r2, #78	@ 0x4e
 8000d84:	21a0      	movs	r1, #160	@ 0xa0
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f7ff fec0 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 180, 'S');
 8000d8c:	2253      	movs	r2, #83	@ 0x53
 8000d8e:	21b4      	movs	r1, #180	@ 0xb4
 8000d90:	2028      	movs	r0, #40	@ 0x28
 8000d92:	f7ff febb 	bl	8000b0c <LCD_DisplayChar>
 8000d96:	e049      	b.n	8000e2c <LCD_DrawGameOverScreen+0x110>
    } else if (winner == 2) {
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d137      	bne.n	8000e0e <LCD_DrawGameOverScreen+0xf2>
        LCD_DisplayChar(40, 40, 'Y');
 8000d9e:	2259      	movs	r2, #89	@ 0x59
 8000da0:	2128      	movs	r1, #40	@ 0x28
 8000da2:	2028      	movs	r0, #40	@ 0x28
 8000da4:	f7ff feb2 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 60, 'E');
 8000da8:	2245      	movs	r2, #69	@ 0x45
 8000daa:	213c      	movs	r1, #60	@ 0x3c
 8000dac:	2028      	movs	r0, #40	@ 0x28
 8000dae:	f7ff fead 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 80, 'L');
 8000db2:	224c      	movs	r2, #76	@ 0x4c
 8000db4:	2150      	movs	r1, #80	@ 0x50
 8000db6:	2028      	movs	r0, #40	@ 0x28
 8000db8:	f7ff fea8 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 100, 'L');
 8000dbc:	224c      	movs	r2, #76	@ 0x4c
 8000dbe:	2164      	movs	r1, #100	@ 0x64
 8000dc0:	2028      	movs	r0, #40	@ 0x28
 8000dc2:	f7ff fea3 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 120, 'O');
 8000dc6:	224f      	movs	r2, #79	@ 0x4f
 8000dc8:	2178      	movs	r1, #120	@ 0x78
 8000dca:	2028      	movs	r0, #40	@ 0x28
 8000dcc:	f7ff fe9e 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 140, 'W');
 8000dd0:	2257      	movs	r2, #87	@ 0x57
 8000dd2:	218c      	movs	r1, #140	@ 0x8c
 8000dd4:	2028      	movs	r0, #40	@ 0x28
 8000dd6:	f7ff fe99 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 160, ' ');
 8000dda:	2220      	movs	r2, #32
 8000ddc:	21a0      	movs	r1, #160	@ 0xa0
 8000dde:	2028      	movs	r0, #40	@ 0x28
 8000de0:	f7ff fe94 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 180, 'W');
 8000de4:	2257      	movs	r2, #87	@ 0x57
 8000de6:	21b4      	movs	r1, #180	@ 0xb4
 8000de8:	2028      	movs	r0, #40	@ 0x28
 8000dea:	f7ff fe8f 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 200, 'I');
 8000dee:	2249      	movs	r2, #73	@ 0x49
 8000df0:	21c8      	movs	r1, #200	@ 0xc8
 8000df2:	2028      	movs	r0, #40	@ 0x28
 8000df4:	f7ff fe8a 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 220, 'N');
 8000df8:	224e      	movs	r2, #78	@ 0x4e
 8000dfa:	21dc      	movs	r1, #220	@ 0xdc
 8000dfc:	2028      	movs	r0, #40	@ 0x28
 8000dfe:	f7ff fe85 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 240, 'S');
 8000e02:	2253      	movs	r2, #83	@ 0x53
 8000e04:	21f0      	movs	r1, #240	@ 0xf0
 8000e06:	2028      	movs	r0, #40	@ 0x28
 8000e08:	f7ff fe80 	bl	8000b0c <LCD_DisplayChar>
 8000e0c:	e00e      	b.n	8000e2c <LCD_DrawGameOverScreen+0x110>
    } else {
        LCD_DisplayChar(40, 40, 'T');
 8000e0e:	2254      	movs	r2, #84	@ 0x54
 8000e10:	2128      	movs	r1, #40	@ 0x28
 8000e12:	2028      	movs	r0, #40	@ 0x28
 8000e14:	f7ff fe7a 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 60, 'I');
 8000e18:	2249      	movs	r2, #73	@ 0x49
 8000e1a:	213c      	movs	r1, #60	@ 0x3c
 8000e1c:	2028      	movs	r0, #40	@ 0x28
 8000e1e:	f7ff fe75 	bl	8000b0c <LCD_DisplayChar>
        LCD_DisplayChar(40, 80, 'E');
 8000e22:	2245      	movs	r2, #69	@ 0x45
 8000e24:	2150      	movs	r1, #80	@ 0x50
 8000e26:	2028      	movs	r0, #40	@ 0x28
 8000e28:	f7ff fe70 	bl	8000b0c <LCD_DisplayChar>
    }

    char buffer[32];
    sprintf(buffer, "Red: %d  Yellow: %d", redWins, yellowWins);
 8000e2c:	f107 0014 	add.w	r0, r7, #20
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4925      	ldr	r1, [pc, #148]	@ (8000ecc <LCD_DrawGameOverScreen+0x1b0>)
 8000e36:	f005 fa7b 	bl	8006330 <siprintf>
    for (int i = 0; buffer[i]; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e3e:	e011      	b.n	8000e64 <LCD_DrawGameOverScreen+0x148>
        LCD_DisplayChar(200, 40 + i * 16, buffer[i]);
 8000e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3328      	adds	r3, #40	@ 0x28
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	f107 0214 	add.w	r2, r7, #20
 8000e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e52:	4413      	add	r3, r2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	20c8      	movs	r0, #200	@ 0xc8
 8000e5a:	f7ff fe57 	bl	8000b0c <LCD_DisplayChar>
    for (int i = 0; buffer[i]; i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e64:	f107 0214 	add.w	r2, r7, #20
 8000e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e6      	bne.n	8000e40 <LCD_DrawGameOverScreen+0x124>
    }

	LCD_DisplayChar(200, 200, 'R');
 8000e72:	2252      	movs	r2, #82	@ 0x52
 8000e74:	21c8      	movs	r1, #200	@ 0xc8
 8000e76:	20c8      	movs	r0, #200	@ 0xc8
 8000e78:	f7ff fe48 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 220, 'E');
 8000e7c:	2245      	movs	r2, #69	@ 0x45
 8000e7e:	21dc      	movs	r1, #220	@ 0xdc
 8000e80:	20c8      	movs	r0, #200	@ 0xc8
 8000e82:	f7ff fe43 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 240, 'S');
 8000e86:	2253      	movs	r2, #83	@ 0x53
 8000e88:	21f0      	movs	r1, #240	@ 0xf0
 8000e8a:	20c8      	movs	r0, #200	@ 0xc8
 8000e8c:	f7ff fe3e 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 260, 'T');
 8000e90:	2254      	movs	r2, #84	@ 0x54
 8000e92:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000e96:	20c8      	movs	r0, #200	@ 0xc8
 8000e98:	f7ff fe38 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 280, 'A');
 8000e9c:	2241      	movs	r2, #65	@ 0x41
 8000e9e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000ea2:	20c8      	movs	r0, #200	@ 0xc8
 8000ea4:	f7ff fe32 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 300, 'R');
 8000ea8:	2252      	movs	r2, #82	@ 0x52
 8000eaa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000eae:	20c8      	movs	r0, #200	@ 0xc8
 8000eb0:	f7ff fe2c 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(200, 320, 'T');
 8000eb4:	2254      	movs	r2, #84	@ 0x54
 8000eb6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000eba:	20c8      	movs	r0, #200	@ 0xc8
 8000ebc:	f7ff fe26 	bl	8000b0c <LCD_DisplayChar>
}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	@ 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	08006c88 	.word	0x08006c88

08000ed0 <LCD_DrawFloatingCoin>:

void LCD_DrawFloatingCoin(int column, uint16_t color) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
    int x = BOARD_X_START + column * (2 * CELL_RADIUS + CELL_SPACING);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	3314      	adds	r3, #20
 8000ee2:	60fb      	str	r3, [r7, #12]
    int y = BOARD_Y_START - 30;
 8000ee4:	231e      	movs	r3, #30
 8000ee6:	60bb      	str	r3, [r7, #8]

    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b298      	uxth	r0, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	220e      	movs	r2, #14
 8000ef4:	f7ff fce0 	bl	80008b8 <LCD_Draw_Circle_Fill>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <LCD_Error_Handler+0x8>

08000f0c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f10:	f001 fa4e 	bl	80023b0 <STMPE811_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d001      	beq.n	8000f1e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <InitializeLCDTouch+0xe>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 faf8 	bl	8002520 <STMPE811_ReadTouch>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <placeCoin>:
 *      Author: willa
 */

#include "game_state.h"

int placeCoin(int board[6][7], int col, int player) {
 8000f3a:	b480      	push	{r7}
 8000f3c:	b087      	sub	sp, #28
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
    for (int row = 5; row >= 0; row--) {
 8000f46:	2305      	movs	r3, #5
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e01d      	b.n	8000f88 <placeCoin+0x4e>
        if (board[row][col] == 0) {
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <placeCoin+0x48>
            board[row][col] = player;
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	461a      	mov	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            return row;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	e007      	b.n	8000f92 <placeCoin+0x58>
    for (int row = 5; row >= 0; row--) {
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dade      	bge.n	8000f4c <placeCoin+0x12>
        }
    }
    return -1; // COL FULL, IMPLIMENT THIS LATER AND DON'T FORGET
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <checkWinOrTie>:


// 1 IS PLAYER WIN
// 2 IS TIE
// 0 NO WIN OR TIE, GAME STILL GOING
int checkWinOrTie(int board[6][7], int row, int col, int player) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	603b      	str	r3, [r7, #0]
	return 0; //TESTING//////////////////////////////////////////////////////////////////////////////////////////////////////////////
 8000fac:	2300      	movs	r3, #0
//                return 0;
//            }
//        }
//    }
//    return 2;
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000fbe:	f000 f9ff 	bl	80013c0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000fc2:	20ca      	movs	r0, #202	@ 0xca
 8000fc4:	f000 f943 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000fc8:	20c3      	movs	r0, #195	@ 0xc3
 8000fca:	f000 f94d 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f000 f94a 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000fd4:	2050      	movs	r0, #80	@ 0x50
 8000fd6:	f000 f947 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000fda:	20cf      	movs	r0, #207	@ 0xcf
 8000fdc:	f000 f937 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f941 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000fe6:	20c1      	movs	r0, #193	@ 0xc1
 8000fe8:	f000 f93e 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000fec:	2030      	movs	r0, #48	@ 0x30
 8000fee:	f000 f93b 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000ff2:	20ed      	movs	r0, #237	@ 0xed
 8000ff4:	f000 f92b 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f000 f935 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f932 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001004:	2012      	movs	r0, #18
 8001006:	f000 f92f 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800100a:	2081      	movs	r0, #129	@ 0x81
 800100c:	f000 f92c 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001010:	20e8      	movs	r0, #232	@ 0xe8
 8001012:	f000 f91c 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001016:	2085      	movs	r0, #133	@ 0x85
 8001018:	f000 f926 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f923 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001022:	2078      	movs	r0, #120	@ 0x78
 8001024:	f000 f920 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001028:	20cb      	movs	r0, #203	@ 0xcb
 800102a:	f000 f910 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800102e:	2039      	movs	r0, #57	@ 0x39
 8001030:	f000 f91a 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001034:	202c      	movs	r0, #44	@ 0x2c
 8001036:	f000 f917 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f914 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001040:	2034      	movs	r0, #52	@ 0x34
 8001042:	f000 f911 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001046:	2002      	movs	r0, #2
 8001048:	f000 f90e 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800104c:	20f7      	movs	r0, #247	@ 0xf7
 800104e:	f000 f8fe 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001052:	2020      	movs	r0, #32
 8001054:	f000 f908 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001058:	20ea      	movs	r0, #234	@ 0xea
 800105a:	f000 f8f8 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f902 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f8ff 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800106a:	20b1      	movs	r0, #177	@ 0xb1
 800106c:	f000 f8ef 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f8f9 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001076:	201b      	movs	r0, #27
 8001078:	f000 f8f6 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800107c:	20b6      	movs	r0, #182	@ 0xb6
 800107e:	f000 f8e6 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001082:	200a      	movs	r0, #10
 8001084:	f000 f8f0 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001088:	20a2      	movs	r0, #162	@ 0xa2
 800108a:	f000 f8ed 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800108e:	20c0      	movs	r0, #192	@ 0xc0
 8001090:	f000 f8dd 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001094:	2010      	movs	r0, #16
 8001096:	f000 f8e7 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800109a:	20c1      	movs	r0, #193	@ 0xc1
 800109c:	f000 f8d7 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80010a0:	2010      	movs	r0, #16
 80010a2:	f000 f8e1 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80010a6:	20c5      	movs	r0, #197	@ 0xc5
 80010a8:	f000 f8d1 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80010ac:	2045      	movs	r0, #69	@ 0x45
 80010ae:	f000 f8db 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80010b2:	2015      	movs	r0, #21
 80010b4:	f000 f8d8 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80010b8:	20c7      	movs	r0, #199	@ 0xc7
 80010ba:	f000 f8c8 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80010be:	2090      	movs	r0, #144	@ 0x90
 80010c0:	f000 f8d2 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80010c4:	2036      	movs	r0, #54	@ 0x36
 80010c6:	f000 f8c2 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80010ca:	20c8      	movs	r0, #200	@ 0xc8
 80010cc:	f000 f8cc 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80010d0:	20f2      	movs	r0, #242	@ 0xf2
 80010d2:	f000 f8bc 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f8c6 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80010dc:	20b0      	movs	r0, #176	@ 0xb0
 80010de:	f000 f8b6 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80010e2:	20c2      	movs	r0, #194	@ 0xc2
 80010e4:	f000 f8c0 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80010e8:	20b6      	movs	r0, #182	@ 0xb6
 80010ea:	f000 f8b0 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 f8ba 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80010f4:	20a7      	movs	r0, #167	@ 0xa7
 80010f6:	f000 f8b7 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80010fa:	2027      	movs	r0, #39	@ 0x27
 80010fc:	f000 f8b4 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001100:	2004      	movs	r0, #4
 8001102:	f000 f8b1 	bl	8001268 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001106:	202a      	movs	r0, #42	@ 0x2a
 8001108:	f000 f8a1 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f8ab 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f8a8 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f8a5 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800111e:	20ef      	movs	r0, #239	@ 0xef
 8001120:	f000 f8a2 	bl	8001268 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001124:	202b      	movs	r0, #43	@ 0x2b
 8001126:	f000 f892 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f89c 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f899 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f896 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800113c:	203f      	movs	r0, #63	@ 0x3f
 800113e:	f000 f893 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001142:	20f6      	movs	r0, #246	@ 0xf6
 8001144:	f000 f883 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 f88d 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f88a 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001154:	2006      	movs	r0, #6
 8001156:	f000 f887 	bl	8001268 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800115a:	202c      	movs	r0, #44	@ 0x2c
 800115c:	f000 f877 	bl	800124e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001160:	20c8      	movs	r0, #200	@ 0xc8
 8001162:	f000 f9e9 	bl	8001538 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001166:	2026      	movs	r0, #38	@ 0x26
 8001168:	f000 f871 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f000 f87b 	bl	8001268 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001172:	20e0      	movs	r0, #224	@ 0xe0
 8001174:	f000 f86b 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001178:	200f      	movs	r0, #15
 800117a:	f000 f875 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800117e:	2029      	movs	r0, #41	@ 0x29
 8001180:	f000 f872 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001184:	2024      	movs	r0, #36	@ 0x24
 8001186:	f000 f86f 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800118a:	200c      	movs	r0, #12
 800118c:	f000 f86c 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001190:	200e      	movs	r0, #14
 8001192:	f000 f869 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001196:	2009      	movs	r0, #9
 8001198:	f000 f866 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800119c:	204e      	movs	r0, #78	@ 0x4e
 800119e:	f000 f863 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80011a2:	2078      	movs	r0, #120	@ 0x78
 80011a4:	f000 f860 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80011a8:	203c      	movs	r0, #60	@ 0x3c
 80011aa:	f000 f85d 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80011ae:	2009      	movs	r0, #9
 80011b0:	f000 f85a 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80011b4:	2013      	movs	r0, #19
 80011b6:	f000 f857 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f854 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80011c0:	2017      	movs	r0, #23
 80011c2:	f000 f851 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80011c6:	2011      	movs	r0, #17
 80011c8:	f000 f84e 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f84b 	bl	8001268 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80011d2:	20e1      	movs	r0, #225	@ 0xe1
 80011d4:	f000 f83b 	bl	800124e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f845 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80011de:	2016      	movs	r0, #22
 80011e0:	f000 f842 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80011e4:	201b      	movs	r0, #27
 80011e6:	f000 f83f 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f000 f83c 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80011f0:	2011      	movs	r0, #17
 80011f2:	f000 f839 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f000 f836 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80011fc:	2031      	movs	r0, #49	@ 0x31
 80011fe:	f000 f833 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001202:	2033      	movs	r0, #51	@ 0x33
 8001204:	f000 f830 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001208:	2042      	movs	r0, #66	@ 0x42
 800120a:	f000 f82d 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800120e:	2005      	movs	r0, #5
 8001210:	f000 f82a 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001214:	200c      	movs	r0, #12
 8001216:	f000 f827 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800121a:	200a      	movs	r0, #10
 800121c:	f000 f824 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001220:	2028      	movs	r0, #40	@ 0x28
 8001222:	f000 f821 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001226:	202f      	movs	r0, #47	@ 0x2f
 8001228:	f000 f81e 	bl	8001268 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800122c:	200f      	movs	r0, #15
 800122e:	f000 f81b 	bl	8001268 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001232:	2011      	movs	r0, #17
 8001234:	f000 f80b 	bl	800124e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001238:	20c8      	movs	r0, #200	@ 0xc8
 800123a:	f000 f97d 	bl	8001538 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800123e:	2029      	movs	r0, #41	@ 0x29
 8001240:	f000 f805 	bl	800124e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001244:	202c      	movs	r0, #44	@ 0x2c
 8001246:	f000 f802 	bl	800124e <ili9341_Write_Reg>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}

0800124e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f94a 	bl	80014f4 <LCD_IO_WriteReg>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f91b 	bl	80014b0 <LCD_IO_WriteData>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001288:	4819      	ldr	r0, [pc, #100]	@ (80012f0 <SPI_Init+0x6c>)
 800128a:	f004 fc8e 	bl	8005baa <HAL_SPI_GetState>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d12b      	bne.n	80012ec <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <SPI_Init+0x6c>)
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <SPI_Init+0x70>)
 8001298:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <SPI_Init+0x6c>)
 800129c:	2218      	movs	r2, #24
 800129e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <SPI_Init+0x6c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <SPI_Init+0x6c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <SPI_Init+0x6c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <SPI_Init+0x6c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <SPI_Init+0x6c>)
 80012ba:	2207      	movs	r2, #7
 80012bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <SPI_Init+0x6c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <SPI_Init+0x6c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <SPI_Init+0x6c>)
 80012cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <SPI_Init+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SPI_Init+0x6c>)
 80012da:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012de:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <SPI_Init+0x6c>)
 80012e2:	f000 f833 	bl	800134c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80012e6:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <SPI_Init+0x6c>)
 80012e8:	f004 fa6a 	bl	80057c0 <HAL_SPI_Init>
  }
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20025974 	.word	0x20025974
 80012f4:	40015000 	.word	0x40015000

080012f8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <SPI_Write+0x34>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1db9      	adds	r1, r7, #6
 800130c:	2201      	movs	r2, #1
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <SPI_Write+0x38>)
 8001310:	f004 fb07 	bl	8005922 <HAL_SPI_Transmit>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800131e:	f000 f809 	bl	8001334 <SPI_Error>
  }
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20025974 	.word	0x20025974

08001334 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <SPI_Error+0x14>)
 800133a:	f004 faca 	bl	80058d2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800133e:	f7ff ffa1 	bl	8001284 <SPI_Init>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20025974 	.word	0x20025974

0800134c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <SPI_MspInit+0x6c>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135c:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <SPI_MspInit+0x6c>)
 800135e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001362:	6453      	str	r3, [r2, #68]	@ 0x44
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <SPI_MspInit+0x6c>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <SPI_MspInit+0x6c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <SPI_MspInit+0x6c>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <SPI_MspInit+0x6c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800138c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800139e:	2305      	movs	r3, #5
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <SPI_MspInit+0x70>)
 80013aa:	f001 fd6b 	bl	8002e84 <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021400 	.word	0x40021400

080013c0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80013c6:	4b36      	ldr	r3, [pc, #216]	@ (80014a0 <LCD_IO_Init+0xe0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d164      	bne.n	8001498 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80013ce:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <LCD_IO_Init+0xe0>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <LCD_IO_Init+0xe4>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	4a31      	ldr	r2, [pc, #196]	@ (80014a4 <LCD_IO_Init+0xe4>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e4:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <LCD_IO_Init+0xe4>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80013f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	4827      	ldr	r0, [pc, #156]	@ (80014a8 <LCD_IO_Init+0xe8>)
 800140a:	f001 fd3b 	bl	8002e84 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <LCD_IO_Init+0xe4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <LCD_IO_Init+0xe4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <LCD_IO_Init+0xe4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800142a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	4819      	ldr	r0, [pc, #100]	@ (80014a8 <LCD_IO_Init+0xe8>)
 8001444:	f001 fd1e 	bl	8002e84 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <LCD_IO_Init+0xe4>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <LCD_IO_Init+0xe4>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <LCD_IO_Init+0xe4>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001464:	2304      	movs	r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LCD_IO_Init+0xec>)
 800147c:	f001 fd02 	bl	8002e84 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001480:	2200      	movs	r2, #0
 8001482:	2104      	movs	r1, #4
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <LCD_IO_Init+0xec>)
 8001486:	f001 ffb5 	bl	80033f4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800148a:	2201      	movs	r2, #1
 800148c:	2104      	movs	r1, #4
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <LCD_IO_Init+0xec>)
 8001490:	f001 ffb0 	bl	80033f4 <HAL_GPIO_WritePin>

    SPI_Init();
 8001494:	f7ff fef6 	bl	8001284 <SPI_Init>
  }
}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200259cc 	.word	0x200259cc
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40020800 	.word	0x40020800

080014b0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c0:	480a      	ldr	r0, [pc, #40]	@ (80014ec <LCD_IO_WriteData+0x3c>)
 80014c2:	f001 ff97 	bl	80033f4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80014c6:	2200      	movs	r2, #0
 80014c8:	2104      	movs	r1, #4
 80014ca:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <LCD_IO_WriteData+0x40>)
 80014cc:	f001 ff92 	bl	80033f4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff10 	bl	80012f8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014d8:	2201      	movs	r2, #1
 80014da:	2104      	movs	r1, #4
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <LCD_IO_WriteData+0x40>)
 80014de:	f001 ff89 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40020800 	.word	0x40020800

080014f4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001504:	480a      	ldr	r0, [pc, #40]	@ (8001530 <LCD_IO_WriteReg+0x3c>)
 8001506:	f001 ff75 	bl	80033f4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800150a:	2200      	movs	r2, #0
 800150c:	2104      	movs	r1, #4
 800150e:	4809      	ldr	r0, [pc, #36]	@ (8001534 <LCD_IO_WriteReg+0x40>)
 8001510:	f001 ff70 	bl	80033f4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff feed 	bl	80012f8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800151e:	2201      	movs	r2, #1
 8001520:	2104      	movs	r1, #4
 8001522:	4804      	ldr	r0, [pc, #16]	@ (8001534 <LCD_IO_WriteReg+0x40>)
 8001524:	f001 ff66 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40020800 	.word	0x40020800

08001538 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f001 fb69 	bl	8002c18 <HAL_Delay>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f001 faed 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 f887 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f000 fa77 	bl	8001a50 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001562:	f000 f92d 	bl	80017c0 <MX_LTDC_Init>
  MX_RNG_Init();
 8001566:	f000 f9dd 	bl	8001924 <MX_RNG_Init>
  MX_TIM2_Init();
 800156a:	f000 fa25 	bl	80019b8 <MX_TIM2_Init>
  MX_SPI5_Init();
 800156e:	f000 f9ed 	bl	800194c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001572:	f000 f8e5 	bl	8001740 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001576:	f7ff f803 	bl	8000580 <ApplicationInit>

  HAL_Delay(1000);
 800157a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157e:	f001 fb4b 	bl	8002c18 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /////////////////////////// TEST DRAW FUNCTIONS////////////////////////////////
  LCD_DrawMenuScreen();
 8001582:	f7ff fae5 	bl	8000b50 <LCD_DrawMenuScreen>
  STMPE811_TouchData touch;
  while (1) {
      if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fcca 	bl	8000f22 <returnTouchStateAndLocation>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f8      	bne.n	8001586 <main+0x36>
          if (touch.y < 120) {
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	2b77      	cmp	r3, #119	@ 0x77
 8001598:	d803      	bhi.n	80015a2 <main+0x52>
              onePlayerMode = 1;
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <main+0xf4>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]
          } else {
              onePlayerMode = 0;
          }
          break;
 80015a0:	e002      	b.n	80015a8 <main+0x58>
              onePlayerMode = 0;
 80015a2:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <main+0xf4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
      }
  }

  LCD_DrawGameBoard(board);
 80015a8:	4827      	ldr	r0, [pc, #156]	@ (8001648 <main+0xf8>)
 80015aa:	f7ff fb39 	bl	8000c20 <LCD_DrawGameBoard>
  game_start_ms = HAL_GetTick();
 80015ae:	f001 fb27 	bl	8002c00 <HAL_GetTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a25      	ldr	r2, [pc, #148]	@ (800164c <main+0xfc>)
 80015b6:	6013      	str	r3, [r2, #0]

  while (!gameOver) {
 80015b8:	e034      	b.n	8001624 <main+0xd4>
	  uint16_t color;
	  if (currentPlayer == 1) {
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <main+0x100>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d103      	bne.n	80015ca <main+0x7a>
		  color = COLOR_PLAYER1;
 80015c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015c6:	81fb      	strh	r3, [r7, #14]
 80015c8:	e002      	b.n	80015d0 <main+0x80>
	  } else {
		  color = COLOR_PLAYER2;
 80015ca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015ce:	81fb      	strh	r3, [r7, #14]
	  }
	  HAL_Delay(50);
 80015d0:	2032      	movs	r0, #50	@ 0x32
 80015d2:	f001 fb21 	bl	8002c18 <HAL_Delay>
	  LCD_DrawFloatingCoin(currentColumn, color);
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <main+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fc76 	bl	8000ed0 <LCD_DrawFloatingCoin>

	  if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc9b 	bl	8000f22 <returnTouchStateAndLocation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <main+0xd4>
		  LCD_ClearFloatingBand();
 80015f2:	f7ff fb71 	bl	8000cd8 <LCD_ClearFloatingBand>
		  if (touch.y < 120) currentColumn = MAX(0, currentColumn - 1);
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b77      	cmp	r3, #119	@ 0x77
 80015fa:	d808      	bhi.n	800160e <main+0xbe>
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <main+0x104>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	bfb8      	it	lt
 8001604:	2301      	movlt	r3, #1
 8001606:	3b01      	subs	r3, #1
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <main+0x104>)
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e007      	b.n	800161e <main+0xce>
		  else currentColumn = MIN(6, currentColumn + 1);
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <main+0x104>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b05      	cmp	r3, #5
 8001614:	bfa8      	it	ge
 8001616:	2305      	movge	r3, #5
 8001618:	3301      	adds	r3, #1
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <main+0x104>)
 800161c:	6013      	str	r3, [r2, #0]
		  HAL_Delay(100);
 800161e:	2064      	movs	r0, #100	@ 0x64
 8001620:	f001 fafa 	bl	8002c18 <HAL_Delay>
  while (!gameOver) {
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <main+0x108>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0c6      	beq.n	80015ba <main+0x6a>
	  }
  }

  LCD_DrawGameOverScreen(winner, redWins, yellowWins, elapsedTime);
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <main+0x10c>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <main+0x110>)
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <main+0x114>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <main+0x118>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f7ff fb6e 	bl	8000d1c <LCD_DrawGameOverScreen>

  while (1);
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <main+0xf0>
 8001644:	20025c28 	.word	0x20025c28
 8001648:	20025b80 	.word	0x20025b80
 800164c:	20025b7c 	.word	0x20025b7c
 8001650:	20000010 	.word	0x20000010
 8001654:	20000014 	.word	0x20000014
 8001658:	20025c2c 	.word	0x20025c2c
 800165c:	20025c30 	.word	0x20025c30
 8001660:	20025c34 	.word	0x20025c34
 8001664:	20025c38 	.word	0x20025c38
 8001668:	20025c3c 	.word	0x20025c3c

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	@ 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	@ 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fe78 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <SystemClock_Config+0xcc>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a0:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <SystemClock_Config+0xd0>)
 80016b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016dc:	2308      	movs	r3, #8
 80016de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ea:	2307      	movs	r3, #7
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f9f6 	bl	8004ae4 <HAL_RCC_OscConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016fe:	f000 fbb9 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	230f      	movs	r3, #15
 8001704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001706:	2302      	movs	r3, #2
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	2105      	movs	r1, #5
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fc57 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800172c:	f000 fba2 	bl	8001e74 <Error_Handler>
  }
}
 8001730:	bf00      	nop
 8001732:	3750      	adds	r7, #80	@ 0x50
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <MX_I2C3_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_I2C3_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	@ (80017bc <MX_I2C3_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <MX_I2C3_Init+0x74>)
 800175e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001762:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <MX_I2C3_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001770:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_I2C3_Init+0x74>)
 800177e:	f001 fe6b 	bl	8003458 <HAL_I2C_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001788:	f000 fb74 	bl	8001e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <MX_I2C3_Init+0x74>)
 8001790:	f002 fe86 	bl	80044a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800179a:	f000 fb6b 	bl	8001e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_I2C3_Init+0x74>)
 80017a2:	f002 feb9 	bl	8004518 <HAL_I2CEx_ConfigDigitalFilter>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 fb62 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200259d0 	.word	0x200259d0
 80017b8:	40005c00 	.word	0x40005c00
 80017bc:	000186a0 	.word	0x000186a0

080017c0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09a      	sub	sp, #104	@ 0x68
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ca:	2234      	movs	r2, #52	@ 0x34
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fdce 	bl	8006370 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80017d4:	463b      	mov	r3, r7
 80017d6:	2234      	movs	r2, #52	@ 0x34
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 fdc8 	bl	8006370 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017e0:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <MX_LTDC_Init+0x15c>)
 80017e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001920 <MX_LTDC_Init+0x160>)
 80017e4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017e6:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <MX_LTDC_Init+0x15c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017ec:	4b4b      	ldr	r3, [pc, #300]	@ (800191c <MX_LTDC_Init+0x15c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017f2:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <MX_LTDC_Init+0x15c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017f8:	4b48      	ldr	r3, [pc, #288]	@ (800191c <MX_LTDC_Init+0x15c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001800:	2207      	movs	r2, #7
 8001802:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001804:	4b45      	ldr	r3, [pc, #276]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001806:	2203      	movs	r2, #3
 8001808:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800180a:	4b44      	ldr	r3, [pc, #272]	@ (800191c <MX_LTDC_Init+0x15c>)
 800180c:	220e      	movs	r2, #14
 800180e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001810:	4b42      	ldr	r3, [pc, #264]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001812:	2205      	movs	r2, #5
 8001814:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001818:	f240 228e 	movw	r2, #654	@ 0x28e
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800181e:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001820:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001824:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001828:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001830:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001834:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001836:	4b39      	ldr	r3, [pc, #228]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800184e:	4833      	ldr	r0, [pc, #204]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001850:	f002 fea2 	bl	8004598 <HAL_LTDC_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800185a:	f000 fb0b 	bl	8001e74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800186e:	2300      	movs	r3, #0
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800187a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001880:	2305      	movs	r3, #5
 8001882:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80018a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	481c      	ldr	r0, [pc, #112]	@ (800191c <MX_LTDC_Init+0x15c>)
 80018ac:	f002 ff44 	bl	8004738 <HAL_LTDC_ConfigLayer>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80018b6:	f000 fadd 	bl	8001e74 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80018d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018da:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018dc:	2305      	movs	r3, #5
 80018de:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	2201      	movs	r2, #1
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_LTDC_Init+0x15c>)
 8001906:	f002 ff17 	bl	8004738 <HAL_LTDC_ConfigLayer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001910:	f000 fab0 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3768      	adds	r7, #104	@ 0x68
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20025a24 	.word	0x20025a24
 8001920:	40016800 	.word	0x40016800

08001924 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_RNG_Init+0x20>)
 800192a:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <MX_RNG_Init+0x24>)
 800192c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	@ (8001944 <MX_RNG_Init+0x20>)
 8001930:	f003 ff1c 	bl	800576c <HAL_RNG_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800193a:	f000 fa9b 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20025acc 	.word	0x20025acc
 8001948:	50060800 	.word	0x50060800

0800194c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001952:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <MX_SPI5_Init+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800195c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_SPI5_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_SPI5_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_SPI5_Init+0x64>)
 8001998:	220a      	movs	r2, #10
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <MX_SPI5_Init+0x64>)
 800199e:	f003 ff0f 	bl	80057c0 <HAL_SPI_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80019a8:	f000 fa64 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20025adc 	.word	0x20025adc
 80019b4:	40015000 	.word	0x40015000

080019b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019ea:	f04f 32ff 	mov.w	r2, #4294967295
 80019ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019fc:	4813      	ldr	r0, [pc, #76]	@ (8001a4c <MX_TIM2_Init+0x94>)
 80019fe:	f004 f9bf 	bl	8005d80 <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a08:	f000 fa34 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <MX_TIM2_Init+0x94>)
 8001a1a:	f004 fa00 	bl	8005e1e <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a24:	f000 fa26 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_TIM2_Init+0x94>)
 8001a36:	f004 fbff 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a40:	f000 fa18 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20025b34 	.word	0x20025b34

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	@ 0x38
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	4bb3      	ldr	r3, [pc, #716]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4ab2      	ldr	r2, [pc, #712]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4bb0      	ldr	r3, [pc, #704]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	4bac      	ldr	r3, [pc, #688]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4aab      	ldr	r2, [pc, #684]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4ba9      	ldr	r3, [pc, #676]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	4ba5      	ldr	r3, [pc, #660]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4aa4      	ldr	r2, [pc, #656]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4ba2      	ldr	r3, [pc, #648]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	4b9e      	ldr	r3, [pc, #632]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a9d      	ldr	r2, [pc, #628]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b9b      	ldr	r3, [pc, #620]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b97      	ldr	r3, [pc, #604]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a96      	ldr	r2, [pc, #600]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b94      	ldr	r3, [pc, #592]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b90      	ldr	r3, [pc, #576]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a8f      	ldr	r2, [pc, #572]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b8d      	ldr	r3, [pc, #564]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b89      	ldr	r3, [pc, #548]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a88      	ldr	r2, [pc, #544]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b86      	ldr	r3, [pc, #536]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b82      	ldr	r3, [pc, #520]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a81      	ldr	r2, [pc, #516]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <MX_GPIO_Init+0x2e8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2116      	movs	r1, #22
 8001b4a:	487c      	ldr	r0, [pc, #496]	@ (8001d3c <MX_GPIO_Init+0x2ec>)
 8001b4c:	f001 fc52 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	@ 0x80
 8001b54:	487a      	ldr	r0, [pc, #488]	@ (8001d40 <MX_GPIO_Init+0x2f0>)
 8001b56:	f001 fc4d 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001b60:	4878      	ldr	r0, [pc, #480]	@ (8001d44 <MX_GPIO_Init+0x2f4>)
 8001b62:	f001 fc47 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001b6c:	4876      	ldr	r0, [pc, #472]	@ (8001d48 <MX_GPIO_Init+0x2f8>)
 8001b6e:	f001 fc41 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001b72:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b84:	230c      	movs	r3, #12
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	486f      	ldr	r0, [pc, #444]	@ (8001d4c <MX_GPIO_Init+0x2fc>)
 8001b90:	f001 f978 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4863      	ldr	r0, [pc, #396]	@ (8001d3c <MX_GPIO_Init+0x2ec>)
 8001bb0:	f001 f968 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001bb4:	2316      	movs	r3, #22
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	485c      	ldr	r0, [pc, #368]	@ (8001d3c <MX_GPIO_Init+0x2ec>)
 8001bcc:	f001 f95a 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;// DISABLE FUNCTIONALITY FOR INT1 & 2?
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4856      	ldr	r0, [pc, #344]	@ (8001d40 <MX_GPIO_Init+0x2f0>)
 8001be6:	f001 f94d 	bl	8002e84 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);///////////////////////////////////CONFIGURE NVIC//////////////////////////////////////////
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2006      	movs	r0, #6
 8001bf0:	f001 f911 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bf4:	2006      	movs	r0, #6
 8001bf6:	f001 f92a 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	484b      	ldr	r0, [pc, #300]	@ (8001d40 <MX_GPIO_Init+0x2f0>)
 8001c12:	f001 f937 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c16:	2320      	movs	r3, #32
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4844      	ldr	r0, [pc, #272]	@ (8001d3c <MX_GPIO_Init+0x2ec>)
 8001c2c:	f001 f92a 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c30:	2304      	movs	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4843      	ldr	r0, [pc, #268]	@ (8001d50 <MX_GPIO_Init+0x300>)
 8001c44:	f001 f91e 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001c48:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4838      	ldr	r0, [pc, #224]	@ (8001d48 <MX_GPIO_Init+0x2f8>)
 8001c66:	f001 f90d 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001c6a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4833      	ldr	r0, [pc, #204]	@ (8001d54 <MX_GPIO_Init+0x304>)
 8001c88:	f001 f8fc 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001c8c:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4829      	ldr	r0, [pc, #164]	@ (8001d50 <MX_GPIO_Init+0x300>)
 8001caa:	f001 f8eb 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4823      	ldr	r0, [pc, #140]	@ (8001d50 <MX_GPIO_Init+0x300>)
 8001cc4:	f001 f8de 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001cc8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cda:	230c      	movs	r3, #12
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4817      	ldr	r0, [pc, #92]	@ (8001d44 <MX_GPIO_Init+0x2f4>)
 8001ce6:	f001 f8cd 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001cea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4811      	ldr	r0, [pc, #68]	@ (8001d44 <MX_GPIO_Init+0x2f4>)
 8001d00:	f001 f8c0 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001d04:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <MX_GPIO_Init+0x2f4>)
 8001d1e:	f001 f8b1 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d22:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d34:	2307      	movs	r3, #7
 8001d36:	e00f      	b.n	8001d58 <MX_GPIO_Init+0x308>
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4812      	ldr	r0, [pc, #72]	@ (8001dac <MX_GPIO_Init+0x35c>)
 8001d62:	f001 f88f 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d66:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <MX_GPIO_Init+0x360>)
 8001d80:	f001 f880 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001d84:	2360      	movs	r3, #96	@ 0x60
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d94:	230c      	movs	r3, #12
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_GPIO_Init+0x364>)
 8001da0:	f001 f870 	bl	8002e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da4:	bf00      	nop
 8001da6:	3738      	adds	r7, #56	@ 0x38
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40020400 	.word	0x40020400

08001db8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPressTime = 0;
	if (HAL_GetTick() - lastPressTime < 200) return;
 8001dc2:	f000 ff1d 	bl	8002c00 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2bc7      	cmp	r3, #199	@ 0xc7
 8001dd0:	d93f      	bls.n	8001e52 <HAL_GPIO_EXTI_Callback+0x9a>
	lastPressTime = HAL_GetTick();
 8001dd2:	f000 ff15 	bl	8002c00 <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001dda:	6013      	str	r3, [r2, #0]

    if (GPIO_Pin == GPIO_PIN_0) {
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d133      	bne.n	8001e4a <HAL_GPIO_EXTI_Callback+0x92>
        int placedRow = placeCoin(board, currentColumn, currentPlayer);
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0xac>)
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4619      	mov	r1, r3
 8001dec:	481e      	ldr	r0, [pc, #120]	@ (8001e68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001dee:	f7ff f8a4 	bl	8000f3a <placeCoin>
 8001df2:	60f8      	str	r0, [r7, #12]
        if (placedRow != -1) { // THIS CHECKS IF ROW IS FULL, IT WON'T PLACE THE COIN IF THE ROW IS FULL
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfa:	d026      	beq.n	8001e4a <HAL_GPIO_EXTI_Callback+0x92>
            int result = checkWinOrTie(board, placedRow, currentColumn, currentPlayer);
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	4818      	ldr	r0, [pc, #96]	@ (8001e68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e08:	f7ff f8c9 	bl	8000f9e <checkWinOrTie>
 8001e0c:	60b8      	str	r0, [r7, #8]
            if (result == 1) {
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x6c>
                winner = currentPlayer;
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e1a:	6013      	str	r3, [r2, #0]
                gameOver = 1;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e012      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x92>
            } else if (result == 2) {
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d106      	bne.n	8001e38 <HAL_GPIO_EXTI_Callback+0x80>
                winner = 0; // TIE
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
                gameOver = 1;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e008      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x92>
            } else {
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_GPIO_EXTI_Callback+0x8c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_EXTI_Callback+0x8e>
 8001e44:	2301      	movs	r3, #1
 8001e46:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e48:	6013      	str	r3, [r2, #0]
            }
        }
    }
    LCD_DrawGameBoard(board);
 8001e4a:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e4c:	f7fe fee8 	bl	8000c20 <LCD_DrawGameBoard>
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GetTick() - lastPressTime < 200) return;
 8001e52:	bf00      	nop
}
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20025c40 	.word	0x20025c40
 8001e60:	20000014 	.word	0x20000014
 8001e64:	20000010 	.word	0x20000010
 8001e68:	20025b80 	.word	0x20025b80
 8001e6c:	20025c30 	.word	0x20025c30
 8001e70:	20025c2c 	.word	0x20025c2c

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <Error_Handler+0x8>

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f000 ff9e 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <HAL_I2C_MspInit+0xc4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d14b      	bne.n	8001f8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4815      	ldr	r0, [pc, #84]	@ (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f48:	f000 ff9c 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <HAL_I2C_MspInit+0xd0>)
 8001f6a:	f000 ff8b 	bl	8002e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a08      	ldr	r2, [pc, #32]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	@ 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40005c00 	.word	0x40005c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b09a      	sub	sp, #104	@ 0x68
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc0:	2230      	movs	r2, #48	@ 0x30
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 f9d3 	bl	8006370 <memset>
  if(hltdc->Instance==LTDC)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a81      	ldr	r2, [pc, #516]	@ (80021d4 <HAL_LTDC_MspInit+0x230>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f040 80fb 	bne.w	80021cc <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001fda:	23c8      	movs	r3, #200	@ 0xc8
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001fe2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 f9fd 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001ff8:	f7ff ff3c 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	4b75      	ldr	r3, [pc, #468]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	4a74      	ldr	r2, [pc, #464]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800200a:	6453      	str	r3, [r2, #68]	@ 0x44
 800200c:	4b72      	ldr	r3, [pc, #456]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	4b6e      	ldr	r3, [pc, #440]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	4a6d      	ldr	r2, [pc, #436]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	6313      	str	r3, [r2, #48]	@ 0x30
 8002028:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a66      	ldr	r2, [pc, #408]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b64      	ldr	r3, [pc, #400]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	4a5f      	ldr	r2, [pc, #380]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002060:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b56      	ldr	r3, [pc, #344]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	4b52      	ldr	r3, [pc, #328]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	4a51      	ldr	r2, [pc, #324]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6313      	str	r3, [r2, #48]	@ 0x30
 8002098:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b4b      	ldr	r3, [pc, #300]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b4:	4b48      	ldr	r3, [pc, #288]	@ (80021d8 <HAL_LTDC_MspInit+0x234>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80020c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d2:	230e      	movs	r3, #14
 80020d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020da:	4619      	mov	r1, r3
 80020dc:	483f      	ldr	r0, [pc, #252]	@ (80021dc <HAL_LTDC_MspInit+0x238>)
 80020de:	f000 fed1 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020e2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80020e6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f4:	230e      	movs	r3, #14
 80020f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020fc:	4619      	mov	r1, r3
 80020fe:	4838      	ldr	r0, [pc, #224]	@ (80021e0 <HAL_LTDC_MspInit+0x23c>)
 8002100:	f000 fec0 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002104:	2303      	movs	r3, #3
 8002106:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002114:	2309      	movs	r3, #9
 8002116:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211c:	4619      	mov	r1, r3
 800211e:	4831      	ldr	r0, [pc, #196]	@ (80021e4 <HAL_LTDC_MspInit+0x240>)
 8002120:	f000 feb0 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002124:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002128:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002136:	230e      	movs	r3, #14
 8002138:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800213e:	4619      	mov	r1, r3
 8002140:	4828      	ldr	r0, [pc, #160]	@ (80021e4 <HAL_LTDC_MspInit+0x240>)
 8002142:	f000 fe9f 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002146:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800214a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002158:	230e      	movs	r3, #14
 800215a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800215c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002160:	4619      	mov	r1, r3
 8002162:	4821      	ldr	r0, [pc, #132]	@ (80021e8 <HAL_LTDC_MspInit+0x244>)
 8002164:	f000 fe8e 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002168:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800216c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800217a:	230e      	movs	r3, #14
 800217c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002182:	4619      	mov	r1, r3
 8002184:	4819      	ldr	r0, [pc, #100]	@ (80021ec <HAL_LTDC_MspInit+0x248>)
 8002186:	f000 fe7d 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800218a:	2348      	movs	r3, #72	@ 0x48
 800218c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800219a:	230e      	movs	r3, #14
 800219c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021a2:	4619      	mov	r1, r3
 80021a4:	4812      	ldr	r0, [pc, #72]	@ (80021f0 <HAL_LTDC_MspInit+0x24c>)
 80021a6:	f000 fe6d 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80021aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021bc:	2309      	movs	r3, #9
 80021be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c4:	4619      	mov	r1, r3
 80021c6:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <HAL_LTDC_MspInit+0x244>)
 80021c8:	f000 fe5c 	bl	8002e84 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021cc:	bf00      	nop
 80021ce:	3768      	adds	r7, #104	@ 0x68
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40016800 	.word	0x40016800
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40020c00 	.word	0x40020c00

080021f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_RNG_MspInit+0x3c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10d      	bne.n	8002222 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_RNG_MspInit+0x40>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_RNG_MspInit+0x40>)
 8002210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002214:	6353      	str	r3, [r2, #52]	@ 0x34
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_RNG_MspInit+0x40>)
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	50060800 	.word	0x50060800
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_SPI_MspInit+0x84>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12c      	bne.n	80022b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a10      	ldr	r2, [pc, #64]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002292:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022a4:	2305      	movs	r3, #5
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <HAL_SPI_MspInit+0x8c>)
 80022b0:	f000 fde8 	bl	8002e84 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	@ 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40015000 	.word	0x40015000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40021400 	.word	0x40021400

080022c8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <HAL_SPI_MspDeInit+0x30>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10a      	bne.n	80022f0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_SPI_MspDeInit+0x34>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_SPI_MspDeInit+0x34>)
 80022e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80022e6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <HAL_SPI_MspDeInit+0x38>)
 80022ec:	f000 ff76 	bl	80031dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40015000 	.word	0x40015000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021400 	.word	0x40021400

08002304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d10d      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_TIM_Base_MspInit+0x3c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_TIM_Base_MspInit+0x3c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_TIM_Base_MspInit+0x3c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <NMI_Handler+0x4>

0800234c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <MemManage_Handler+0x4>

0800235c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <UsageFault_Handler+0x4>

0800236c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239a:	f000 fc1d 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f001 f83e 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80023b6:	f000 f9cd 	bl	8002754 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80023ba:	f000 f98d 	bl	80026d8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80023be:	2202      	movs	r2, #2
 80023c0:	2103      	movs	r1, #3
 80023c2:	2082      	movs	r0, #130	@ 0x82
 80023c4:	f000 fa1a 	bl	80027fc <I2C3_Write>
    HAL_Delay(5);
 80023c8:	2005      	movs	r0, #5
 80023ca:	f000 fc25 	bl	8002c18 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2103      	movs	r1, #3
 80023d2:	2082      	movs	r0, #130	@ 0x82
 80023d4:	f000 fa12 	bl	80027fc <I2C3_Write>
    HAL_Delay(2);
 80023d8:	2002      	movs	r0, #2
 80023da:	f000 fc1d 	bl	8002c18 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80023de:	1cba      	adds	r2, r7, #2
 80023e0:	2302      	movs	r3, #2
 80023e2:	2100      	movs	r1, #0
 80023e4:	2082      	movs	r0, #130	@ 0x82
 80023e6:	f000 fa59 	bl	800289c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	f640 0211 	movw	r2, #2065	@ 0x811
 8002402:	4293      	cmp	r3, r2
 8002404:	d001      	beq.n	800240a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002406:	2303      	movs	r3, #3
 8002408:	e075      	b.n	80024f6 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800240a:	2202      	movs	r2, #2
 800240c:	2103      	movs	r1, #3
 800240e:	2082      	movs	r0, #130	@ 0x82
 8002410:	f000 f9f4 	bl	80027fc <I2C3_Write>
    HAL_Delay(5);
 8002414:	2005      	movs	r0, #5
 8002416:	f000 fbff 	bl	8002c18 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800241a:	2200      	movs	r2, #0
 800241c:	2103      	movs	r1, #3
 800241e:	2082      	movs	r0, #130	@ 0x82
 8002420:	f000 f9ec 	bl	80027fc <I2C3_Write>
    HAL_Delay(2);
 8002424:	2002      	movs	r0, #2
 8002426:	f000 fbf7 	bl	8002c18 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800242a:	2004      	movs	r0, #4
 800242c:	f000 f867 	bl	80024fe <STMPE811_Read>
 8002430:	4603      	mov	r3, r0
 8002432:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002434:	797b      	ldrb	r3, [r7, #5]
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800243c:	797b      	ldrb	r3, [r7, #5]
 800243e:	461a      	mov	r2, r3
 8002440:	2104      	movs	r1, #4
 8002442:	2082      	movs	r0, #130	@ 0x82
 8002444:	f000 f9da 	bl	80027fc <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002448:	2004      	movs	r0, #4
 800244a:	f000 f858 	bl	80024fe <STMPE811_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002452:	797b      	ldrb	r3, [r7, #5]
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800245a:	797b      	ldrb	r3, [r7, #5]
 800245c:	461a      	mov	r2, r3
 800245e:	2104      	movs	r1, #4
 8002460:	2082      	movs	r0, #130	@ 0x82
 8002462:	f000 f9cb 	bl	80027fc <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002466:	2249      	movs	r2, #73	@ 0x49
 8002468:	2120      	movs	r1, #32
 800246a:	2082      	movs	r0, #130	@ 0x82
 800246c:	f000 f9c6 	bl	80027fc <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002470:	2002      	movs	r0, #2
 8002472:	f000 fbd1 	bl	8002c18 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002476:	2201      	movs	r2, #1
 8002478:	2121      	movs	r1, #33	@ 0x21
 800247a:	2082      	movs	r0, #130	@ 0x82
 800247c:	f000 f9be 	bl	80027fc <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002480:	2017      	movs	r0, #23
 8002482:	f000 f83c 	bl	80024fe <STMPE811_Read>
 8002486:	4603      	mov	r3, r0
 8002488:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800248a:	797b      	ldrb	r3, [r7, #5]
 800248c:	f043 031e 	orr.w	r3, r3, #30
 8002490:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002492:	797b      	ldrb	r3, [r7, #5]
 8002494:	461a      	mov	r2, r3
 8002496:	2117      	movs	r1, #23
 8002498:	2082      	movs	r0, #130	@ 0x82
 800249a:	f000 f9af 	bl	80027fc <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800249e:	229a      	movs	r2, #154	@ 0x9a
 80024a0:	2141      	movs	r1, #65	@ 0x41
 80024a2:	2082      	movs	r0, #130	@ 0x82
 80024a4:	f000 f9aa 	bl	80027fc <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80024a8:	2201      	movs	r2, #1
 80024aa:	214a      	movs	r1, #74	@ 0x4a
 80024ac:	2082      	movs	r0, #130	@ 0x82
 80024ae:	f000 f9a5 	bl	80027fc <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80024b2:	2201      	movs	r2, #1
 80024b4:	214b      	movs	r1, #75	@ 0x4b
 80024b6:	2082      	movs	r0, #130	@ 0x82
 80024b8:	f000 f9a0 	bl	80027fc <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80024bc:	2200      	movs	r2, #0
 80024be:	214b      	movs	r1, #75	@ 0x4b
 80024c0:	2082      	movs	r0, #130	@ 0x82
 80024c2:	f000 f99b 	bl	80027fc <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80024c6:	2201      	movs	r2, #1
 80024c8:	2156      	movs	r1, #86	@ 0x56
 80024ca:	2082      	movs	r0, #130	@ 0x82
 80024cc:	f000 f996 	bl	80027fc <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2158      	movs	r1, #88	@ 0x58
 80024d4:	2082      	movs	r0, #130	@ 0x82
 80024d6:	f000 f991 	bl	80027fc <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80024da:	2203      	movs	r2, #3
 80024dc:	2140      	movs	r1, #64	@ 0x40
 80024de:	2082      	movs	r0, #130	@ 0x82
 80024e0:	f000 f98c 	bl	80027fc <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80024e4:	22ff      	movs	r2, #255	@ 0xff
 80024e6:	210b      	movs	r1, #11
 80024e8:	2082      	movs	r0, #130	@ 0x82
 80024ea:	f000 f987 	bl	80027fc <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80024ee:	20c8      	movs	r0, #200	@ 0xc8
 80024f0:	f000 fb92 	bl	8002c18 <HAL_Delay>

    return STMPE811_State_Ok;
 80024f4:	2302      	movs	r3, #2

}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002508:	f107 020f 	add.w	r2, r7, #15
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4619      	mov	r1, r3
 8002510:	2082      	movs	r0, #130	@ 0x82
 8002512:	f000 f99d 	bl	8002850 <I2C3_Read>

    return readData;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791a      	ldrb	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002530:	2040      	movs	r0, #64	@ 0x40
 8002532:	f7ff ffe4 	bl	80024fe <STMPE811_Read>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0e      	blt.n	8002560 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002548:	2201      	movs	r2, #1
 800254a:	214b      	movs	r1, #75	@ 0x4b
 800254c:	2082      	movs	r0, #130	@ 0x82
 800254e:	f000 f955 	bl	80027fc <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002552:	2200      	movs	r2, #0
 8002554:	214b      	movs	r1, #75	@ 0x4b
 8002556:	2082      	movs	r0, #130	@ 0x82
 8002558:	f000 f950 	bl	80027fc <I2C3_Write>

        return STMPE811_State_Released;
 800255c:	2301      	movs	r3, #1
 800255e:	e0a7      	b.n	80026b0 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	799b      	ldrb	r3, [r3, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d117      	bne.n	8002598 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f9b7 	bl	80028e0 <TM_STMPE811_ReadX>
 8002572:	4603      	mov	r3, r0
 8002574:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	885b      	ldrh	r3, [r3, #2]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fa0a 	bl	800299c <TM_STMPE811_ReadY>
 8002588:	4603      	mov	r3, r0
 800258a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800258e:	3301      	adds	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	805a      	strh	r2, [r3, #2]
 8002596:	e048      	b.n	800262a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	799b      	ldrb	r3, [r3, #6]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d112      	bne.n	80025c6 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f99b 	bl	80028e0 <TM_STMPE811_ReadX>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f9f0 	bl	800299c <TM_STMPE811_ReadY>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	805a      	strh	r2, [r3, #2]
 80025c4:	e031      	b.n	800262a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	799b      	ldrb	r3, [r3, #6]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d115      	bne.n	80025fa <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f984 	bl	80028e0 <TM_STMPE811_ReadX>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f9d9 	bl	800299c <TM_STMPE811_ReadY>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	e017      	b.n	800262a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d113      	bne.n	800262a <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f96a 	bl	80028e0 <TM_STMPE811_ReadX>
 800260c:	4603      	mov	r3, r0
 800260e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f9bd 	bl	800299c <TM_STMPE811_ReadY>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800262a:	2201      	movs	r2, #1
 800262c:	214b      	movs	r1, #75	@ 0x4b
 800262e:	2082      	movs	r0, #130	@ 0x82
 8002630:	f000 f8e4 	bl	80027fc <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002634:	2200      	movs	r2, #0
 8002636:	214b      	movs	r1, #75	@ 0x4b
 8002638:	2082      	movs	r0, #130	@ 0x82
 800263a:	f000 f8df 	bl	80027fc <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <STMPE811_ReadTouch+0x12e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d115      	bne.n	800267a <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d027      	beq.n	80026a6 <STMPE811_ReadTouch+0x186>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	2bee      	cmp	r3, #238	@ 0xee
 800265c:	d823      	bhi.n	80026a6 <STMPE811_ReadTouch+0x186>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	885b      	ldrh	r3, [r3, #2]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01f      	beq.n	80026a6 <STMPE811_ReadTouch+0x186>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	885b      	ldrh	r3, [r3, #2]
 800266a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800266e:	d81a      	bhi.n	80026a6 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002676:	2300      	movs	r3, #0
 8002678:	e01a      	b.n	80026b0 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <STMPE811_ReadTouch+0x188>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800268a:	d80d      	bhi.n	80026a8 <STMPE811_ReadTouch+0x188>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	885b      	ldrh	r3, [r3, #2]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <STMPE811_ReadTouch+0x188>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	885b      	ldrh	r3, [r3, #2]
 8002698:	2bee      	cmp	r3, #238	@ 0xee
 800269a:	d805      	bhi.n	80026a8 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e004      	b.n	80026b0 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80026a6:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20025c98 	.word	0x20025c98

080026d8 <I2C3_Init>:

static void I2C3_Init()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <I2C3_Init+0x6c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <I2C3_Init+0x6c>)
 80026e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <I2C3_Init+0x6c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <I2C3_Init+0x70>)
 80026fc:	4a13      	ldr	r2, [pc, #76]	@ (800274c <I2C3_Init+0x74>)
 80026fe:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <I2C3_Init+0x70>)
 8002702:	4a13      	ldr	r2, [pc, #76]	@ (8002750 <I2C3_Init+0x78>)
 8002704:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <I2C3_Init+0x70>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <I2C3_Init+0x70>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <I2C3_Init+0x70>)
 8002714:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002718:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <I2C3_Init+0x70>)
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002720:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <I2C3_Init+0x70>)
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002726:	4808      	ldr	r0, [pc, #32]	@ (8002748 <I2C3_Init+0x70>)
 8002728:	f000 fe96 	bl	8003458 <HAL_I2C_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <I2C3_Init+0x5e>
    }
    return;
 800273a:	bf00      	nop
}
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	20025c44 	.word	0x20025c44
 800274c:	40005c00 	.word	0x40005c00
 8002750:	000186a0 	.word	0x000186a0

08002754 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <I2C3_MspInit+0x9c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <I2C3_MspInit+0x9c>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <I2C3_MspInit+0x9c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <I2C3_MspInit+0x9c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <I2C3_MspInit+0x9c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <I2C3_MspInit+0x9c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027b4:	2304      	movs	r3, #4
 80027b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	480d      	ldr	r0, [pc, #52]	@ (80027f4 <I2C3_MspInit+0xa0>)
 80027c0:	f000 fb60 	bl	8002e84 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80027c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ca:	2312      	movs	r3, #18
 80027cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027d6:	2304      	movs	r3, #4
 80027d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <I2C3_MspInit+0xa4>)
 80027e2:	f000 fb4f 	bl	8002e84 <HAL_GPIO_Init>
    
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020000 	.word	0x40020000

080027fc <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af04      	add	r7, sp, #16
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
 8002806:	460b      	mov	r3, r1
 8002808:	717b      	strb	r3, [r7, #5]
 800280a:	4613      	mov	r3, r2
 800280c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800280e:	793b      	ldrb	r3, [r7, #4]
 8002810:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002812:	797b      	ldrb	r3, [r7, #5]
 8002814:	b29a      	uxth	r2, r3
 8002816:	88f9      	ldrh	r1, [r7, #6]
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <I2C3_Write+0x48>)
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2301      	movs	r3, #1
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f107 030f 	add.w	r3, r7, #15
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	4807      	ldr	r0, [pc, #28]	@ (8002848 <I2C3_Write+0x4c>)
 800282a:	f000 ff59 	bl	80036e0 <HAL_I2C_Mem_Write>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <I2C3_Write+0x50>)
 8002834:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002836:	f7ff ff3f 	bl	80026b8 <verifyHAL_I2C_IS_OKAY>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	0003d090 	.word	0x0003d090
 8002848:	20025c44 	.word	0x20025c44
 800284c:	20025c98 	.word	0x20025c98

08002850 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af04      	add	r7, sp, #16
 8002856:	4603      	mov	r3, r0
 8002858:	603a      	str	r2, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	460b      	mov	r3, r1
 800285e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	b299      	uxth	r1, r3
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <I2C3_Read+0x40>)
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2301      	movs	r3, #1
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	4807      	ldr	r0, [pc, #28]	@ (8002894 <I2C3_Read+0x44>)
 8002878:	f001 f82c 	bl	80038d4 <HAL_I2C_Mem_Read>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <I2C3_Read+0x48>)
 8002882:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002884:	f7ff ff18 	bl	80026b8 <verifyHAL_I2C_IS_OKAY>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	0003d090 	.word	0x0003d090
 8002894:	20025c44 	.word	0x20025c44
 8002898:	20025c98 	.word	0x20025c98

0800289c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af04      	add	r7, sp, #16
 80028a2:	603a      	str	r2, [r7, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	460b      	mov	r3, r1
 80028ac:	71bb      	strb	r3, [r7, #6]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	b299      	uxth	r1, r3
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <I2C3_MulitByteRead+0x3c>)
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	88bb      	ldrh	r3, [r7, #4]
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2301      	movs	r3, #1
 80028c8:	4804      	ldr	r0, [pc, #16]	@ (80028dc <I2C3_MulitByteRead+0x40>)
 80028ca:	f001 f803 	bl	80038d4 <HAL_I2C_Mem_Read>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	0003d090 	.word	0x0003d090
 80028dc:	20025c44 	.word	0x20025c44

080028e0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80028ea:	204d      	movs	r0, #77	@ 0x4d
 80028ec:	f7ff fe07 	bl	80024fe <STMPE811_Read>
 80028f0:	4603      	mov	r3, r0
 80028f2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80028f4:	204e      	movs	r0, #78	@ 0x4e
 80028f6:	f7ff fe02 	bl	80024fe <STMPE811_Read>
 80028fa:	4603      	mov	r3, r0
 80028fc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80028fe:	7a7b      	ldrb	r3, [r7, #9]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21a      	sxth	r2, r3
 8002904:	7a3b      	ldrb	r3, [r7, #8]
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800290c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002910:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002914:	4293      	cmp	r3, r2
 8002916:	dc06      	bgt.n	8002926 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800291e:	330c      	adds	r3, #12
 8002920:	b29b      	uxth	r3, r3
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	e005      	b.n	8002932 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002926:	89fb      	ldrh	r3, [r7, #14]
 8002928:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800292c:	3308      	adds	r3, #8
 800292e:	b29b      	uxth	r3, r3
 8002930:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002936:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <TM_STMPE811_ReadX+0xb8>)
 8002938:	fb82 1203 	smull	r1, r2, r2, r3
 800293c:	441a      	add	r2, r3
 800293e:	10d2      	asrs	r2, r2, #3
 8002940:	17db      	asrs	r3, r3, #31
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294a:	2bef      	cmp	r3, #239	@ 0xef
 800294c:	dd02      	ble.n	8002954 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800294e:	23ef      	movs	r3, #239	@ 0xef
 8002950:	81fb      	strh	r3, [r7, #14]
 8002952:	e005      	b.n	8002960 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da01      	bge.n	8002960 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002960:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	429a      	cmp	r2, r3
 8002968:	dd05      	ble.n	8002976 <TM_STMPE811_ReadX+0x96>
 800296a:	89fa      	ldrh	r2, [r7, #14]
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	b21b      	sxth	r3, r3
 8002974:	e004      	b.n	8002980 <TM_STMPE811_ReadX+0xa0>
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	b29b      	uxth	r3, r3
 800297e:	b21b      	sxth	r3, r3
 8002980:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002982:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002986:	2b04      	cmp	r3, #4
 8002988:	dd01      	ble.n	800298e <TM_STMPE811_ReadX+0xae>
        return val;
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	e000      	b.n	8002990 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800298e:	88fb      	ldrh	r3, [r7, #6]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	88888889 	.word	0x88888889

0800299c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80029a6:	204f      	movs	r0, #79	@ 0x4f
 80029a8:	f7ff fda9 	bl	80024fe <STMPE811_Read>
 80029ac:	4603      	mov	r3, r0
 80029ae:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80029b0:	2050      	movs	r0, #80	@ 0x50
 80029b2:	f7ff fda4 	bl	80024fe <STMPE811_Read>
 80029b6:	4603      	mov	r3, r0
 80029b8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029ba:	7a7b      	ldrb	r3, [r7, #9]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21a      	sxth	r2, r3
 80029c0:	7a3b      	ldrb	r3, [r7, #8]
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80029d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029d6:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <TM_STMPE811_ReadY+0xa0>)
 80029d8:	fb82 1203 	smull	r1, r2, r2, r3
 80029dc:	1052      	asrs	r2, r2, #1
 80029de:	17db      	asrs	r3, r3, #31
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80029e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	dc02      	bgt.n	80029f2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	81fb      	strh	r3, [r7, #14]
 80029f0:	e007      	b.n	8002a02 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80029f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80029fa:	db02      	blt.n	8002a02 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80029fc:	f240 133f 	movw	r3, #319	@ 0x13f
 8002a00:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002a02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dd05      	ble.n	8002a18 <TM_STMPE811_ReadY+0x7c>
 8002a0c:	89fa      	ldrh	r2, [r7, #14]
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	e004      	b.n	8002a22 <TM_STMPE811_ReadY+0x86>
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002a24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	dd01      	ble.n	8002a30 <TM_STMPE811_ReadY+0x94>
        return val;
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	e000      	b.n	8002a32 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002a30:	88fb      	ldrh	r3, [r7, #6]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2e8ba2e9 	.word	0x2e8ba2e9

08002a40 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f003 fc7e 	bl	8006380 <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20030000 	.word	0x20030000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	20025c9c 	.word	0x20025c9c
 8002ab8:	20025df0 	.word	0x20025df0

08002abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ae4:	f7ff ffea 	bl	8002abc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f003 fc3d 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b12:	f7fe fd1d 	bl	8001550 <main>
  bx  lr    
 8002b16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002b24:	08007ec8 	.word	0x08007ec8
  ldr r2, =_sbss
 8002b28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002b2c:	20025dec 	.word	0x20025dec

08002b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 f94f 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff f98a 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f967 	bl	8002e6a <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 f92f 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	@ (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000018 	.word	0x20000018
 8002bd0:	20000020 	.word	0x20000020
 8002bd4:	2000001c 	.word	0x2000001c

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000020 	.word	0x20000020
 8002bfc:	20025ca0 	.word	0x20025ca0

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20025ca0 	.word	0x20025ca0

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000020 	.word	0x20000020

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	@ (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e177      	b.n	8003190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 8166 	bne.w	800318a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d005      	beq.n	8002ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d130      	bne.n	8002f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 0201 	and.w	r2, r3, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d017      	beq.n	8002f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d123      	bne.n	8002fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3208      	adds	r2, #8
 8002fc2:	69b9      	ldr	r1, [r7, #24]
 8002fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0203 	and.w	r2, r3, #3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80c0 	beq.w	800318a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	4b66      	ldr	r3, [pc, #408]	@ (80031a8 <HAL_GPIO_Init+0x324>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4a65      	ldr	r2, [pc, #404]	@ (80031a8 <HAL_GPIO_Init+0x324>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003018:	6453      	str	r3, [r2, #68]	@ 0x44
 800301a:	4b63      	ldr	r3, [pc, #396]	@ (80031a8 <HAL_GPIO_Init+0x324>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003026:	4a61      	ldr	r2, [pc, #388]	@ (80031ac <HAL_GPIO_Init+0x328>)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a58      	ldr	r2, [pc, #352]	@ (80031b0 <HAL_GPIO_Init+0x32c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d037      	beq.n	80030c2 <HAL_GPIO_Init+0x23e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a57      	ldr	r2, [pc, #348]	@ (80031b4 <HAL_GPIO_Init+0x330>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_GPIO_Init+0x23a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a56      	ldr	r2, [pc, #344]	@ (80031b8 <HAL_GPIO_Init+0x334>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02b      	beq.n	80030ba <HAL_GPIO_Init+0x236>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a55      	ldr	r2, [pc, #340]	@ (80031bc <HAL_GPIO_Init+0x338>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d025      	beq.n	80030b6 <HAL_GPIO_Init+0x232>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a54      	ldr	r2, [pc, #336]	@ (80031c0 <HAL_GPIO_Init+0x33c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01f      	beq.n	80030b2 <HAL_GPIO_Init+0x22e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a53      	ldr	r2, [pc, #332]	@ (80031c4 <HAL_GPIO_Init+0x340>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d019      	beq.n	80030ae <HAL_GPIO_Init+0x22a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a52      	ldr	r2, [pc, #328]	@ (80031c8 <HAL_GPIO_Init+0x344>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0x226>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a51      	ldr	r2, [pc, #324]	@ (80031cc <HAL_GPIO_Init+0x348>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_Init+0x222>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a50      	ldr	r2, [pc, #320]	@ (80031d0 <HAL_GPIO_Init+0x34c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_Init+0x21e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4f      	ldr	r2, [pc, #316]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_Init+0x21a>
 800309a:	2309      	movs	r3, #9
 800309c:	e012      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 800309e:	230a      	movs	r3, #10
 80030a0:	e010      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030a2:	2308      	movs	r3, #8
 80030a4:	e00e      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030a6:	2307      	movs	r3, #7
 80030a8:	e00c      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030aa:	2306      	movs	r3, #6
 80030ac:	e00a      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030c2:	2300      	movs	r3, #0
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d4:	4935      	ldr	r1, [pc, #212]	@ (80031ac <HAL_GPIO_Init+0x328>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e2:	4b3d      	ldr	r3, [pc, #244]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003106:	4a34      	ldr	r2, [pc, #208]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800310c:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003130:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003136:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315a:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003160:	4b1d      	ldr	r3, [pc, #116]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <HAL_GPIO_Init+0x354>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f ae84 	bls.w	8002ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3724      	adds	r7, #36	@ 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40021c00 	.word	0x40021c00
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40022400 	.word	0x40022400
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e0d9      	b.n	80033ac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	f040 80c9 	bne.w	80033a6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003214:	4a6b      	ldr	r2, [pc, #428]	@ (80033c4 <HAL_GPIO_DeInit+0x1e8>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a63      	ldr	r2, [pc, #396]	@ (80033c8 <HAL_GPIO_DeInit+0x1ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d037      	beq.n	80032ae <HAL_GPIO_DeInit+0xd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a62      	ldr	r2, [pc, #392]	@ (80033cc <HAL_GPIO_DeInit+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_GPIO_DeInit+0xce>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a61      	ldr	r2, [pc, #388]	@ (80033d0 <HAL_GPIO_DeInit+0x1f4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02b      	beq.n	80032a6 <HAL_GPIO_DeInit+0xca>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a60      	ldr	r2, [pc, #384]	@ (80033d4 <HAL_GPIO_DeInit+0x1f8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d025      	beq.n	80032a2 <HAL_GPIO_DeInit+0xc6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a5f      	ldr	r2, [pc, #380]	@ (80033d8 <HAL_GPIO_DeInit+0x1fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <HAL_GPIO_DeInit+0xc2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a5e      	ldr	r2, [pc, #376]	@ (80033dc <HAL_GPIO_DeInit+0x200>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d019      	beq.n	800329a <HAL_GPIO_DeInit+0xbe>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a5d      	ldr	r2, [pc, #372]	@ (80033e0 <HAL_GPIO_DeInit+0x204>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_DeInit+0xba>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a5c      	ldr	r2, [pc, #368]	@ (80033e4 <HAL_GPIO_DeInit+0x208>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_DeInit+0xb6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a5b      	ldr	r2, [pc, #364]	@ (80033e8 <HAL_GPIO_DeInit+0x20c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_DeInit+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a5a      	ldr	r2, [pc, #360]	@ (80033ec <HAL_GPIO_DeInit+0x210>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_DeInit+0xae>
 8003286:	2309      	movs	r3, #9
 8003288:	e012      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 800328a:	230a      	movs	r3, #10
 800328c:	e010      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 800328e:	2308      	movs	r3, #8
 8003290:	e00e      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 8003292:	2307      	movs	r3, #7
 8003294:	e00c      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 8003296:	2306      	movs	r3, #6
 8003298:	e00a      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 800329a:	2305      	movs	r3, #5
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 800329e:	2304      	movs	r3, #4
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_DeInit+0xd4>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d132      	bne.n	8003326 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032c0:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4949      	ldr	r1, [pc, #292]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032ce:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4946      	ldr	r1, [pc, #280]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032d8:	4013      	ands	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032dc:	4b44      	ldr	r3, [pc, #272]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	4942      	ldr	r1, [pc, #264]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032ea:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	493f      	ldr	r1, [pc, #252]	@ (80033f0 <HAL_GPIO_DeInit+0x214>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003308:	4a2e      	ldr	r2, [pc, #184]	@ (80033c4 <HAL_GPIO_DeInit+0x1e8>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	43da      	mvns	r2, r3
 8003318:	482a      	ldr	r0, [pc, #168]	@ (80033c4 <HAL_GPIO_DeInit+0x1e8>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	400a      	ands	r2, r1
 8003320:	3302      	adds	r3, #2
 8003322:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2103      	movs	r1, #3
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	08d2      	lsrs	r2, r2, #3
 800335c:	4019      	ands	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2103      	movs	r1, #3
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	2101      	movs	r1, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2103      	movs	r1, #3
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f af22 	bls.w	80031f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40022400 	.word	0x40022400
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003432:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fcb6 	bl	8001db8 <HAL_GPIO_EXTI_Callback>
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e12b      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fd26 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	@ 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034bc:	f001 ff82 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a81      	ldr	r2, [pc, #516]	@ (80036cc <HAL_I2C_Init+0x274>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d807      	bhi.n	80034dc <HAL_I2C_Init+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a80      	ldr	r2, [pc, #512]	@ (80036d0 <HAL_I2C_Init+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e006      	b.n	80034ea <HAL_I2C_Init+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a7d      	ldr	r2, [pc, #500]	@ (80036d4 <HAL_I2C_Init+0x27c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0e7      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a78      	ldr	r2, [pc, #480]	@ (80036d8 <HAL_I2C_Init+0x280>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a6a      	ldr	r2, [pc, #424]	@ (80036cc <HAL_I2C_Init+0x274>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d802      	bhi.n	800352c <HAL_I2C_Init+0xd4>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	e009      	b.n	8003540 <HAL_I2C_Init+0xe8>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a69      	ldr	r2, [pc, #420]	@ (80036dc <HAL_I2C_Init+0x284>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	3301      	adds	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003552:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	495c      	ldr	r1, [pc, #368]	@ (80036cc <HAL_I2C_Init+0x274>)
 800355c:	428b      	cmp	r3, r1
 800355e:	d819      	bhi.n	8003594 <HAL_I2C_Init+0x13c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e59      	subs	r1, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fbb1 f3f3 	udiv	r3, r1, r3
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_I2C_Init+0x138>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e59      	subs	r1, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fbb1 f3f3 	udiv	r3, r1, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	e051      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003590:	2304      	movs	r3, #4
 8003592:	e04f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_I2C_Init+0x168>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e012      	b.n	80035e6 <HAL_I2C_Init+0x18e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Init+0x196>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e022      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <HAL_I2C_Init+0x1bc>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e58      	subs	r0, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	fbb0 f3f3 	udiv	r3, r0, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003662:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6911      	ldr	r1, [r2, #16]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	000186a0 	.word	0x000186a0
 80036d0:	001e847f 	.word	0x001e847f
 80036d4:	003d08ff 	.word	0x003d08ff
 80036d8:	431bde83 	.word	0x431bde83
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036fa:	f7ff fa81 	bl	8002c00 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	f040 80d9 	bne.w	80038c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2319      	movs	r3, #25
 8003714:	2201      	movs	r2, #1
 8003716:	496d      	ldr	r1, [pc, #436]	@ (80038cc <HAL_I2C_Mem_Write+0x1ec>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fc8b 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
 8003726:	e0cc      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Mem_Write+0x56>
 8003732:	2302      	movs	r3, #2
 8003734:	e0c5      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d007      	beq.n	800375c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	@ 0x21
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a4d      	ldr	r2, [pc, #308]	@ (80038d0 <HAL_I2C_Mem_Write+0x1f0>)
 800379c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379e:	88f8      	ldrh	r0, [r7, #6]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4603      	mov	r3, r0
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fac2 	bl	8003d38 <I2C_RequestMemoryWrite>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d052      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fd50 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_I2C_Mem_Write+0x180>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1aa      	bne.n	80037be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fd43 	bl	80042f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e016      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000

080038d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	@ 0x30
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ee:	f7ff f987 	bl	8002c00 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8214 	bne.w	8003d2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2319      	movs	r3, #25
 8003908:	2201      	movs	r2, #1
 800390a:	497b      	ldr	r1, [pc, #492]	@ (8003af8 <HAL_I2C_Mem_Read+0x224>)
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fb91 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
 800391a:	e207      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_I2C_Mem_Read+0x56>
 8003926:	2302      	movs	r3, #2
 8003928:	e200      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d007      	beq.n	8003950 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2222      	movs	r2, #34	@ 0x22
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2240      	movs	r2, #64	@ 0x40
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a5b      	ldr	r2, [pc, #364]	@ (8003afc <HAL_I2C_Mem_Read+0x228>)
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003992:	88f8      	ldrh	r0, [r7, #6]
 8003994:	893a      	ldrh	r2, [r7, #8]
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4603      	mov	r3, r0
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa5e 	bl	8003e64 <I2C_RequestMemoryRead>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1bc      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d113      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e190      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11b      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e170      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d11b      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	e150      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a78:	e144      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	f200 80f1 	bhi.w	8003c66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d123      	bne.n	8003ad4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fc79 	bl	8004388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e145      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ad2:	e117      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d14e      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4906      	ldr	r1, [pc, #24]	@ (8003b00 <HAL_I2C_Mem_Read+0x22c>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 faa4 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e11a      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
 8003af6:	bf00      	nop
 8003af8:	00100002 	.word	0x00100002
 8003afc:	ffff0000 	.word	0xffff0000
 8003b00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b78:	e0c4      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	496c      	ldr	r1, [pc, #432]	@ (8003d34 <HAL_I2C_Mem_Read+0x460>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa55 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0cb      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4955      	ldr	r1, [pc, #340]	@ (8003d34 <HAL_I2C_Mem_Read+0x460>)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fa27 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e09d      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c64:	e04e      	b.n	8003d04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb8c 	bl	8004388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e058      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d124      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d107      	bne.n	8003cd2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f aeb6 	bne.w	8003a7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	@ 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010004 	.word	0x00010004

08003d38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f960 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d88:	d103      	bne.n	8003d92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e05f      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	492d      	ldr	r1, [pc, #180]	@ (8003e60 <I2C_RequestMemoryWrite+0x128>)
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9bb 	bl	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e04c      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa46 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d107      	bne.n	8003dfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e02b      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e021      	b.n	8003e54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e20:	6a39      	ldr	r1, [r7, #32]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fa20 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d107      	bne.n	8003e46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e005      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00010002 	.word	0x00010002

08003e64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8c2 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec4:	d103      	bne.n	8003ece <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0aa      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	4952      	ldr	r1, [pc, #328]	@ (8004030 <I2C_RequestMemoryRead+0x1cc>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f91d 	bl	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e097      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f9a8 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e076      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	e021      	b.n	8003f90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f982 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e050      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f92:	6a39      	ldr	r1, [r7, #32]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f967 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d107      	bne.n	8003fb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e035      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f82b 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff2:	d103      	bne.n	8003ffc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e013      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004000:	897b      	ldrh	r3, [r7, #10]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	4906      	ldr	r1, [pc, #24]	@ (8004030 <I2C_RequestMemoryRead+0x1cc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f886 	bl	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	00010002 	.word	0x00010002

08004034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004044:	e048      	b.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d044      	beq.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe fdd7 	bl	8002c00 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d139      	bne.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10d      	bne.n	800408a <I2C_WaitOnFlagUntilTimeout+0x56>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	e00c      	b.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	43da      	mvns	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d116      	bne.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e023      	b.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10d      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	e00c      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	43da      	mvns	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d093      	beq.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004136:	e071      	b.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d123      	bne.n	8004190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004156:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e067      	b.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d041      	beq.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004198:	f7fe fd32 	bl	8002c00 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d136      	bne.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e00b      	b.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	43da      	mvns	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e021      	b.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10c      	bne.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	43da      	mvns	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e00b      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	43da      	mvns	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f47f af6d 	bne.w	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004274:	e034      	b.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f8e3 	bl	8004442 <I2C_IsAcknowledgeFailed>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e034      	b.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d028      	beq.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe fcb7 	bl	8002c00 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11d      	bne.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	2b80      	cmp	r3, #128	@ 0x80
 80042b0:	d016      	beq.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b80      	cmp	r3, #128	@ 0x80
 80042ec:	d1c3      	bne.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004304:	e034      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f89b 	bl	8004442 <I2C_IsAcknowledgeFailed>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e034      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d028      	beq.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe fc6f 	bl	8002c00 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d11d      	bne.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d016      	beq.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e007      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d1c3      	bne.n	8004306 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004394:	e049      	b.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d119      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0210 	mvn.w	r2, #16
 80043ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e030      	b.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fe fc12 	bl	8002c00 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11d      	bne.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d016      	beq.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e007      	b.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d1ae      	bne.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004458:	d11b      	bne.n	8004492 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004462:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d129      	bne.n	800450a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	@ 0x24
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0210 	bic.w	r2, r2, #16
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b20      	cmp	r3, #32
 8004530:	d12a      	bne.n	8004588 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2224      	movs	r2, #36	@ 0x24
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	f023 030f 	bic.w	r3, r3, #15
 8004558:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	b29a      	uxth	r2, r3
 800455e:	89fb      	ldrh	r3, [r7, #14]
 8004560:	4313      	orrs	r3, r2
 8004562:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	89fa      	ldrh	r2, [r7, #14]
 800456a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004588:	2302      	movs	r3, #2
  }
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0bf      	b.n	800472a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fd fcf0 	bl	8001fa4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80045da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6999      	ldr	r1, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b4a      	ldr	r3, [pc, #296]	@ (8004734 <HAL_LTDC_Init+0x19c>)
 800460c:	400b      	ands	r3, r1
 800460e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b3e      	ldr	r3, [pc, #248]	@ (8004734 <HAL_LTDC_Init+0x19c>)
 800463a:	400b      	ands	r3, r1
 800463c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68d9      	ldr	r1, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b33      	ldr	r3, [pc, #204]	@ (8004734 <HAL_LTDC_Init+0x19c>)
 8004668:	400b      	ands	r3, r1
 800466a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	041b      	lsls	r3, r3, #16
 8004672:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4b27      	ldr	r3, [pc, #156]	@ (8004734 <HAL_LTDC_Init+0x19c>)
 8004696:	400b      	ands	r3, r1
 8004698:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6959      	ldr	r1, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80046da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0206 	orr.w	r2, r2, #6
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	f000f800 	.word	0xf000f800

08004738 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_LTDC_ConfigLayer+0x1a>
 800474e:	2302      	movs	r3, #2
 8004750:	e02c      	b.n	80047ac <HAL_LTDC_ConfigLayer+0x74>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2134      	movs	r1, #52	@ 0x34
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	4413      	add	r3, r2
 800476e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800477a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800477c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800477e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f811 	bl	80047b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bdb0      	pop	{r4, r5, r7, pc}

080047b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b089      	sub	sp, #36	@ 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	4413      	add	r3, r2
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	01db      	lsls	r3, r3, #7
 80047e0:	4413      	add	r3, r2
 80047e2:	3384      	adds	r3, #132	@ 0x84
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	4611      	mov	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	01d2      	lsls	r2, r2, #7
 80047f0:	440a      	add	r2, r1
 80047f2:	3284      	adds	r2, #132	@ 0x84
 80047f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800480a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800480c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	01db      	lsls	r3, r3, #7
 8004818:	440b      	add	r3, r1
 800481a:	3384      	adds	r3, #132	@ 0x84
 800481c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004822:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004832:	4413      	add	r3, r2
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	3384      	adds	r3, #132	@ 0x84
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	4611      	mov	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	01d2      	lsls	r2, r2, #7
 8004852:	440a      	add	r2, r1
 8004854:	3284      	adds	r2, #132	@ 0x84
 8004856:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800485a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486a:	4413      	add	r3, r2
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	440b      	add	r3, r1
 800487a:	3384      	adds	r3, #132	@ 0x84
 800487c:	4619      	mov	r1, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	4413      	add	r3, r2
 8004890:	3384      	adds	r3, #132	@ 0x84
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	4611      	mov	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	01d2      	lsls	r2, r2, #7
 800489e:	440a      	add	r2, r1
 80048a0:	3284      	adds	r2, #132	@ 0x84
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	4413      	add	r3, r2
 80048b4:	3384      	adds	r3, #132	@ 0x84
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	01db      	lsls	r3, r3, #7
 80048e4:	4413      	add	r3, r2
 80048e6:	3384      	adds	r3, #132	@ 0x84
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	4413      	add	r3, r2
 80048f6:	3384      	adds	r3, #132	@ 0x84
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004904:	461a      	mov	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	431a      	orrs	r2, r3
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	440b      	add	r3, r1
 800491a:	3384      	adds	r3, #132	@ 0x84
 800491c:	4619      	mov	r1, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	@ 0x84
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	01d2      	lsls	r2, r2, #7
 800493e:	440a      	add	r2, r1
 8004940:	3284      	adds	r2, #132	@ 0x84
 8004942:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004946:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	01db      	lsls	r3, r3, #7
 8004952:	4413      	add	r3, r2
 8004954:	3384      	adds	r3, #132	@ 0x84
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	4413      	add	r3, r2
 800496a:	3384      	adds	r3, #132	@ 0x84
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	4611      	mov	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	01d2      	lsls	r2, r2, #7
 8004978:	440a      	add	r2, r1
 800497a:	3284      	adds	r2, #132	@ 0x84
 800497c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	6809      	ldr	r1, [r1, #0]
 8004992:	4608      	mov	r0, r1
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	01c9      	lsls	r1, r1, #7
 8004998:	4401      	add	r1, r0
 800499a:	3184      	adds	r1, #132	@ 0x84
 800499c:	4313      	orrs	r3, r2
 800499e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	01db      	lsls	r3, r3, #7
 80049aa:	4413      	add	r3, r2
 80049ac:	3384      	adds	r3, #132	@ 0x84
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	01db      	lsls	r3, r3, #7
 80049ba:	4413      	add	r3, r2
 80049bc:	3384      	adds	r3, #132	@ 0x84
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	01db      	lsls	r3, r3, #7
 80049ce:	4413      	add	r3, r2
 80049d0:	3384      	adds	r3, #132	@ 0x84
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80049e2:	2304      	movs	r3, #4
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e01b      	b.n	8004a20 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80049f0:	2303      	movs	r3, #3
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	e014      	b.n	8004a20 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d00b      	beq.n	8004a16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d007      	beq.n	8004a16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d003      	beq.n	8004a16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a12:	2b07      	cmp	r3, #7
 8004a14:	d102      	bne.n	8004a1c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a16:	2302      	movs	r3, #2
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e001      	b.n	8004a20 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	01db      	lsls	r3, r3, #7
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3384      	adds	r3, #132	@ 0x84
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	4611      	mov	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	01d2      	lsls	r2, r2, #7
 8004a3a:	440a      	add	r2, r1
 8004a3c:	3284      	adds	r2, #132	@ 0x84
 8004a3e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	1acb      	subs	r3, r1, r3
 8004a5a:	69f9      	ldr	r1, [r7, #28]
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	6809      	ldr	r1, [r1, #0]
 8004a66:	4608      	mov	r0, r1
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	01c9      	lsls	r1, r1, #7
 8004a6c:	4401      	add	r1, r0
 8004a6e:	3184      	adds	r1, #132	@ 0x84
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	01db      	lsls	r3, r3, #7
 8004a7e:	4413      	add	r3, r2
 8004a80:	3384      	adds	r3, #132	@ 0x84
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	01d2      	lsls	r2, r2, #7
 8004a8e:	440a      	add	r2, r1
 8004a90:	3284      	adds	r2, #132	@ 0x84
 8004a92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a96:	f023 0307 	bic.w	r3, r3, #7
 8004a9a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3384      	adds	r3, #132	@ 0x84
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	4413      	add	r3, r2
 8004abe:	3384      	adds	r3, #132	@ 0x84
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	01d2      	lsls	r2, r2, #7
 8004acc:	440a      	add	r2, r1
 8004ace:	3284      	adds	r2, #132	@ 0x84
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3724      	adds	r7, #36	@ 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e267      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b02:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b82      	ldr	r3, [pc, #520]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b7e      	ldr	r3, [pc, #504]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e242      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b76      	ldr	r3, [pc, #472]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a75      	ldr	r2, [pc, #468]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b70      	ldr	r3, [pc, #448]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6c      	ldr	r2, [pc, #432]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b69      	ldr	r3, [pc, #420]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b66      	ldr	r3, [pc, #408]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f830 	bl	8002c00 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fe f82c 	bl	8002c00 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e207      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe f81c 	bl	8002c00 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fe f818 	bl	8002c00 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	@ 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1f3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	4b51      	ldr	r3, [pc, #324]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c06:	4b47      	ldr	r3, [pc, #284]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b44      	ldr	r3, [pc, #272]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	4b41      	ldr	r3, [pc, #260]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1c7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b3b      	ldr	r3, [pc, #236]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4937      	ldr	r1, [pc, #220]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	e03a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4b34      	ldr	r3, [pc, #208]	@ (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd ffd1 	bl	8002c00 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fd ffcd 	bl	8002c00 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1a8      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b28      	ldr	r3, [pc, #160]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4925      	ldr	r1, [pc, #148]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd ffb0 	bl	8002c00 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fd ffac 	bl	8002c00 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e187      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b15      	ldr	r3, [pc, #84]	@ (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fd ff90 	bl	8002c00 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fd ff8c 	bl	8002c00 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e167      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
 8004d02:	e01b      	b.n	8004d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b09      	ldr	r3, [pc, #36]	@ (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd ff79 	bl	8002c00 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd ff75 	bl	8002c00 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d907      	bls.n	8004d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e150      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470000 	.word	0x42470000
 8004d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b88      	ldr	r3, [pc, #544]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ea      	bne.n	8004d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8097 	beq.w	8004e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b81      	ldr	r3, [pc, #516]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	4a7c      	ldr	r2, [pc, #496]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b77      	ldr	r3, [pc, #476]	@ (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d118      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b74      	ldr	r3, [pc, #464]	@ (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	@ (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fd ff35 	bl	8002c00 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9a:	f7fd ff31 	bl	8002c00 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e10c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b6a      	ldr	r3, [pc, #424]	@ (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x2ea>
 8004dc0:	4b64      	ldr	r3, [pc, #400]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc4:	4a63      	ldr	r2, [pc, #396]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dda:	4a5e      	ldr	r2, [pc, #376]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004df0:	4b58      	ldr	r3, [pc, #352]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df4:	4a57      	ldr	r2, [pc, #348]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfc:	4b55      	ldr	r3, [pc, #340]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e00:	4a54      	ldr	r2, [pc, #336]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fd fef6 	bl	8002c00 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fd fef2 	bl	8002c00 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0cb      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b49      	ldr	r3, [pc, #292]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCC_OscConfig+0x334>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd fee0 	bl	8002c00 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fd fedc 	bl	8002c00 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0b5      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b39      	ldr	r3, [pc, #228]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	4a38      	ldr	r2, [pc, #224]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a1 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e82:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d05c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d141      	bne.n	8004f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	@ (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd feb0 	bl	8002c00 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd feac 	bl	8002c00 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e087      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	491b      	ldr	r1, [pc, #108]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fd fe85 	bl	8002c00 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fd fe81 	bl	8002c00 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x416>
 8004f18:	e054      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fe6e 	bl	8002c00 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd fe6a 	bl	8002c00 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e045      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x444>
 8004f46:	e03d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e038      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d121      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cc      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b68      	ldr	r3, [pc, #416]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3f      	ldr	r3, [pc, #252]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e067      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b37      	ldr	r3, [pc, #220]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4934      	ldr	r1, [pc, #208]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fd fd9c 	bl	8002c00 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fd fd98 	bl	8002c00 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b25      	ldr	r3, [pc, #148]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	@ (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b12      	ldr	r3, [pc, #72]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	@ (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fcfc 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	08007e6c 	.word	0x08007e6c
 8005198:	20000018 	.word	0x20000018
 800519c:	2000001c 	.word	0x2000001c

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b094      	sub	sp, #80	@ 0x50
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b79      	ldr	r3, [pc, #484]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80e1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e0db      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b73      	ldr	r3, [pc, #460]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051d8:	e0db      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b73      	ldr	r3, [pc, #460]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051de:	e0d8      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ea:	4b6d      	ldr	r3, [pc, #436]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005200:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	633b      	str	r3, [r7, #48]	@ 0x30
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
 800520e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f04f 0000 	mov.w	r0, #0
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	0159      	lsls	r1, r3, #5
 8005220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005224:	0150      	lsls	r0, r2, #5
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4621      	mov	r1, r4
 800522c:	1a51      	subs	r1, r2, r1
 800522e:	6139      	str	r1, [r7, #16]
 8005230:	4629      	mov	r1, r5
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524e:	4651      	mov	r1, sl
 8005250:	018a      	lsls	r2, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ebb2 0801 	subs.w	r8, r2, r1
 8005258:	4659      	mov	r1, fp
 800525a:	eb63 0901 	sbc.w	r9, r3, r1
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005272:	4690      	mov	r8, r2
 8005274:	4699      	mov	r9, r3
 8005276:	4623      	mov	r3, r4
 8005278:	eb18 0303 	adds.w	r3, r8, r3
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	462b      	mov	r3, r5
 8005280:	eb49 0303 	adc.w	r3, r9, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005292:	4629      	mov	r1, r5
 8005294:	024b      	lsls	r3, r1, #9
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800529c:	4621      	mov	r1, r4
 800529e:	024a      	lsls	r2, r1, #9
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052b0:	f7fa ffee 	bl	8000290 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052bc:	e058      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b38      	ldr	r3, [pc, #224]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	4611      	mov	r1, r2
 80052ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ea:	0150      	lsls	r0, r2, #5
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4641      	mov	r1, r8
 80052f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800530c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005310:	ebb2 040a 	subs.w	r4, r2, sl
 8005314:	eb63 050b 	sbc.w	r5, r3, fp
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	464b      	mov	r3, r9
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800535a:	2200      	movs	r2, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	f7fa ff94 	bl	8000290 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005380:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800538e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005394:	4618      	mov	r0, r3
 8005396:	3750      	adds	r7, #80	@ 0x50
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b03      	ldr	r3, [pc, #12]	@ (80053c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000018 	.word	0x20000018

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff0 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	08007e7c 	.word	0x08007e7c

080053ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800541c:	2b00      	cmp	r3, #0
 800541e:	d075      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005420:	4b91      	ldr	r3, [pc, #580]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005426:	f7fd fbeb 	bl	8002c00 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542e:	f7fd fbe7 	bl	8002c00 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e189      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005440:	4b8a      	ldr	r3, [pc, #552]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	019a      	lsls	r2, r3, #6
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	071b      	lsls	r3, r3, #28
 8005464:	4981      	ldr	r1, [pc, #516]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005478:	4b7c      	ldr	r3, [pc, #496]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547e:	0f1b      	lsrs	r3, r3, #28
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	019a      	lsls	r2, r3, #6
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	431a      	orrs	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	071b      	lsls	r3, r3, #28
 8005498:	4974      	ldr	r1, [pc, #464]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054a0:	4b72      	ldr	r3, [pc, #456]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a6:	f023 021f 	bic.w	r2, r3, #31
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	496e      	ldr	r1, [pc, #440]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	019a      	lsls	r2, r3, #6
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	071b      	lsls	r3, r3, #28
 80054d8:	4964      	ldr	r1, [pc, #400]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054e0:	4b61      	ldr	r3, [pc, #388]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e6:	f7fd fb8b 	bl	8002c00 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054ee:	f7fd fb87 	bl	8002c00 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e129      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005500:	4b5a      	ldr	r3, [pc, #360]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005520:	2b00      	cmp	r3, #0
 8005522:	d079      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005524:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552a:	f7fd fb69 	bl	8002c00 <HAL_GetTick>
 800552e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005532:	f7fd fb65 	bl	8002c00 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e107      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005544:	4b49      	ldr	r3, [pc, #292]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800554c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005550:	d0ef      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800555e:	4b43      	ldr	r3, [pc, #268]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005564:	0f1b      	lsrs	r3, r3, #28
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	019a      	lsls	r2, r3, #6
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	061b      	lsls	r3, r3, #24
 8005578:	431a      	orrs	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	071b      	lsls	r3, r3, #28
 800557e:	493b      	ldr	r1, [pc, #236]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005586:	4b39      	ldr	r3, [pc, #228]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	3b01      	subs	r3, #1
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	4934      	ldr	r1, [pc, #208]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01e      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ac:	4b2f      	ldr	r3, [pc, #188]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	019a      	lsls	r2, r3, #6
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	071b      	lsls	r3, r3, #28
 80055cc:	4927      	ldr	r1, [pc, #156]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	4922      	ldr	r1, [pc, #136]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055ea:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fd fb06 	bl	8002c00 <HAL_GetTick>
 80055f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055f8:	f7fd fb02 	bl	8002c00 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e0a4      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560a:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005616:	d1ef      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 808b 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	4b10      	ldr	r3, [pc, #64]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	4a0f      	ldr	r2, [pc, #60]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005634:	6413      	str	r3, [r2, #64]	@ 0x40
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a0b      	ldr	r2, [pc, #44]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800564c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800564e:	f7fd fad7 	bl	8002c00 <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005654:	e010      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005656:	f7fd fad3 	bl	8002c00 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d909      	bls.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e075      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005668:	42470068 	.word	0x42470068
 800566c:	40023800 	.word	0x40023800
 8005670:	42470070 	.word	0x42470070
 8005674:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005678:	4b38      	ldr	r3, [pc, #224]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0e8      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005684:	4b36      	ldr	r3, [pc, #216]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d028      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056b8:	4a29      	ldr	r2, [pc, #164]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056be:	4b28      	ldr	r3, [pc, #160]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d114      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fd fa99 	bl	8002c00 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fd fa95 	bl	8002c00 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e035      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ee      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005700:	d10d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005702:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005716:	4912      	ldr	r1, [pc, #72]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]
 800571c:	e005      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800571e:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	4a0f      	ldr	r2, [pc, #60]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005724:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005728:	6093      	str	r3, [r2, #8]
 800572a:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005736:	490a      	ldr	r1, [pc, #40]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005738:	4313      	orrs	r3, r2
 800573a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005750:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40007000 	.word	0x40007000
 8005760:	40023800 	.word	0x40023800
 8005764:	42470e40 	.word	0x42470e40
 8005768:	424711e0 	.word	0x424711e0

0800576c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e01c      	b.n	80057b8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	795b      	ldrb	r3, [r3, #5]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc fd30 	bl	80021f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0204 	orr.w	r2, r2, #4
 80057a8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e07b      	b.n	80058ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e2:	d009      	beq.n	80057f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fd10 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0104 	and.w	r1, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	f003 0210 	and.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e01a      	b.n	800591a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fc fce3 	bl	80022c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b088      	sub	sp, #32
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005932:	f7fd f965 	bl	8002c00 <HAL_GetTick>
 8005936:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d001      	beq.n	800594c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
 800594a:	e12a      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x36>
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e122      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_SPI_Transmit+0x48>
 8005966:	2302      	movs	r3, #2
 8005968:	e11b      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2203      	movs	r2, #3
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b8:	d10f      	bne.n	80059da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b40      	cmp	r3, #64	@ 0x40
 80059e6:	d007      	beq.n	80059f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a00:	d152      	bne.n	8005aa8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Transmit+0xee>
 8005a0a:	8b7b      	ldrh	r3, [r7, #26]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d145      	bne.n	8005a9c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a34:	e032      	b.n	8005a9c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d112      	bne.n	8005a6a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a68:	e018      	b.n	8005a9c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a6a:	f7fd f8c9 	bl	8002c00 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d803      	bhi.n	8005a82 <HAL_SPI_Transmit+0x160>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Transmit+0x166>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e082      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1c7      	bne.n	8005a36 <HAL_SPI_Transmit+0x114>
 8005aa6:	e053      	b.n	8005b50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_Transmit+0x194>
 8005ab0:	8b7b      	ldrh	r3, [r7, #26]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d147      	bne.n	8005b46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005adc:	e033      	b.n	8005b46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d113      	bne.n	8005b14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b12:	e018      	b.n	8005b46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b14:	f7fd f874 	bl	8002c00 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_Transmit+0x20a>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x210>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e02d      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1c6      	bne.n	8005ade <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f8bf 	bl	8005cd8 <SPI_EndRxTxTransaction>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bb8:	b2db      	uxtb	r3, r3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd8:	f7fd f812 	bl	8002c00 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be8:	f7fd f80a 	bl	8002c00 <HAL_GetTick>
 8005bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	0d1b      	lsrs	r3, r3, #20
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfe:	e054      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d050      	beq.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c08:	f7fc fffa 	bl	8002c00 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d13d      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d111      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c40:	d004      	beq.n	8005c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d107      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d10f      	bne.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e017      	b.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d19b      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000018 	.word	0x20000018

08005cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2201      	movs	r2, #1
 8005cec:	2102      	movs	r1, #2
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff6a 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e032      	b.n	8005d70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <SPI_EndRxTxTransaction+0xa0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <SPI_EndRxTxTransaction+0xa4>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	0d5b      	lsrs	r3, r3, #21
 8005d16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d28:	d112      	bne.n	8005d50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ff47 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d016      	beq.n	8005d6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e00f      	b.n	8005d70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d66:	2b80      	cmp	r3, #128	@ 0x80
 8005d68:	d0f2      	beq.n	8005d50 <SPI_EndRxTxTransaction+0x78>
 8005d6a:	e000      	b.n	8005d6e <SPI_EndRxTxTransaction+0x96>
        break;
 8005d6c:	bf00      	nop
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000018 	.word	0x20000018
 8005d7c:	165e9f81 	.word	0x165e9f81

08005d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc faac 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 f8f4 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_ConfigClockSource+0x1c>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0b4      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x186>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e72:	d03e      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xd4>
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e78:	f200 8087 	bhi.w	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e80:	f000 8086 	beq.w	8005f90 <HAL_TIM_ConfigClockSource+0x172>
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d87f      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e8a:	2b70      	cmp	r3, #112	@ 0x70
 8005e8c:	d01a      	beq.n	8005ec4 <HAL_TIM_ConfigClockSource+0xa6>
 8005e8e:	2b70      	cmp	r3, #112	@ 0x70
 8005e90:	d87b      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e92:	2b60      	cmp	r3, #96	@ 0x60
 8005e94:	d050      	beq.n	8005f38 <HAL_TIM_ConfigClockSource+0x11a>
 8005e96:	2b60      	cmp	r3, #96	@ 0x60
 8005e98:	d877      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005e9a:	2b50      	cmp	r3, #80	@ 0x50
 8005e9c:	d03c      	beq.n	8005f18 <HAL_TIM_ConfigClockSource+0xfa>
 8005e9e:	2b50      	cmp	r3, #80	@ 0x50
 8005ea0:	d873      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d058      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0x13a>
 8005ea6:	2b40      	cmp	r3, #64	@ 0x40
 8005ea8:	d86f      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eaa:	2b30      	cmp	r3, #48	@ 0x30
 8005eac:	d064      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005eae:	2b30      	cmp	r3, #48	@ 0x30
 8005eb0:	d86b      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d060      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d867      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d05c      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d05a      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec2:	e062      	b.n	8005f8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	f000 f990 	bl	80061f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ee6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
      break;
 8005ef0:	e04f      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	f000 f979 	bl	80061f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f14:	609a      	str	r2, [r3, #8]
      break;
 8005f16:	e03c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f24:	461a      	mov	r2, r3
 8005f26:	f000 f8ed 	bl	8006104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2150      	movs	r1, #80	@ 0x50
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f946 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f36:	e02c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f44:	461a      	mov	r2, r3
 8005f46:	f000 f90c 	bl	8006162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2160      	movs	r1, #96	@ 0x60
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f936 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f56:	e01c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f64:	461a      	mov	r2, r3
 8005f66:	f000 f8cd 	bl	8006104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2140      	movs	r1, #64	@ 0x40
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f926 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f76:	e00c      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 f91d 	bl	80061c2 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e003      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8e:	e000      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a46      	ldr	r2, [pc, #280]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d00f      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a43      	ldr	r2, [pc, #268]	@ (80060dc <TIM_Base_SetConfig+0x130>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a42      	ldr	r2, [pc, #264]	@ (80060e0 <TIM_Base_SetConfig+0x134>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a41      	ldr	r2, [pc, #260]	@ (80060e4 <TIM_Base_SetConfig+0x138>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a35      	ldr	r2, [pc, #212]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600c:	d027      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <TIM_Base_SetConfig+0x130>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d023      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a31      	ldr	r2, [pc, #196]	@ (80060e0 <TIM_Base_SetConfig+0x134>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a30      	ldr	r2, [pc, #192]	@ (80060e4 <TIM_Base_SetConfig+0x138>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d017      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2e      	ldr	r2, [pc, #184]	@ (80060ec <TIM_Base_SetConfig+0x140>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <TIM_Base_SetConfig+0x144>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <TIM_Base_SetConfig+0x148>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	@ (80060f8 <TIM_Base_SetConfig+0x14c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	@ (80060fc <TIM_Base_SetConfig+0x150>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <TIM_Base_SetConfig+0x154>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a10      	ldr	r2, [pc, #64]	@ (80060d8 <TIM_Base_SetConfig+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <TIM_Base_SetConfig+0x13c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]
  }
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	40001800 	.word	0x40001800
 80060fc:	40001c00 	.word	0x40001c00
 8006100:	40002000 	.word	0x40002000

08006104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 030a 	bic.w	r3, r3, #10
 8006140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006162:	b480      	push	{r7}
 8006164:	b087      	sub	sp, #28
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f023 0210 	bic.w	r2, r3, #16
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800619e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	f043 0307 	orr.w	r3, r3, #7
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	021a      	lsls	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	431a      	orrs	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e05a      	b.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d01d      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a15      	ldr	r2, [pc, #84]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10c      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40010400 	.word	0x40010400
 8006328:	40014000 	.word	0x40014000
 800632c:	40001800 	.word	0x40001800

08006330 <siprintf>:
 8006330:	b40e      	push	{r1, r2, r3}
 8006332:	b500      	push	{lr}
 8006334:	b09c      	sub	sp, #112	@ 0x70
 8006336:	ab1d      	add	r3, sp, #116	@ 0x74
 8006338:	9002      	str	r0, [sp, #8]
 800633a:	9006      	str	r0, [sp, #24]
 800633c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006340:	4809      	ldr	r0, [pc, #36]	@ (8006368 <siprintf+0x38>)
 8006342:	9107      	str	r1, [sp, #28]
 8006344:	9104      	str	r1, [sp, #16]
 8006346:	4909      	ldr	r1, [pc, #36]	@ (800636c <siprintf+0x3c>)
 8006348:	f853 2b04 	ldr.w	r2, [r3], #4
 800634c:	9105      	str	r1, [sp, #20]
 800634e:	6800      	ldr	r0, [r0, #0]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	a902      	add	r1, sp, #8
 8006354:	f000 f994 	bl	8006680 <_svfiprintf_r>
 8006358:	9b02      	ldr	r3, [sp, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	b01c      	add	sp, #112	@ 0x70
 8006360:	f85d eb04 	ldr.w	lr, [sp], #4
 8006364:	b003      	add	sp, #12
 8006366:	4770      	bx	lr
 8006368:	20000024 	.word	0x20000024
 800636c:	ffff0208 	.word	0xffff0208

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	@ (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000024 	.word	0x20000024

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	@ (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	@ (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	@ (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	@ (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 fc66 	bl	8006c70 <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08007ec0 	.word	0x08007ec0
 80063c8:	08007ec0 	.word	0x08007ec0
 80063cc:	08007ec0 	.word	0x08007ec0
 80063d0:	08007ec4 	.word	0x08007ec4

080063d4 <__retarget_lock_acquire_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_release_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <_free_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	2900      	cmp	r1, #0
 80063de:	d041      	beq.n	8006464 <_free_r+0x8c>
 80063e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e4:	1f0c      	subs	r4, r1, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	18e4      	addlt	r4, r4, r3
 80063ec:	f000 f8e0 	bl	80065b0 <__malloc_lock>
 80063f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006468 <_free_r+0x90>)
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	b933      	cbnz	r3, 8006404 <_free_r+0x2c>
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6014      	str	r4, [r2, #0]
 80063fa:	4628      	mov	r0, r5
 80063fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006400:	f000 b8dc 	b.w	80065bc <__malloc_unlock>
 8006404:	42a3      	cmp	r3, r4
 8006406:	d908      	bls.n	800641a <_free_r+0x42>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	1821      	adds	r1, r4, r0
 800640c:	428b      	cmp	r3, r1
 800640e:	bf01      	itttt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	1809      	addeq	r1, r1, r0
 8006416:	6021      	streq	r1, [r4, #0]
 8006418:	e7ed      	b.n	80063f6 <_free_r+0x1e>
 800641a:	461a      	mov	r2, r3
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b10b      	cbz	r3, 8006424 <_free_r+0x4c>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d9fa      	bls.n	800641a <_free_r+0x42>
 8006424:	6811      	ldr	r1, [r2, #0]
 8006426:	1850      	adds	r0, r2, r1
 8006428:	42a0      	cmp	r0, r4
 800642a:	d10b      	bne.n	8006444 <_free_r+0x6c>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	4401      	add	r1, r0
 8006430:	1850      	adds	r0, r2, r1
 8006432:	4283      	cmp	r3, r0
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	d1e0      	bne.n	80063fa <_free_r+0x22>
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	6053      	str	r3, [r2, #4]
 800643e:	4408      	add	r0, r1
 8006440:	6010      	str	r0, [r2, #0]
 8006442:	e7da      	b.n	80063fa <_free_r+0x22>
 8006444:	d902      	bls.n	800644c <_free_r+0x74>
 8006446:	230c      	movs	r3, #12
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	e7d6      	b.n	80063fa <_free_r+0x22>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf04      	itt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	bf04      	itt	eq
 800645c:	1809      	addeq	r1, r1, r0
 800645e:	6021      	streq	r1, [r4, #0]
 8006460:	6054      	str	r4, [r2, #4]
 8006462:	e7ca      	b.n	80063fa <_free_r+0x22>
 8006464:	bd38      	pop	{r3, r4, r5, pc}
 8006466:	bf00      	nop
 8006468:	20025de8 	.word	0x20025de8

0800646c <sbrk_aligned>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0f      	ldr	r6, [pc, #60]	@ (80064ac <sbrk_aligned+0x40>)
 8006470:	460c      	mov	r4, r1
 8006472:	6831      	ldr	r1, [r6, #0]
 8006474:	4605      	mov	r5, r0
 8006476:	b911      	cbnz	r1, 800647e <sbrk_aligned+0x12>
 8006478:	f000 fba6 	bl	8006bc8 <_sbrk_r>
 800647c:	6030      	str	r0, [r6, #0]
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 fba1 	bl	8006bc8 <_sbrk_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d103      	bne.n	8006492 <sbrk_aligned+0x26>
 800648a:	f04f 34ff 	mov.w	r4, #4294967295
 800648e:	4620      	mov	r0, r4
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d0f8      	beq.n	800648e <sbrk_aligned+0x22>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 fb92 	bl	8006bc8 <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d1f2      	bne.n	800648e <sbrk_aligned+0x22>
 80064a8:	e7ef      	b.n	800648a <sbrk_aligned+0x1e>
 80064aa:	bf00      	nop
 80064ac:	20025de4 	.word	0x20025de4

080064b0 <_malloc_r>:
 80064b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b4:	1ccd      	adds	r5, r1, #3
 80064b6:	f025 0503 	bic.w	r5, r5, #3
 80064ba:	3508      	adds	r5, #8
 80064bc:	2d0c      	cmp	r5, #12
 80064be:	bf38      	it	cc
 80064c0:	250c      	movcc	r5, #12
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	4606      	mov	r6, r0
 80064c6:	db01      	blt.n	80064cc <_malloc_r+0x1c>
 80064c8:	42a9      	cmp	r1, r5
 80064ca:	d904      	bls.n	80064d6 <_malloc_r+0x26>
 80064cc:	230c      	movs	r3, #12
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	2000      	movs	r0, #0
 80064d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065ac <_malloc_r+0xfc>
 80064da:	f000 f869 	bl	80065b0 <__malloc_lock>
 80064de:	f8d8 3000 	ldr.w	r3, [r8]
 80064e2:	461c      	mov	r4, r3
 80064e4:	bb44      	cbnz	r4, 8006538 <_malloc_r+0x88>
 80064e6:	4629      	mov	r1, r5
 80064e8:	4630      	mov	r0, r6
 80064ea:	f7ff ffbf 	bl	800646c <sbrk_aligned>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	4604      	mov	r4, r0
 80064f2:	d158      	bne.n	80065a6 <_malloc_r+0xf6>
 80064f4:	f8d8 4000 	ldr.w	r4, [r8]
 80064f8:	4627      	mov	r7, r4
 80064fa:	2f00      	cmp	r7, #0
 80064fc:	d143      	bne.n	8006586 <_malloc_r+0xd6>
 80064fe:	2c00      	cmp	r4, #0
 8006500:	d04b      	beq.n	800659a <_malloc_r+0xea>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	4639      	mov	r1, r7
 8006506:	4630      	mov	r0, r6
 8006508:	eb04 0903 	add.w	r9, r4, r3
 800650c:	f000 fb5c 	bl	8006bc8 <_sbrk_r>
 8006510:	4581      	cmp	r9, r0
 8006512:	d142      	bne.n	800659a <_malloc_r+0xea>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	1a6d      	subs	r5, r5, r1
 8006518:	4629      	mov	r1, r5
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff ffa6 	bl	800646c <sbrk_aligned>
 8006520:	3001      	adds	r0, #1
 8006522:	d03a      	beq.n	800659a <_malloc_r+0xea>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	442b      	add	r3, r5
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	f8d8 3000 	ldr.w	r3, [r8]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	bb62      	cbnz	r2, 800658c <_malloc_r+0xdc>
 8006532:	f8c8 7000 	str.w	r7, [r8]
 8006536:	e00f      	b.n	8006558 <_malloc_r+0xa8>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	1b52      	subs	r2, r2, r5
 800653c:	d420      	bmi.n	8006580 <_malloc_r+0xd0>
 800653e:	2a0b      	cmp	r2, #11
 8006540:	d917      	bls.n	8006572 <_malloc_r+0xc2>
 8006542:	1961      	adds	r1, r4, r5
 8006544:	42a3      	cmp	r3, r4
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	bf18      	it	ne
 800654a:	6059      	strne	r1, [r3, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	bf08      	it	eq
 8006550:	f8c8 1000 	streq.w	r1, [r8]
 8006554:	5162      	str	r2, [r4, r5]
 8006556:	604b      	str	r3, [r1, #4]
 8006558:	4630      	mov	r0, r6
 800655a:	f000 f82f 	bl	80065bc <__malloc_unlock>
 800655e:	f104 000b 	add.w	r0, r4, #11
 8006562:	1d23      	adds	r3, r4, #4
 8006564:	f020 0007 	bic.w	r0, r0, #7
 8006568:	1ac2      	subs	r2, r0, r3
 800656a:	bf1c      	itt	ne
 800656c:	1a1b      	subne	r3, r3, r0
 800656e:	50a3      	strne	r3, [r4, r2]
 8006570:	e7af      	b.n	80064d2 <_malloc_r+0x22>
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	42a3      	cmp	r3, r4
 8006576:	bf0c      	ite	eq
 8006578:	f8c8 2000 	streq.w	r2, [r8]
 800657c:	605a      	strne	r2, [r3, #4]
 800657e:	e7eb      	b.n	8006558 <_malloc_r+0xa8>
 8006580:	4623      	mov	r3, r4
 8006582:	6864      	ldr	r4, [r4, #4]
 8006584:	e7ae      	b.n	80064e4 <_malloc_r+0x34>
 8006586:	463c      	mov	r4, r7
 8006588:	687f      	ldr	r7, [r7, #4]
 800658a:	e7b6      	b.n	80064fa <_malloc_r+0x4a>
 800658c:	461a      	mov	r2, r3
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	d1fb      	bne.n	800658c <_malloc_r+0xdc>
 8006594:	2300      	movs	r3, #0
 8006596:	6053      	str	r3, [r2, #4]
 8006598:	e7de      	b.n	8006558 <_malloc_r+0xa8>
 800659a:	230c      	movs	r3, #12
 800659c:	6033      	str	r3, [r6, #0]
 800659e:	4630      	mov	r0, r6
 80065a0:	f000 f80c 	bl	80065bc <__malloc_unlock>
 80065a4:	e794      	b.n	80064d0 <_malloc_r+0x20>
 80065a6:	6005      	str	r5, [r0, #0]
 80065a8:	e7d6      	b.n	8006558 <_malloc_r+0xa8>
 80065aa:	bf00      	nop
 80065ac:	20025de8 	.word	0x20025de8

080065b0 <__malloc_lock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__malloc_lock+0x8>)
 80065b2:	f7ff bf0f 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	20025de0 	.word	0x20025de0

080065bc <__malloc_unlock>:
 80065bc:	4801      	ldr	r0, [pc, #4]	@ (80065c4 <__malloc_unlock+0x8>)
 80065be:	f7ff bf0a 	b.w	80063d6 <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	20025de0 	.word	0x20025de0

080065c8 <__ssputs_r>:
 80065c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	688e      	ldr	r6, [r1, #8]
 80065ce:	461f      	mov	r7, r3
 80065d0:	42be      	cmp	r6, r7
 80065d2:	680b      	ldr	r3, [r1, #0]
 80065d4:	4682      	mov	sl, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	4690      	mov	r8, r2
 80065da:	d82d      	bhi.n	8006638 <__ssputs_r+0x70>
 80065dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065e4:	d026      	beq.n	8006634 <__ssputs_r+0x6c>
 80065e6:	6965      	ldr	r5, [r4, #20]
 80065e8:	6909      	ldr	r1, [r1, #16]
 80065ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ee:	eba3 0901 	sub.w	r9, r3, r1
 80065f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065f6:	1c7b      	adds	r3, r7, #1
 80065f8:	444b      	add	r3, r9
 80065fa:	106d      	asrs	r5, r5, #1
 80065fc:	429d      	cmp	r5, r3
 80065fe:	bf38      	it	cc
 8006600:	461d      	movcc	r5, r3
 8006602:	0553      	lsls	r3, r2, #21
 8006604:	d527      	bpl.n	8006656 <__ssputs_r+0x8e>
 8006606:	4629      	mov	r1, r5
 8006608:	f7ff ff52 	bl	80064b0 <_malloc_r>
 800660c:	4606      	mov	r6, r0
 800660e:	b360      	cbz	r0, 800666a <__ssputs_r+0xa2>
 8006610:	6921      	ldr	r1, [r4, #16]
 8006612:	464a      	mov	r2, r9
 8006614:	f000 fae8 	bl	8006be8 <memcpy>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800661e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	6126      	str	r6, [r4, #16]
 8006626:	6165      	str	r5, [r4, #20]
 8006628:	444e      	add	r6, r9
 800662a:	eba5 0509 	sub.w	r5, r5, r9
 800662e:	6026      	str	r6, [r4, #0]
 8006630:	60a5      	str	r5, [r4, #8]
 8006632:	463e      	mov	r6, r7
 8006634:	42be      	cmp	r6, r7
 8006636:	d900      	bls.n	800663a <__ssputs_r+0x72>
 8006638:	463e      	mov	r6, r7
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	4632      	mov	r2, r6
 800663e:	4641      	mov	r1, r8
 8006640:	f000 faa8 	bl	8006b94 <memmove>
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	1b9b      	subs	r3, r3, r6
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	4433      	add	r3, r6
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	2000      	movs	r0, #0
 8006652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006656:	462a      	mov	r2, r5
 8006658:	f000 fad4 	bl	8006c04 <_realloc_r>
 800665c:	4606      	mov	r6, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d1e0      	bne.n	8006624 <__ssputs_r+0x5c>
 8006662:	6921      	ldr	r1, [r4, #16]
 8006664:	4650      	mov	r0, sl
 8006666:	f7ff feb7 	bl	80063d8 <_free_r>
 800666a:	230c      	movs	r3, #12
 800666c:	f8ca 3000 	str.w	r3, [sl]
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e7e9      	b.n	8006652 <__ssputs_r+0x8a>
	...

08006680 <_svfiprintf_r>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	4698      	mov	r8, r3
 8006686:	898b      	ldrh	r3, [r1, #12]
 8006688:	061b      	lsls	r3, r3, #24
 800668a:	b09d      	sub	sp, #116	@ 0x74
 800668c:	4607      	mov	r7, r0
 800668e:	460d      	mov	r5, r1
 8006690:	4614      	mov	r4, r2
 8006692:	d510      	bpl.n	80066b6 <_svfiprintf_r+0x36>
 8006694:	690b      	ldr	r3, [r1, #16]
 8006696:	b973      	cbnz	r3, 80066b6 <_svfiprintf_r+0x36>
 8006698:	2140      	movs	r1, #64	@ 0x40
 800669a:	f7ff ff09 	bl	80064b0 <_malloc_r>
 800669e:	6028      	str	r0, [r5, #0]
 80066a0:	6128      	str	r0, [r5, #16]
 80066a2:	b930      	cbnz	r0, 80066b2 <_svfiprintf_r+0x32>
 80066a4:	230c      	movs	r3, #12
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b01d      	add	sp, #116	@ 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	2340      	movs	r3, #64	@ 0x40
 80066b4:	616b      	str	r3, [r5, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ba:	2320      	movs	r3, #32
 80066bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c4:	2330      	movs	r3, #48	@ 0x30
 80066c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006864 <_svfiprintf_r+0x1e4>
 80066ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ce:	f04f 0901 	mov.w	r9, #1
 80066d2:	4623      	mov	r3, r4
 80066d4:	469a      	mov	sl, r3
 80066d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066da:	b10a      	cbz	r2, 80066e0 <_svfiprintf_r+0x60>
 80066dc:	2a25      	cmp	r2, #37	@ 0x25
 80066de:	d1f9      	bne.n	80066d4 <_svfiprintf_r+0x54>
 80066e0:	ebba 0b04 	subs.w	fp, sl, r4
 80066e4:	d00b      	beq.n	80066fe <_svfiprintf_r+0x7e>
 80066e6:	465b      	mov	r3, fp
 80066e8:	4622      	mov	r2, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff ff6b 	bl	80065c8 <__ssputs_r>
 80066f2:	3001      	adds	r0, #1
 80066f4:	f000 80a7 	beq.w	8006846 <_svfiprintf_r+0x1c6>
 80066f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066fa:	445a      	add	r2, fp
 80066fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 809f 	beq.w	8006846 <_svfiprintf_r+0x1c6>
 8006708:	2300      	movs	r3, #0
 800670a:	f04f 32ff 	mov.w	r2, #4294967295
 800670e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006712:	f10a 0a01 	add.w	sl, sl, #1
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	9307      	str	r3, [sp, #28]
 800671a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800671e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006720:	4654      	mov	r4, sl
 8006722:	2205      	movs	r2, #5
 8006724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006728:	484e      	ldr	r0, [pc, #312]	@ (8006864 <_svfiprintf_r+0x1e4>)
 800672a:	f7f9 fd61 	bl	80001f0 <memchr>
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	b9d8      	cbnz	r0, 800676a <_svfiprintf_r+0xea>
 8006732:	06d0      	lsls	r0, r2, #27
 8006734:	bf44      	itt	mi
 8006736:	2320      	movmi	r3, #32
 8006738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800673c:	0711      	lsls	r1, r2, #28
 800673e:	bf44      	itt	mi
 8006740:	232b      	movmi	r3, #43	@ 0x2b
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006746:	f89a 3000 	ldrb.w	r3, [sl]
 800674a:	2b2a      	cmp	r3, #42	@ 0x2a
 800674c:	d015      	beq.n	800677a <_svfiprintf_r+0xfa>
 800674e:	9a07      	ldr	r2, [sp, #28]
 8006750:	4654      	mov	r4, sl
 8006752:	2000      	movs	r0, #0
 8006754:	f04f 0c0a 	mov.w	ip, #10
 8006758:	4621      	mov	r1, r4
 800675a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675e:	3b30      	subs	r3, #48	@ 0x30
 8006760:	2b09      	cmp	r3, #9
 8006762:	d94b      	bls.n	80067fc <_svfiprintf_r+0x17c>
 8006764:	b1b0      	cbz	r0, 8006794 <_svfiprintf_r+0x114>
 8006766:	9207      	str	r2, [sp, #28]
 8006768:	e014      	b.n	8006794 <_svfiprintf_r+0x114>
 800676a:	eba0 0308 	sub.w	r3, r0, r8
 800676e:	fa09 f303 	lsl.w	r3, r9, r3
 8006772:	4313      	orrs	r3, r2
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	46a2      	mov	sl, r4
 8006778:	e7d2      	b.n	8006720 <_svfiprintf_r+0xa0>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	1d19      	adds	r1, r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	9103      	str	r1, [sp, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfbb      	ittet	lt
 8006786:	425b      	neglt	r3, r3
 8006788:	f042 0202 	orrlt.w	r2, r2, #2
 800678c:	9307      	strge	r3, [sp, #28]
 800678e:	9307      	strlt	r3, [sp, #28]
 8006790:	bfb8      	it	lt
 8006792:	9204      	strlt	r2, [sp, #16]
 8006794:	7823      	ldrb	r3, [r4, #0]
 8006796:	2b2e      	cmp	r3, #46	@ 0x2e
 8006798:	d10a      	bne.n	80067b0 <_svfiprintf_r+0x130>
 800679a:	7863      	ldrb	r3, [r4, #1]
 800679c:	2b2a      	cmp	r3, #42	@ 0x2a
 800679e:	d132      	bne.n	8006806 <_svfiprintf_r+0x186>
 80067a0:	9b03      	ldr	r3, [sp, #12]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	9203      	str	r2, [sp, #12]
 80067a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ac:	3402      	adds	r4, #2
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006874 <_svfiprintf_r+0x1f4>
 80067b4:	7821      	ldrb	r1, [r4, #0]
 80067b6:	2203      	movs	r2, #3
 80067b8:	4650      	mov	r0, sl
 80067ba:	f7f9 fd19 	bl	80001f0 <memchr>
 80067be:	b138      	cbz	r0, 80067d0 <_svfiprintf_r+0x150>
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	eba0 000a 	sub.w	r0, r0, sl
 80067c6:	2240      	movs	r2, #64	@ 0x40
 80067c8:	4082      	lsls	r2, r0
 80067ca:	4313      	orrs	r3, r2
 80067cc:	3401      	adds	r4, #1
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	4824      	ldr	r0, [pc, #144]	@ (8006868 <_svfiprintf_r+0x1e8>)
 80067d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067da:	2206      	movs	r2, #6
 80067dc:	f7f9 fd08 	bl	80001f0 <memchr>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d036      	beq.n	8006852 <_svfiprintf_r+0x1d2>
 80067e4:	4b21      	ldr	r3, [pc, #132]	@ (800686c <_svfiprintf_r+0x1ec>)
 80067e6:	bb1b      	cbnz	r3, 8006830 <_svfiprintf_r+0x1b0>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	3307      	adds	r3, #7
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	3308      	adds	r3, #8
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f6:	4433      	add	r3, r6
 80067f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fa:	e76a      	b.n	80066d2 <_svfiprintf_r+0x52>
 80067fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006800:	460c      	mov	r4, r1
 8006802:	2001      	movs	r0, #1
 8006804:	e7a8      	b.n	8006758 <_svfiprintf_r+0xd8>
 8006806:	2300      	movs	r3, #0
 8006808:	3401      	adds	r4, #1
 800680a:	9305      	str	r3, [sp, #20]
 800680c:	4619      	mov	r1, r3
 800680e:	f04f 0c0a 	mov.w	ip, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006818:	3a30      	subs	r2, #48	@ 0x30
 800681a:	2a09      	cmp	r2, #9
 800681c:	d903      	bls.n	8006826 <_svfiprintf_r+0x1a6>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c6      	beq.n	80067b0 <_svfiprintf_r+0x130>
 8006822:	9105      	str	r1, [sp, #20]
 8006824:	e7c4      	b.n	80067b0 <_svfiprintf_r+0x130>
 8006826:	fb0c 2101 	mla	r1, ip, r1, r2
 800682a:	4604      	mov	r4, r0
 800682c:	2301      	movs	r3, #1
 800682e:	e7f0      	b.n	8006812 <_svfiprintf_r+0x192>
 8006830:	ab03      	add	r3, sp, #12
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	462a      	mov	r2, r5
 8006836:	4b0e      	ldr	r3, [pc, #56]	@ (8006870 <_svfiprintf_r+0x1f0>)
 8006838:	a904      	add	r1, sp, #16
 800683a:	4638      	mov	r0, r7
 800683c:	f3af 8000 	nop.w
 8006840:	1c42      	adds	r2, r0, #1
 8006842:	4606      	mov	r6, r0
 8006844:	d1d6      	bne.n	80067f4 <_svfiprintf_r+0x174>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	065b      	lsls	r3, r3, #25
 800684a:	f53f af2d 	bmi.w	80066a8 <_svfiprintf_r+0x28>
 800684e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006850:	e72c      	b.n	80066ac <_svfiprintf_r+0x2c>
 8006852:	ab03      	add	r3, sp, #12
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	462a      	mov	r2, r5
 8006858:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <_svfiprintf_r+0x1f0>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	4638      	mov	r0, r7
 800685e:	f000 f879 	bl	8006954 <_printf_i>
 8006862:	e7ed      	b.n	8006840 <_svfiprintf_r+0x1c0>
 8006864:	08007e84 	.word	0x08007e84
 8006868:	08007e8e 	.word	0x08007e8e
 800686c:	00000000 	.word	0x00000000
 8006870:	080065c9 	.word	0x080065c9
 8006874:	08007e8a 	.word	0x08007e8a

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4698      	mov	r8, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	3b00      	subs	r3, #0
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d4:	4641      	mov	r1, r8
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c8      	blx	r9
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6922      	ldr	r2, [r4, #16]
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf02      	ittt	eq
 80068ea:	68e5      	ldreq	r5, [r4, #12]
 80068ec:	6833      	ldreq	r3, [r6, #0]
 80068ee:	1aed      	subeq	r5, r5, r3
 80068f0:	68a3      	ldr	r3, [r4, #8]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4641      	mov	r1, r8
 8006914:	4638      	mov	r0, r7
 8006916:	47c8      	blx	r9
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	@ 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4641      	mov	r1, r8
 8006946:	4638      	mov	r0, r7
 8006948:	47c8      	blx	r9
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800695c:	2f78      	cmp	r7, #120	@ 0x78
 800695e:	4691      	mov	r9, r2
 8006960:	4680      	mov	r8, r0
 8006962:	460c      	mov	r4, r1
 8006964:	469a      	mov	sl, r3
 8006966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	@ 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d2 	beq.w	8006b1a <_printf_i+0x1c6>
 8006976:	2f58      	cmp	r7, #88	@ 0x58
 8006978:	f000 80b9 	beq.w	8006aee <_printf_i+0x19a>
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	@ (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b01 	.word	0x08006b01
 80069c4:	08006a2b 	.word	0x08006a2b
 80069c8:	08006abb 	.word	0x08006abb
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b23 	.word	0x08006b23
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a2b 	.word	0x08006a2b
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006ac3 	.word	0x08006ac3
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6032      	str	r2, [r6, #0]
 80069f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e09d      	b.n	8006b3c <_printf_i+0x1e8>
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	1d19      	adds	r1, r3, #4
 8006a06:	6031      	str	r1, [r6, #0]
 8006a08:	0606      	lsls	r6, r0, #24
 8006a0a:	d501      	bpl.n	8006a10 <_printf_i+0xbc>
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	e003      	b.n	8006a18 <_printf_i+0xc4>
 8006a10:	0645      	lsls	r5, r0, #25
 8006a12:	d5fb      	bpl.n	8006a0c <_printf_i+0xb8>
 8006a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	da03      	bge.n	8006a24 <_printf_i+0xd0>
 8006a1c:	232d      	movs	r3, #45	@ 0x2d
 8006a1e:	426d      	negs	r5, r5
 8006a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a24:	4859      	ldr	r0, [pc, #356]	@ (8006b8c <_printf_i+0x238>)
 8006a26:	230a      	movs	r3, #10
 8006a28:	e011      	b.n	8006a4e <_printf_i+0xfa>
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	0608      	lsls	r0, r1, #24
 8006a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a34:	d402      	bmi.n	8006a3c <_printf_i+0xe8>
 8006a36:	0649      	lsls	r1, r1, #25
 8006a38:	bf48      	it	mi
 8006a3a:	b2ad      	uxthmi	r5, r5
 8006a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a3e:	4853      	ldr	r0, [pc, #332]	@ (8006b8c <_printf_i+0x238>)
 8006a40:	6033      	str	r3, [r6, #0]
 8006a42:	bf14      	ite	ne
 8006a44:	230a      	movne	r3, #10
 8006a46:	2308      	moveq	r3, #8
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a4e:	6866      	ldr	r6, [r4, #4]
 8006a50:	60a6      	str	r6, [r4, #8]
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	bfa2      	ittt	ge
 8006a56:	6821      	ldrge	r1, [r4, #0]
 8006a58:	f021 0104 	bicge.w	r1, r1, #4
 8006a5c:	6021      	strge	r1, [r4, #0]
 8006a5e:	b90d      	cbnz	r5, 8006a64 <_printf_i+0x110>
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	d04b      	beq.n	8006afc <_printf_i+0x1a8>
 8006a64:	4616      	mov	r6, r2
 8006a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a6e:	5dc7      	ldrb	r7, [r0, r7]
 8006a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a74:	462f      	mov	r7, r5
 8006a76:	42bb      	cmp	r3, r7
 8006a78:	460d      	mov	r5, r1
 8006a7a:	d9f4      	bls.n	8006a66 <_printf_i+0x112>
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d10b      	bne.n	8006a98 <_printf_i+0x144>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07df      	lsls	r7, r3, #31
 8006a84:	d508      	bpl.n	8006a98 <_printf_i+0x144>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	bfde      	ittt	le
 8006a8e:	2330      	movle	r3, #48	@ 0x30
 8006a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a98:	1b92      	subs	r2, r2, r6
 8006a9a:	6122      	str	r2, [r4, #16]
 8006a9c:	f8cd a000 	str.w	sl, [sp]
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	aa03      	add	r2, sp, #12
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f7ff fee6 	bl	8006878 <_printf_common>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d14a      	bne.n	8006b46 <_printf_i+0x1f2>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b004      	add	sp, #16
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	f043 0320 	orr.w	r3, r3, #32
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	4833      	ldr	r0, [pc, #204]	@ (8006b90 <_printf_i+0x23c>)
 8006ac4:	2778      	movs	r7, #120	@ 0x78
 8006ac6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	6831      	ldr	r1, [r6, #0]
 8006ace:	061f      	lsls	r7, r3, #24
 8006ad0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ad4:	d402      	bmi.n	8006adc <_printf_i+0x188>
 8006ad6:	065f      	lsls	r7, r3, #25
 8006ad8:	bf48      	it	mi
 8006ada:	b2ad      	uxthmi	r5, r5
 8006adc:	6031      	str	r1, [r6, #0]
 8006ade:	07d9      	lsls	r1, r3, #31
 8006ae0:	bf44      	itt	mi
 8006ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae6:	6023      	strmi	r3, [r4, #0]
 8006ae8:	b11d      	cbz	r5, 8006af2 <_printf_i+0x19e>
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7ac      	b.n	8006a48 <_printf_i+0xf4>
 8006aee:	4827      	ldr	r0, [pc, #156]	@ (8006b8c <_printf_i+0x238>)
 8006af0:	e7e9      	b.n	8006ac6 <_printf_i+0x172>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f023 0320 	bic.w	r3, r3, #32
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	e7f6      	b.n	8006aea <_printf_i+0x196>
 8006afc:	4616      	mov	r6, r2
 8006afe:	e7bd      	b.n	8006a7c <_printf_i+0x128>
 8006b00:	6833      	ldr	r3, [r6, #0]
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	6961      	ldr	r1, [r4, #20]
 8006b06:	1d18      	adds	r0, r3, #4
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	062e      	lsls	r6, r5, #24
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0x1c0>
 8006b10:	6019      	str	r1, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <_printf_i+0x1c6>
 8006b14:	0668      	lsls	r0, r5, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0x1bc>
 8006b18:	8019      	strh	r1, [r3, #0]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6123      	str	r3, [r4, #16]
 8006b1e:	4616      	mov	r6, r2
 8006b20:	e7bc      	b.n	8006a9c <_printf_i+0x148>
 8006b22:	6833      	ldr	r3, [r6, #0]
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	6032      	str	r2, [r6, #0]
 8006b28:	681e      	ldr	r6, [r3, #0]
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7f9 fb5e 	bl	80001f0 <memchr>
 8006b34:	b108      	cbz	r0, 8006b3a <_printf_i+0x1e6>
 8006b36:	1b80      	subs	r0, r0, r6
 8006b38:	6060      	str	r0, [r4, #4]
 8006b3a:	6863      	ldr	r3, [r4, #4]
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b44:	e7aa      	b.n	8006a9c <_printf_i+0x148>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	4632      	mov	r2, r6
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	47d0      	blx	sl
 8006b50:	3001      	adds	r0, #1
 8006b52:	d0ad      	beq.n	8006ab0 <_printf_i+0x15c>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	079b      	lsls	r3, r3, #30
 8006b58:	d413      	bmi.n	8006b82 <_printf_i+0x22e>
 8006b5a:	68e0      	ldr	r0, [r4, #12]
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	4298      	cmp	r0, r3
 8006b60:	bfb8      	it	lt
 8006b62:	4618      	movlt	r0, r3
 8006b64:	e7a6      	b.n	8006ab4 <_printf_i+0x160>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	47d0      	blx	sl
 8006b70:	3001      	adds	r0, #1
 8006b72:	d09d      	beq.n	8006ab0 <_printf_i+0x15c>
 8006b74:	3501      	adds	r5, #1
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	9903      	ldr	r1, [sp, #12]
 8006b7a:	1a5b      	subs	r3, r3, r1
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	dcf2      	bgt.n	8006b66 <_printf_i+0x212>
 8006b80:	e7eb      	b.n	8006b5a <_printf_i+0x206>
 8006b82:	2500      	movs	r5, #0
 8006b84:	f104 0619 	add.w	r6, r4, #25
 8006b88:	e7f5      	b.n	8006b76 <_printf_i+0x222>
 8006b8a:	bf00      	nop
 8006b8c:	08007e95 	.word	0x08007e95
 8006b90:	08007ea6 	.word	0x08007ea6

08006b94 <memmove>:
 8006b94:	4288      	cmp	r0, r1
 8006b96:	b510      	push	{r4, lr}
 8006b98:	eb01 0402 	add.w	r4, r1, r2
 8006b9c:	d902      	bls.n	8006ba4 <memmove+0x10>
 8006b9e:	4284      	cmp	r4, r0
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	d807      	bhi.n	8006bb4 <memmove+0x20>
 8006ba4:	1e43      	subs	r3, r0, #1
 8006ba6:	42a1      	cmp	r1, r4
 8006ba8:	d008      	beq.n	8006bbc <memmove+0x28>
 8006baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bb2:	e7f8      	b.n	8006ba6 <memmove+0x12>
 8006bb4:	4402      	add	r2, r0
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	428a      	cmp	r2, r1
 8006bba:	d100      	bne.n	8006bbe <memmove+0x2a>
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bc6:	e7f7      	b.n	8006bb8 <memmove+0x24>

08006bc8 <_sbrk_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	@ (8006be4 <_sbrk_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fb ff3c 	bl	8002a50 <_sbrk>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_sbrk_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_sbrk_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20025ddc 	.word	0x20025ddc

08006be8 <memcpy>:
 8006be8:	440a      	add	r2, r1
 8006bea:	4291      	cmp	r1, r2
 8006bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bf0:	d100      	bne.n	8006bf4 <memcpy+0xc>
 8006bf2:	4770      	bx	lr
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	d1f9      	bne.n	8006bf6 <memcpy+0xe>
 8006c02:	bd10      	pop	{r4, pc}

08006c04 <_realloc_r>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	4680      	mov	r8, r0
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	b921      	cbnz	r1, 8006c1a <_realloc_r+0x16>
 8006c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	4611      	mov	r1, r2
 8006c16:	f7ff bc4b 	b.w	80064b0 <_malloc_r>
 8006c1a:	b92a      	cbnz	r2, 8006c28 <_realloc_r+0x24>
 8006c1c:	f7ff fbdc 	bl	80063d8 <_free_r>
 8006c20:	2400      	movs	r4, #0
 8006c22:	4620      	mov	r0, r4
 8006c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c28:	f000 f81a 	bl	8006c60 <_malloc_usable_size_r>
 8006c2c:	4285      	cmp	r5, r0
 8006c2e:	4606      	mov	r6, r0
 8006c30:	d802      	bhi.n	8006c38 <_realloc_r+0x34>
 8006c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c36:	d8f4      	bhi.n	8006c22 <_realloc_r+0x1e>
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f7ff fc38 	bl	80064b0 <_malloc_r>
 8006c40:	4607      	mov	r7, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0ec      	beq.n	8006c20 <_realloc_r+0x1c>
 8006c46:	42b5      	cmp	r5, r6
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	bf28      	it	cs
 8006c4e:	4632      	movcs	r2, r6
 8006c50:	f7ff ffca 	bl	8006be8 <memcpy>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7ff fbbe 	bl	80063d8 <_free_r>
 8006c5c:	463c      	mov	r4, r7
 8006c5e:	e7e0      	b.n	8006c22 <_realloc_r+0x1e>

08006c60 <_malloc_usable_size_r>:
 8006c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c64:	1f18      	subs	r0, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfbc      	itt	lt
 8006c6a:	580b      	ldrlt	r3, [r1, r0]
 8006c6c:	18c0      	addlt	r0, r0, r3
 8006c6e:	4770      	bx	lr

08006c70 <_init>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr

08006c7c <_fini>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr
