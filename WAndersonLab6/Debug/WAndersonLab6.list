
WAndersonLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000711c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b20  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dec  08008dec  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df4  08008df4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df4  08008df4  00009df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008dfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00025d7c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025df8  20025df8  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e08  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311b  00000000  00000000  0001deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00020fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6c  00000000  00000000  000223d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002715f  00000000  00000000  0002333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c17  00000000  00000000  0004a49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c77  00000000  00000000  000630b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00145d29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a4  00000000  00000000  00145db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080072b4 	.word	0x080072b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080072b4 	.word	0x080072b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f002 fbd8 	bl	8002d48 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 f91a 	bl	80007d0 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f8d7 	bl	8000750 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fa08 	bl	80009bc <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f000 fd06 	bl	8000fbc <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b02      	ldr	r3, [pc, #8]	@ (80005bc <ApplicationInit+0x2c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000098 	.word	0x20000098

080005c0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	4a59      	ldr	r2, [pc, #356]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d6:	4b57      	ldr	r3, [pc, #348]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	4b53      	ldr	r3, [pc, #332]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a52      	ldr	r2, [pc, #328]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b50      	ldr	r3, [pc, #320]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b4c      	ldr	r3, [pc, #304]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a4b      	ldr	r2, [pc, #300]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b45      	ldr	r3, [pc, #276]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b42      	ldr	r3, [pc, #264]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a36      	ldr	r2, [pc, #216]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800068a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800068e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000698:	2302      	movs	r3, #2
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800069c:	230e      	movs	r3, #14
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4824      	ldr	r0, [pc, #144]	@ (8000738 <LCD_GPIO_Init+0x178>)
 80006a8:	f002 fd70 	bl	800318c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006b0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4820      	ldr	r0, [pc, #128]	@ (800073c <LCD_GPIO_Init+0x17c>)
 80006ba:	f002 fd67 	bl	800318c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481d      	ldr	r0, [pc, #116]	@ (8000740 <LCD_GPIO_Init+0x180>)
 80006cc:	f002 fd5e 	bl	800318c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006d0:	2348      	movs	r3, #72	@ 0x48
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <LCD_GPIO_Init+0x184>)
 80006dc:	f002 fd56 	bl	800318c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4816      	ldr	r0, [pc, #88]	@ (8000748 <LCD_GPIO_Init+0x188>)
 80006ee:	f002 fd4d 	bl	800318c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006f2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006f6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4813      	ldr	r0, [pc, #76]	@ (800074c <LCD_GPIO_Init+0x18c>)
 8000700:	f002 fd44 	bl	800318c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000704:	2303      	movs	r3, #3
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000708:	2309      	movs	r3, #9
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	480a      	ldr	r0, [pc, #40]	@ (800073c <LCD_GPIO_Init+0x17c>)
 8000714:	f002 fd3a 	bl	800318c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <LCD_GPIO_Init+0x18c>)
 8000726:	f002 fd31 	bl	800318c <HAL_GPIO_Init>
}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021400 	.word	0x40021400
 800074c:	40021800 	.word	0x40021800

08000750 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	@ 0x40
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800075e:	23f0      	movs	r3, #240	@ 0xf0
 8000760:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000766:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800076a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000770:	23ff      	movs	r3, #255	@ 0xff
 8000772:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800077e:	2305      	movs	r3, #5
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <LTCD_Layer_Init+0x78>)
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800078c:	23f0      	movs	r3, #240	@ 0xf0
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000790:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <LTCD_Layer_Init+0x7c>)
 80007b2:	f004 f945 	bl	8004a40 <HAL_LTDC_ConfigLayer>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007bc:	f000 fbf8 	bl	8000fb0 <LCD_Error_Handler>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3740      	adds	r7, #64	@ 0x40
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000017c 	.word	0x2000017c
 80007cc:	200000a0 	.word	0x200000a0

080007d0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <LTCD__Init+0xb0>)
 80007d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000884 <LTCD__Init+0xb4>)
 80007d8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <LTCD__Init+0xb0>)
 80007dc:	2209      	movs	r2, #9
 80007de:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <LTCD__Init+0xb0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <LTCD__Init+0xb0>)
 80007e8:	221d      	movs	r2, #29
 80007ea:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <LTCD__Init+0xb0>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <LTCD__Init+0xb0>)
 80007f4:	f240 120d 	movw	r2, #269	@ 0x10d
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <LTCD__Init+0xb0>)
 80007fc:	f240 1243 	movw	r2, #323	@ 0x143
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <LTCD__Init+0xb0>)
 8000804:	f240 1217 	movw	r2, #279	@ 0x117
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <LTCD__Init+0xb0>)
 800080c:	f240 1247 	movw	r2, #327	@ 0x147
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <LTCD__Init+0xb0>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <LTCD__Init+0xb0>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <LTCD__Init+0xb0>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <LTCD__Init+0xb8>)
 800082c:	2208      	movs	r2, #8
 800082e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <LTCD__Init+0xb8>)
 8000832:	22c0      	movs	r2, #192	@ 0xc0
 8000834:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <LTCD__Init+0xb8>)
 8000838:	2204      	movs	r2, #4
 800083a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <LTCD__Init+0xb8>)
 800083e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <LTCD__Init+0xb8>)
 8000846:	f004 ff55 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <LTCD__Init+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <LTCD__Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <LTCD__Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <LTCD__Init+0xb0>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000862:	f7ff fead 	bl	80005c0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <LTCD__Init+0xb0>)
 8000868:	f004 f81a 	bl	80048a0 <HAL_LTDC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000872:	f000 fb9d 	bl	8000fb0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000876:	f000 fccb 	bl	8001210 <ili9341_Init>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000a0 	.word	0x200000a0
 8000884:	40016800 	.word	0x40016800
 8000888:	20000148 	.word	0x20000148

0800088c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	460b      	mov	r3, r1
 8000898:	80bb      	strh	r3, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800089e:	88ba      	ldrh	r2, [r7, #4]
 80008a0:	4613      	mov	r3, r2
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	461a      	mov	r2, r3
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	4413      	add	r3, r2
 80008ae:	4905      	ldr	r1, [pc, #20]	@ (80008c4 <LCD_Draw_Pixel+0x38>)
 80008b0:	887a      	ldrh	r2, [r7, #2]
 80008b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000017c 	.word	0x2000017c

080008c8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	80fb      	strh	r3, [r7, #6]
 80008da:	4603      	mov	r3, r0
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	425b      	negs	r3, r3
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	81fb      	strh	r3, [r7, #14]
 80008ee:	e034      	b.n	800095a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	425b      	negs	r3, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	81bb      	strh	r3, [r7, #12]
 80008f8:	e024      	b.n	8000944 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80008fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000902:	fb03 f202 	mul.w	r2, r3, r2
 8000906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800090a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800090e:	fb01 f303 	mul.w	r3, r1, r3
 8000912:	441a      	add	r2, r3
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	8879      	ldrh	r1, [r7, #2]
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	429a      	cmp	r2, r3
 800091e:	dc0b      	bgt.n	8000938 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000920:	89ba      	ldrh	r2, [r7, #12]
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	89fa      	ldrh	r2, [r7, #14]
 800092a:	88bb      	ldrh	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	b29b      	uxth	r3, r3
 8000930:	883a      	ldrh	r2, [r7, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	f7ff ffaa 	bl	800088c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800093c:	b29b      	uxth	r3, r3
 800093e:	3301      	adds	r3, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	81bb      	strh	r3, [r7, #12]
 8000944:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	429a      	cmp	r2, r3
 800094c:	ddd5      	ble.n	80008fa <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	b29b      	uxth	r3, r3
 8000954:	3301      	adds	r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	81fb      	strh	r3, [r7, #14]
 800095a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	429a      	cmp	r2, r3
 8000962:	ddc5      	ble.n	80008f0 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	e00b      	b.n	80009aa <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	88bb      	ldrh	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	b299      	uxth	r1, r3
 800099a:	883a      	ldrh	r2, [r7, #0]
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff74 	bl	800088c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	3301      	adds	r3, #1
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3ef      	bcc.n	8000992 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}

080009bc <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10e      	bne.n	80009f0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e007      	b.n	80009e8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009d8:	4908      	ldr	r1, [pc, #32]	@ (80009fc <LCD_Clear+0x40>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	88ba      	ldrh	r2, [r7, #4]
 80009de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009ee:	d3f3      	bcc.n	80009d8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	2000017c 	.word	0x2000017c

08000a00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <LCD_SetTextColor+0x1c>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	8013      	strh	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000000 	.word	0x20000000

08000a20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <LCD_SetFont+0x1c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000178 	.word	0x20000178

08000a40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e04c      	b.n	8000af8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e03f      	b.n	8000ae4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <LCD_Draw_Char+0xd4>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	409a      	lsls	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	fa42 f303 	asr.w	r3, r2, r3
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <LCD_Draw_Char+0x5c>
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	889b      	ldrh	r3, [r3, #4]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d920      	bls.n	8000ade <LCD_Draw_Char+0x9e>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <LCD_Draw_Char+0x80>
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	d80e      	bhi.n	8000ade <LCD_Draw_Char+0x9e>
      {
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <LCD_Draw_Char+0xd8>)
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff fed7 	bl	800088c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d3b8      	bcc.n	8000a64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	88db      	ldrh	r3, [r3, #6]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d3ab      	bcc.n	8000a5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000178 	.word	0x20000178
 8000b14:	aaaaaaab 	.word	0xaaaaaaab
 8000b18:	20000000 	.word	0x20000000

08000b1c <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	3b20      	subs	r3, #32
 8000b32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b3e:	6809      	ldr	r1, [r1, #0]
 8000b40:	88c9      	ldrh	r1, [r1, #6]
 8000b42:	fb01 f303 	mul.w	r3, r1, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	441a      	add	r2, r3
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff76 	bl	8000a40 <LCD_Draw_Char>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000178 	.word	0x20000178

08000b60 <LCD_DrawMenuScreen>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void LCD_DrawMenuScreen(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    LCD_Clear(0, COLOR_BG);
 8000b64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff ff27 	bl	80009bc <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff46 	bl	8000a00 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000b74:	482d      	ldr	r0, [pc, #180]	@ (8000c2c <LCD_DrawMenuScreen+0xcc>)
 8000b76:	f7ff ff53 	bl	8000a20 <LCD_SetFont>
    LCD_DisplayChar(50, 40, '1');
 8000b7a:	2231      	movs	r2, #49	@ 0x31
 8000b7c:	2128      	movs	r1, #40	@ 0x28
 8000b7e:	2032      	movs	r0, #50	@ 0x32
 8000b80:	f7ff ffcc 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 60, '-');
 8000b84:	222d      	movs	r2, #45	@ 0x2d
 8000b86:	213c      	movs	r1, #60	@ 0x3c
 8000b88:	2032      	movs	r0, #50	@ 0x32
 8000b8a:	f7ff ffc7 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 80, 'P');
 8000b8e:	2250      	movs	r2, #80	@ 0x50
 8000b90:	2150      	movs	r1, #80	@ 0x50
 8000b92:	2032      	movs	r0, #50	@ 0x32
 8000b94:	f7ff ffc2 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 100, 'L');
 8000b98:	224c      	movs	r2, #76	@ 0x4c
 8000b9a:	2164      	movs	r1, #100	@ 0x64
 8000b9c:	2032      	movs	r0, #50	@ 0x32
 8000b9e:	f7ff ffbd 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 120, 'A');
 8000ba2:	2241      	movs	r2, #65	@ 0x41
 8000ba4:	2178      	movs	r1, #120	@ 0x78
 8000ba6:	2032      	movs	r0, #50	@ 0x32
 8000ba8:	f7ff ffb8 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 140, 'Y');
 8000bac:	2259      	movs	r2, #89	@ 0x59
 8000bae:	218c      	movs	r1, #140	@ 0x8c
 8000bb0:	2032      	movs	r0, #50	@ 0x32
 8000bb2:	f7ff ffb3 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 160, 'E');
 8000bb6:	2245      	movs	r2, #69	@ 0x45
 8000bb8:	21a0      	movs	r1, #160	@ 0xa0
 8000bba:	2032      	movs	r0, #50	@ 0x32
 8000bbc:	f7ff ffae 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 180, 'R');
 8000bc0:	2252      	movs	r2, #82	@ 0x52
 8000bc2:	21b4      	movs	r1, #180	@ 0xb4
 8000bc4:	2032      	movs	r0, #50	@ 0x32
 8000bc6:	f7ff ffa9 	bl	8000b1c <LCD_DisplayChar>

    LCD_DisplayChar(170, 40, '2');
 8000bca:	2232      	movs	r2, #50	@ 0x32
 8000bcc:	2128      	movs	r1, #40	@ 0x28
 8000bce:	20aa      	movs	r0, #170	@ 0xaa
 8000bd0:	f7ff ffa4 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 60, '-');
 8000bd4:	222d      	movs	r2, #45	@ 0x2d
 8000bd6:	213c      	movs	r1, #60	@ 0x3c
 8000bd8:	20aa      	movs	r0, #170	@ 0xaa
 8000bda:	f7ff ff9f 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 80, 'P');
 8000bde:	2250      	movs	r2, #80	@ 0x50
 8000be0:	2150      	movs	r1, #80	@ 0x50
 8000be2:	20aa      	movs	r0, #170	@ 0xaa
 8000be4:	f7ff ff9a 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 100, 'L');
 8000be8:	224c      	movs	r2, #76	@ 0x4c
 8000bea:	2164      	movs	r1, #100	@ 0x64
 8000bec:	20aa      	movs	r0, #170	@ 0xaa
 8000bee:	f7ff ff95 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 120, 'A');
 8000bf2:	2241      	movs	r2, #65	@ 0x41
 8000bf4:	2178      	movs	r1, #120	@ 0x78
 8000bf6:	20aa      	movs	r0, #170	@ 0xaa
 8000bf8:	f7ff ff90 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 140, 'Y');
 8000bfc:	2259      	movs	r2, #89	@ 0x59
 8000bfe:	218c      	movs	r1, #140	@ 0x8c
 8000c00:	20aa      	movs	r0, #170	@ 0xaa
 8000c02:	f7ff ff8b 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 160, 'E');
 8000c06:	2245      	movs	r2, #69	@ 0x45
 8000c08:	21a0      	movs	r1, #160	@ 0xa0
 8000c0a:	20aa      	movs	r0, #170	@ 0xaa
 8000c0c:	f7ff ff86 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 180, 'R');
 8000c10:	2252      	movs	r2, #82	@ 0x52
 8000c12:	21b4      	movs	r1, #180	@ 0xb4
 8000c14:	20aa      	movs	r0, #170	@ 0xaa
 8000c16:	f7ff ff81 	bl	8000b1c <LCD_DisplayChar>

    LCD_Draw_Vertical_Line(120, 40, 240, LCD_COLOR_BLACK);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	22f0      	movs	r2, #240	@ 0xf0
 8000c1e:	2128      	movs	r1, #40	@ 0x28
 8000c20:	2078      	movs	r0, #120	@ 0x78
 8000c22:	f7ff fea4 	bl	800096e <LCD_Draw_Vertical_Line>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000004 	.word	0x20000004

08000c30 <LCD_DrawGameBoard>:

void LCD_DrawGameBoard(int board[6][7]) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 8000c38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff febd 	bl	80009bc <LCD_Clear>

    for (int row = 0; row < BOARD_ROWS; row++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e047      	b.n	8000cd8 <LCD_DrawGameBoard+0xa8>
        for (int col = 0; col < BOARD_COLS; col++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	e03e      	b.n	8000ccc <LCD_DrawGameBoard+0x9c>
            int x = BOARD_X_START + col * (2 * CELL_RADIUS + CELL_SPACING);
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	015b      	lsls	r3, r3, #5
 8000c52:	3314      	adds	r3, #20
 8000c54:	613b      	str	r3, [r7, #16]
            int y = BOARD_Y_START + row * (2 * CELL_RADIUS + CELL_SPACING);
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	333c      	adds	r3, #60	@ 0x3c
 8000c5c:	60fb      	str	r3, [r7, #12]
            uint16_t color = COLOR_BG;
 8000c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c62:	82fb      	strh	r3, [r7, #22]

            if (board[row][col] == 1) color = COLOR_PLAYER1;
 8000c64:	69fa      	ldr	r2, [r7, #28]
 8000c66:	4613      	mov	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d103      	bne.n	8000c86 <LCD_DrawGameBoard+0x56>
 8000c7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e00f      	b.n	8000ca6 <LCD_DrawGameBoard+0x76>
            else if (board[row][col] == 2) color = COLOR_PLAYER2;
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d102      	bne.n	8000ca6 <LCD_DrawGameBoard+0x76>
 8000ca0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ca4:	82fb      	strh	r3, [r7, #22]

            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, COLOR_GRID);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	f7ff fe09 	bl	80008c8 <LCD_Draw_Circle_Fill>
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS - 3, color);
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	b298      	uxth	r0, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	8afb      	ldrh	r3, [r7, #22]
 8000cc0:	220b      	movs	r2, #11
 8000cc2:	f7ff fe01 	bl	80008c8 <LCD_Draw_Circle_Fill>
        for (int col = 0; col < BOARD_COLS; col++) {
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	ddbd      	ble.n	8000c4e <LCD_DrawGameBoard+0x1e>
    for (int row = 0; row < BOARD_ROWS; row++) {
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	ddb4      	ble.n	8000c48 <LCD_DrawGameBoard+0x18>
        }
    }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LCD_ClearFloatingBand>:

void LCD_ClearFloatingBand(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	e012      	b.n	8000d1a <LCD_ClearFloatingBand+0x32>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	80bb      	strh	r3, [r7, #4]
 8000cf8:	e009      	b.n	8000d0e <LCD_ClearFloatingBand+0x26>
        LCD_Draw_Pixel(x, y, COLOR_BG);
 8000cfa:	88f9      	ldrh	r1, [r7, #6]
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fdc2 	bl	800088c <LCD_Draw_Pixel>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	80bb      	strh	r3, [r7, #4]
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	2bef      	cmp	r3, #239	@ 0xef
 8000d12:	d9f2      	bls.n	8000cfa <LCD_ClearFloatingBand+0x12>
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	3301      	adds	r3, #1
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d1e:	d9e9      	bls.n	8000cf4 <LCD_ClearFloatingBand+0xc>
      }
    }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <draw_elapsed_time>:

void draw_elapsed_time(uint32_t t) {
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    char buf[8];
    sprintf(buf, "%lu", t);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4931      	ldr	r1, [pc, #196]	@ (8000e00 <draw_elapsed_time+0xd4>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fe19 	bl	8006974 <siprintf>

    uint16_t text_w = strlen(buf) * 8;
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa52 	bl	80001f0 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	837b      	strh	r3, [r7, #26]
    uint16_t text_h = 12;
 8000d54:	230c      	movs	r3, #12
 8000d56:	833b      	strh	r3, [r7, #24]
    uint16_t x0 = (LCD_PIXEL_WIDTH - text_w) / 2;
 8000d58:	8b7b      	ldrh	r3, [r7, #26]
 8000d5a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000d5e:	0fda      	lsrs	r2, r3, #31
 8000d60:	4413      	add	r3, r2
 8000d62:	105b      	asrs	r3, r3, #1
 8000d64:	82fb      	strh	r3, [r7, #22]
    uint16_t y0 = LCD_PIXEL_HEIGHT - text_h - 2;
 8000d66:	8b3b      	ldrh	r3, [r7, #24]
 8000d68:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8000d6c:	82bb      	strh	r3, [r7, #20]

    for (uint16_t i = 0; i < strlen(buf); i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	83fb      	strh	r3, [r7, #30]
 8000d72:	e013      	b.n	8000d9c <draw_elapsed_time+0x70>
        LCD_Draw_Circle_Fill(x0 + i * 12, y0 + 4, 10, COLOR_BG);
 8000d74:	8bfb      	ldrh	r3, [r7, #30]
 8000d76:	461a      	mov	r2, r3
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	8afb      	ldrh	r3, [r7, #22]
 8000d82:	4413      	add	r3, r2
 8000d84:	b298      	uxth	r0, r3
 8000d86:	8abb      	ldrh	r3, [r7, #20]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	b299      	uxth	r1, r3
 8000d8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d90:	220a      	movs	r2, #10
 8000d92:	f7ff fd99 	bl	80008c8 <LCD_Draw_Circle_Fill>
    for (uint16_t i = 0; i < strlen(buf); i++) {
 8000d96:	8bfb      	ldrh	r3, [r7, #30]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	83fb      	strh	r3, [r7, #30]
 8000d9c:	8bfc      	ldrh	r4, [r7, #30]
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa24 	bl	80001f0 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	429c      	cmp	r4, r3
 8000dac:	d3e2      	bcc.n	8000d74 <draw_elapsed_time+0x48>
    }

    // Draw new text
    LCD_SetFont(&Font12x12);
 8000dae:	4815      	ldr	r0, [pc, #84]	@ (8000e04 <draw_elapsed_time+0xd8>)
 8000db0:	f7ff fe36 	bl	8000a20 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fe23 	bl	8000a00 <LCD_SetTextColor>
    for (uint8_t i = 0; buf[i]; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	777b      	strb	r3, [r7, #29]
 8000dbe:	e012      	b.n	8000de6 <draw_elapsed_time+0xba>
        LCD_DisplayChar(x0 + i * 8, y0, buf[i]);
 8000dc0:	7f7b      	ldrb	r3, [r7, #29]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	8afb      	ldrh	r3, [r7, #22]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b298      	uxth	r0, r3
 8000dce:	7f7b      	ldrb	r3, [r7, #29]
 8000dd0:	3320      	adds	r3, #32
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000dd8:	8abb      	ldrh	r3, [r7, #20]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fe9e 	bl	8000b1c <LCD_DisplayChar>
    for (uint8_t i = 0; buf[i]; i++) {
 8000de0:	7f7b      	ldrb	r3, [r7, #29]
 8000de2:	3301      	adds	r3, #1
 8000de4:	777b      	strb	r3, [r7, #29]
 8000de6:	7f7b      	ldrb	r3, [r7, #29]
 8000de8:	3320      	adds	r3, #32
 8000dea:	443b      	add	r3, r7
 8000dec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1e5      	bne.n	8000dc0 <draw_elapsed_time+0x94>
    }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	080072cc 	.word	0x080072cc
 8000e04:	2000000c 	.word	0x2000000c

08000e08 <LCD_DrawGameOverScreen>:

void LCD_DrawGameOverScreen(int winner, int redWins, int yellowWins, int elapsedTime) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
    LCD_Clear(0, COLOR_BG);
 8000e16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fdce 	bl	80009bc <LCD_Clear>
    LCD_SetFont(&Font16x24);
 8000e20:	4856      	ldr	r0, [pc, #344]	@ (8000f7c <LCD_DrawGameOverScreen+0x174>)
 8000e22:	f7ff fdfd 	bl	8000a20 <LCD_SetFont>

    if (winner == 1) {
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d12c      	bne.n	8000e86 <LCD_DrawGameOverScreen+0x7e>
        LCD_SetTextColor(LCD_COLOR_RED);
 8000e2c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000e30:	f7ff fde6 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(40, 100, 'R');
 8000e34:	2252      	movs	r2, #82	@ 0x52
 8000e36:	2164      	movs	r1, #100	@ 0x64
 8000e38:	2028      	movs	r0, #40	@ 0x28
 8000e3a:	f7ff fe6f 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'E');
 8000e3e:	2245      	movs	r2, #69	@ 0x45
 8000e40:	2164      	movs	r1, #100	@ 0x64
 8000e42:	203c      	movs	r0, #60	@ 0x3c
 8000e44:	f7ff fe6a 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'D');
 8000e48:	2244      	movs	r2, #68	@ 0x44
 8000e4a:	2164      	movs	r1, #100	@ 0x64
 8000e4c:	2050      	movs	r0, #80	@ 0x50
 8000e4e:	f7ff fe65 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, ' ');
 8000e52:	2220      	movs	r2, #32
 8000e54:	2164      	movs	r1, #100	@ 0x64
 8000e56:	2064      	movs	r0, #100	@ 0x64
 8000e58:	f7ff fe60 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 8000e5c:	2257      	movs	r2, #87	@ 0x57
 8000e5e:	2164      	movs	r1, #100	@ 0x64
 8000e60:	2078      	movs	r0, #120	@ 0x78
 8000e62:	f7ff fe5b 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'I');
 8000e66:	2249      	movs	r2, #73	@ 0x49
 8000e68:	2164      	movs	r1, #100	@ 0x64
 8000e6a:	208c      	movs	r0, #140	@ 0x8c
 8000e6c:	f7ff fe56 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'N');
 8000e70:	224e      	movs	r2, #78	@ 0x4e
 8000e72:	2164      	movs	r1, #100	@ 0x64
 8000e74:	20a0      	movs	r0, #160	@ 0xa0
 8000e76:	f7ff fe51 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'S');
 8000e7a:	2253      	movs	r2, #83	@ 0x53
 8000e7c:	2164      	movs	r1, #100	@ 0x64
 8000e7e:	20b4      	movs	r0, #180	@ 0xb4
 8000e80:	f7ff fe4c 	bl	8000b1c <LCD_DisplayChar>
 8000e84:	e050      	b.n	8000f28 <LCD_DrawGameOverScreen+0x120>
    }
    else if (winner == 2) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d13b      	bne.n	8000f04 <LCD_DrawGameOverScreen+0xfc>
        LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000e8c:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000e90:	f7ff fdb6 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(20, 100, 'Y');
 8000e94:	2259      	movs	r2, #89	@ 0x59
 8000e96:	2164      	movs	r1, #100	@ 0x64
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f7ff fe3f 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(40, 100, 'E');
 8000e9e:	2245      	movs	r2, #69	@ 0x45
 8000ea0:	2164      	movs	r1, #100	@ 0x64
 8000ea2:	2028      	movs	r0, #40	@ 0x28
 8000ea4:	f7ff fe3a 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'L');
 8000ea8:	224c      	movs	r2, #76	@ 0x4c
 8000eaa:	2164      	movs	r1, #100	@ 0x64
 8000eac:	203c      	movs	r0, #60	@ 0x3c
 8000eae:	f7ff fe35 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'L');
 8000eb2:	224c      	movs	r2, #76	@ 0x4c
 8000eb4:	2164      	movs	r1, #100	@ 0x64
 8000eb6:	2050      	movs	r0, #80	@ 0x50
 8000eb8:	f7ff fe30 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, 'O');
 8000ebc:	224f      	movs	r2, #79	@ 0x4f
 8000ebe:	2164      	movs	r1, #100	@ 0x64
 8000ec0:	2064      	movs	r0, #100	@ 0x64
 8000ec2:	f7ff fe2b 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 8000ec6:	2257      	movs	r2, #87	@ 0x57
 8000ec8:	2164      	movs	r1, #100	@ 0x64
 8000eca:	2078      	movs	r0, #120	@ 0x78
 8000ecc:	f7ff fe26 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, ' ');
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	2164      	movs	r1, #100	@ 0x64
 8000ed4:	208c      	movs	r0, #140	@ 0x8c
 8000ed6:	f7ff fe21 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'W');
 8000eda:	2257      	movs	r2, #87	@ 0x57
 8000edc:	2164      	movs	r1, #100	@ 0x64
 8000ede:	20a0      	movs	r0, #160	@ 0xa0
 8000ee0:	f7ff fe1c 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'I');
 8000ee4:	2249      	movs	r2, #73	@ 0x49
 8000ee6:	2164      	movs	r1, #100	@ 0x64
 8000ee8:	20b4      	movs	r0, #180	@ 0xb4
 8000eea:	f7ff fe17 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(200, 100, 'N');
 8000eee:	224e      	movs	r2, #78	@ 0x4e
 8000ef0:	2164      	movs	r1, #100	@ 0x64
 8000ef2:	20c8      	movs	r0, #200	@ 0xc8
 8000ef4:	f7ff fe12 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(220, 100, 'S');
 8000ef8:	2253      	movs	r2, #83	@ 0x53
 8000efa:	2164      	movs	r1, #100	@ 0x64
 8000efc:	20dc      	movs	r0, #220	@ 0xdc
 8000efe:	f7ff fe0d 	bl	8000b1c <LCD_DisplayChar>
 8000f02:	e011      	b.n	8000f28 <LCD_DrawGameOverScreen+0x120>
    }
    else { // tie
        LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fd7b 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(100, 100, 'T');
 8000f0a:	2254      	movs	r2, #84	@ 0x54
 8000f0c:	2164      	movs	r1, #100	@ 0x64
 8000f0e:	2064      	movs	r0, #100	@ 0x64
 8000f10:	f7ff fe04 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'I');
 8000f14:	2249      	movs	r2, #73	@ 0x49
 8000f16:	2164      	movs	r1, #100	@ 0x64
 8000f18:	2078      	movs	r0, #120	@ 0x78
 8000f1a:	f7ff fdff 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'E');
 8000f1e:	2245      	movs	r2, #69	@ 0x45
 8000f20:	2164      	movs	r1, #100	@ 0x64
 8000f22:	208c      	movs	r0, #140	@ 0x8c
 8000f24:	f7ff fdfa 	bl	8000b1c <LCD_DisplayChar>
    }

    // Draw "Restart" below the winner line
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fd69 	bl	8000a00 <LCD_SetTextColor>
    LCD_DisplayChar(60, 180, 'R');
 8000f2e:	2252      	movs	r2, #82	@ 0x52
 8000f30:	21b4      	movs	r1, #180	@ 0xb4
 8000f32:	203c      	movs	r0, #60	@ 0x3c
 8000f34:	f7ff fdf2 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(80, 180, 'E');
 8000f38:	2245      	movs	r2, #69	@ 0x45
 8000f3a:	21b4      	movs	r1, #180	@ 0xb4
 8000f3c:	2050      	movs	r0, #80	@ 0x50
 8000f3e:	f7ff fded 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(100, 180, 'S');
 8000f42:	2253      	movs	r2, #83	@ 0x53
 8000f44:	21b4      	movs	r1, #180	@ 0xb4
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f7ff fde8 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(120, 180, 'T');
 8000f4c:	2254      	movs	r2, #84	@ 0x54
 8000f4e:	21b4      	movs	r1, #180	@ 0xb4
 8000f50:	2078      	movs	r0, #120	@ 0x78
 8000f52:	f7ff fde3 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(140, 180, 'A');
 8000f56:	2241      	movs	r2, #65	@ 0x41
 8000f58:	21b4      	movs	r1, #180	@ 0xb4
 8000f5a:	208c      	movs	r0, #140	@ 0x8c
 8000f5c:	f7ff fdde 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(160, 180, 'R');
 8000f60:	2252      	movs	r2, #82	@ 0x52
 8000f62:	21b4      	movs	r1, #180	@ 0xb4
 8000f64:	20a0      	movs	r0, #160	@ 0xa0
 8000f66:	f7ff fdd9 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 180, 'T');
 8000f6a:	2254      	movs	r2, #84	@ 0x54
 8000f6c:	21b4      	movs	r1, #180	@ 0xb4
 8000f6e:	20b4      	movs	r0, #180	@ 0xb4
 8000f70:	f7ff fdd4 	bl	8000b1c <LCD_DisplayChar>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000004 	.word	0x20000004

08000f80 <LCD_DrawFloatingCoin>:



void LCD_DrawFloatingCoin(int column, uint16_t color) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
    int x = BOARD_X_START + column * (2 * CELL_RADIUS + CELL_SPACING);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	3314      	adds	r3, #20
 8000f92:	60fb      	str	r3, [r7, #12]
    int y = BOARD_Y_START - 30;
 8000f94:	231e      	movs	r3, #30
 8000f96:	60bb      	str	r3, [r7, #8]

    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b298      	uxth	r0, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	220e      	movs	r2, #14
 8000fa4:	f7ff fc90 	bl	80008c8 <LCD_Draw_Circle_Fill>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <LCD_Error_Handler+0x8>

08000fbc <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000fc0:	f001 fb7a 	bl	80026b8 <STMPE811_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d001      	beq.n	8000fce <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000fca:	bf00      	nop
 8000fcc:	e7fd      	b.n	8000fca <InitializeLCDTouch+0xe>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f001 fc24 	bl	8002828 <STMPE811_ReadTouch>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <placeCoin>:
 *      Author: willa
 */

#include "game_state.h"

int placeCoin(int board[6][7], int col, int player) {
 8000fea:	b480      	push	{r7}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
    for (int row = 5; row >= 0; row--) {
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e01d      	b.n	8001038 <placeCoin+0x4e>
        if (board[row][col] == 0) {
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10d      	bne.n	8001032 <placeCoin+0x48>
            board[row][col] = player;
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	461a      	mov	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            return row;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	e007      	b.n	8001042 <placeCoin+0x58>
    for (int row = 5; row >= 0; row--) {
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3b01      	subs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dade      	bge.n	8000ffc <placeCoin+0x12>
        }
    }
    return -1; // COL FULL, IMPLIMENT THIS LATER AND DON'T FORGET
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <countDirection>:

static int countDirection(int board[6][7], int startRow, int startCol, int chngRow, int chngCol, int player) {
 800104e:	b480      	push	{r7}
 8001050:	b089      	sub	sp, #36	@ 0x24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
    int count = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    int r = startRow + chngRow;
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
    int c = startCol + chngCol;
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106c:	4413      	add	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
    while (r >= 0 && r < 6 && c >= 0 && c < 7 && board[r][c] == player) {
 8001070:	e00a      	b.n	8001088 <countDirection+0x3a>
        count++;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
        r += chngRow;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        c += chngCol;
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001084:	4413      	add	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
    while (r >= 0 && r < 6 && c >= 0 && c < 7 && board[r][c] == player) {
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db16      	blt.n	80010bc <countDirection+0x6e>
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b05      	cmp	r3, #5
 8001092:	dc13      	bgt.n	80010bc <countDirection+0x6e>
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db10      	blt.n	80010bc <countDirection+0x6e>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b06      	cmp	r3, #6
 800109e:	dc0d      	bgt.n	80010bc <countDirection+0x6e>
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d0da      	beq.n	8001072 <countDirection+0x24>
    }
    return count;
 80010bc:	69fb      	ldr	r3, [r7, #28]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <checkWinOrTie>:


// 1 IS PLAYER WIN
// 2 IS TIE
// 0 NO WIN OR TIE, GAME STILL GOING
int checkWinOrTie(int board[6][7], int row, int col, int player) {
 80010ca:	b590      	push	{r4, r7, lr}
 80010cc:	b089      	sub	sp, #36	@ 0x24
 80010ce:	af02      	add	r7, sp, #8
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	603b      	str	r3, [r7, #0]
    if (1 + countDirection(board, row, col, 0, 1, player) +
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f7ff ffb1 	bl	800104e <countDirection>
 80010ec:	4603      	mov	r3, r0
 80010ee:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 0, -1, player) >= 4)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff ffa4 	bl	800104e <countDirection>
 8001106:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 0, 1, player) +
 8001108:	4423      	add	r3, r4
 800110a:	2b03      	cmp	r3, #3
 800110c:	dd01      	ble.n	8001112 <checkWinOrTie+0x48>
        return 1;
 800110e:	2301      	movs	r3, #1
 8001110:	e07a      	b.n	8001208 <checkWinOrTie+0x13e>

    if (1 + countDirection(board, row, col, 1, 0, player) +
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	2300      	movs	r3, #0
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff94 	bl	800104e <countDirection>
 8001126:	4603      	mov	r3, r0
 8001128:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, 0, player) >= 4)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ff87 	bl	800104e <countDirection>
 8001140:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 0, player) +
 8001142:	4423      	add	r3, r4
 8001144:	2b03      	cmp	r3, #3
 8001146:	dd01      	ble.n	800114c <checkWinOrTie+0x82>
        return 1;
 8001148:	2301      	movs	r3, #1
 800114a:	e05d      	b.n	8001208 <checkWinOrTie+0x13e>

    if (1 + countDirection(board, row, col, 1, 1, player) +
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2301      	movs	r3, #1
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff ff77 	bl	800104e <countDirection>
 8001160:	4603      	mov	r3, r0
 8001162:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, -1, player) >= 4)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff ff69 	bl	800104e <countDirection>
 800117c:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 1, player) +
 800117e:	4423      	add	r3, r4
 8001180:	2b03      	cmp	r3, #3
 8001182:	dd01      	ble.n	8001188 <checkWinOrTie+0xbe>
        return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e03f      	b.n	8001208 <checkWinOrTie+0x13e>

    if (1 + countDirection(board, row, col, -1, 1, player) +
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff ff58 	bl	800104e <countDirection>
 800119e:	4603      	mov	r3, r0
 80011a0:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 1, -1, player) >= 4)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff4b 	bl	800104e <countDirection>
 80011b8:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, -1, 1, player) +
 80011ba:	4423      	add	r3, r4
 80011bc:	2b03      	cmp	r3, #3
 80011be:	dd01      	ble.n	80011c4 <checkWinOrTie+0xfa>
        return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e021      	b.n	8001208 <checkWinOrTie+0x13e>

    // CHECK TIE
    for (int r = 0; r < 6; r++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e01a      	b.n	8001200 <checkWinOrTie+0x136>
        for (int c = 0; c < 7; c++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e011      	b.n	80011f4 <checkWinOrTie+0x12a>
            if (board[r][c] == 0)
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <checkWinOrTie+0x124>
                return 0; // GAME STILL RUNNING
 80011ea:	2300      	movs	r3, #0
 80011ec:	e00c      	b.n	8001208 <checkWinOrTie+0x13e>
        for (int c = 0; c < 7; c++) {
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	3301      	adds	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	ddea      	ble.n	80011d0 <checkWinOrTie+0x106>
    for (int r = 0; r < 6; r++) {
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b05      	cmp	r3, #5
 8001204:	dde1      	ble.n	80011ca <checkWinOrTie+0x100>
        }
    }

    return 2;
 8001206:	2302      	movs	r3, #2
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001214:	f000 f9fe 	bl	8001614 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001218:	20ca      	movs	r0, #202	@ 0xca
 800121a:	f000 f943 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800121e:	20c3      	movs	r0, #195	@ 0xc3
 8001220:	f000 f94d 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001224:	2008      	movs	r0, #8
 8001226:	f000 f94a 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800122a:	2050      	movs	r0, #80	@ 0x50
 800122c:	f000 f947 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001230:	20cf      	movs	r0, #207	@ 0xcf
 8001232:	f000 f937 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f941 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800123c:	20c1      	movs	r0, #193	@ 0xc1
 800123e:	f000 f93e 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001242:	2030      	movs	r0, #48	@ 0x30
 8001244:	f000 f93b 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001248:	20ed      	movs	r0, #237	@ 0xed
 800124a:	f000 f92b 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800124e:	2064      	movs	r0, #100	@ 0x64
 8001250:	f000 f935 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f932 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800125a:	2012      	movs	r0, #18
 800125c:	f000 f92f 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001260:	2081      	movs	r0, #129	@ 0x81
 8001262:	f000 f92c 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001266:	20e8      	movs	r0, #232	@ 0xe8
 8001268:	f000 f91c 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800126c:	2085      	movs	r0, #133	@ 0x85
 800126e:	f000 f926 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f923 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001278:	2078      	movs	r0, #120	@ 0x78
 800127a:	f000 f920 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800127e:	20cb      	movs	r0, #203	@ 0xcb
 8001280:	f000 f910 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001284:	2039      	movs	r0, #57	@ 0x39
 8001286:	f000 f91a 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800128a:	202c      	movs	r0, #44	@ 0x2c
 800128c:	f000 f917 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f914 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001296:	2034      	movs	r0, #52	@ 0x34
 8001298:	f000 f911 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800129c:	2002      	movs	r0, #2
 800129e:	f000 f90e 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80012a2:	20f7      	movs	r0, #247	@ 0xf7
 80012a4:	f000 f8fe 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80012a8:	2020      	movs	r0, #32
 80012aa:	f000 f908 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80012ae:	20ea      	movs	r0, #234	@ 0xea
 80012b0:	f000 f8f8 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f902 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f8ff 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80012c0:	20b1      	movs	r0, #177	@ 0xb1
 80012c2:	f000 f8ef 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f8f9 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012cc:	201b      	movs	r0, #27
 80012ce:	f000 f8f6 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80012d2:	20b6      	movs	r0, #182	@ 0xb6
 80012d4:	f000 f8e6 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80012d8:	200a      	movs	r0, #10
 80012da:	f000 f8f0 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80012de:	20a2      	movs	r0, #162	@ 0xa2
 80012e0:	f000 f8ed 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80012e4:	20c0      	movs	r0, #192	@ 0xc0
 80012e6:	f000 f8dd 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012ea:	2010      	movs	r0, #16
 80012ec:	f000 f8e7 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80012f0:	20c1      	movs	r0, #193	@ 0xc1
 80012f2:	f000 f8d7 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012f6:	2010      	movs	r0, #16
 80012f8:	f000 f8e1 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80012fc:	20c5      	movs	r0, #197	@ 0xc5
 80012fe:	f000 f8d1 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001302:	2045      	movs	r0, #69	@ 0x45
 8001304:	f000 f8db 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001308:	2015      	movs	r0, #21
 800130a:	f000 f8d8 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800130e:	20c7      	movs	r0, #199	@ 0xc7
 8001310:	f000 f8c8 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001314:	2090      	movs	r0, #144	@ 0x90
 8001316:	f000 f8d2 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800131a:	2036      	movs	r0, #54	@ 0x36
 800131c:	f000 f8c2 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001320:	20c8      	movs	r0, #200	@ 0xc8
 8001322:	f000 f8cc 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001326:	20f2      	movs	r0, #242	@ 0xf2
 8001328:	f000 f8bc 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f8c6 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001332:	20b0      	movs	r0, #176	@ 0xb0
 8001334:	f000 f8b6 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001338:	20c2      	movs	r0, #194	@ 0xc2
 800133a:	f000 f8c0 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800133e:	20b6      	movs	r0, #182	@ 0xb6
 8001340:	f000 f8b0 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001344:	200a      	movs	r0, #10
 8001346:	f000 f8ba 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800134a:	20a7      	movs	r0, #167	@ 0xa7
 800134c:	f000 f8b7 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001350:	2027      	movs	r0, #39	@ 0x27
 8001352:	f000 f8b4 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001356:	2004      	movs	r0, #4
 8001358:	f000 f8b1 	bl	80014be <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800135c:	202a      	movs	r0, #42	@ 0x2a
 800135e:	f000 f8a1 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f8ab 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f8a8 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f8a5 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001374:	20ef      	movs	r0, #239	@ 0xef
 8001376:	f000 f8a2 	bl	80014be <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800137a:	202b      	movs	r0, #43	@ 0x2b
 800137c:	f000 f892 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f89c 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f899 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 f896 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001392:	203f      	movs	r0, #63	@ 0x3f
 8001394:	f000 f893 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001398:	20f6      	movs	r0, #246	@ 0xf6
 800139a:	f000 f883 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f88d 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f88a 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80013aa:	2006      	movs	r0, #6
 80013ac:	f000 f887 	bl	80014be <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80013b0:	202c      	movs	r0, #44	@ 0x2c
 80013b2:	f000 f877 	bl	80014a4 <ili9341_Write_Reg>
  LCD_Delay(200);
 80013b6:	20c8      	movs	r0, #200	@ 0xc8
 80013b8:	f000 f9e8 	bl	800178c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80013bc:	2026      	movs	r0, #38	@ 0x26
 80013be:	f000 f871 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 f87b 	bl	80014be <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80013c8:	20e0      	movs	r0, #224	@ 0xe0
 80013ca:	f000 f86b 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f875 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80013d4:	2029      	movs	r0, #41	@ 0x29
 80013d6:	f000 f872 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80013da:	2024      	movs	r0, #36	@ 0x24
 80013dc:	f000 f86f 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80013e0:	200c      	movs	r0, #12
 80013e2:	f000 f86c 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80013e6:	200e      	movs	r0, #14
 80013e8:	f000 f869 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013ec:	2009      	movs	r0, #9
 80013ee:	f000 f866 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80013f2:	204e      	movs	r0, #78	@ 0x4e
 80013f4:	f000 f863 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 f860 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80013fe:	203c      	movs	r0, #60	@ 0x3c
 8001400:	f000 f85d 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001404:	2009      	movs	r0, #9
 8001406:	f000 f85a 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800140a:	2013      	movs	r0, #19
 800140c:	f000 f857 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001410:	2005      	movs	r0, #5
 8001412:	f000 f854 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001416:	2017      	movs	r0, #23
 8001418:	f000 f851 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800141c:	2011      	movs	r0, #17
 800141e:	f000 f84e 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f84b 	bl	80014be <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001428:	20e1      	movs	r0, #225	@ 0xe1
 800142a:	f000 f83b 	bl	80014a4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f845 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001434:	2016      	movs	r0, #22
 8001436:	f000 f842 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800143a:	201b      	movs	r0, #27
 800143c:	f000 f83f 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001440:	2004      	movs	r0, #4
 8001442:	f000 f83c 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001446:	2011      	movs	r0, #17
 8001448:	f000 f839 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800144c:	2007      	movs	r0, #7
 800144e:	f000 f836 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001452:	2031      	movs	r0, #49	@ 0x31
 8001454:	f000 f833 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001458:	2033      	movs	r0, #51	@ 0x33
 800145a:	f000 f830 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800145e:	2042      	movs	r0, #66	@ 0x42
 8001460:	f000 f82d 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001464:	2005      	movs	r0, #5
 8001466:	f000 f82a 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800146a:	200c      	movs	r0, #12
 800146c:	f000 f827 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001470:	200a      	movs	r0, #10
 8001472:	f000 f824 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001476:	2028      	movs	r0, #40	@ 0x28
 8001478:	f000 f821 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800147c:	202f      	movs	r0, #47	@ 0x2f
 800147e:	f000 f81e 	bl	80014be <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001482:	200f      	movs	r0, #15
 8001484:	f000 f81b 	bl	80014be <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001488:	2011      	movs	r0, #17
 800148a:	f000 f80b 	bl	80014a4 <ili9341_Write_Reg>
  LCD_Delay(200);
 800148e:	20c8      	movs	r0, #200	@ 0xc8
 8001490:	f000 f97c 	bl	800178c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001494:	2029      	movs	r0, #41	@ 0x29
 8001496:	f000 f805 	bl	80014a4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800149a:	202c      	movs	r0, #44	@ 0x2c
 800149c:	f000 f802 	bl	80014a4 <ili9341_Write_Reg>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f949 	bl	8001748 <LCD_IO_WriteReg>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f91a 	bl	8001704 <LCD_IO_WriteData>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014dc:	4819      	ldr	r0, [pc, #100]	@ (8001544 <SPI_Init+0x6c>)
 80014de:	f004 fce8 	bl	8005eb2 <HAL_SPI_GetState>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d12b      	bne.n	8001540 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <SPI_Init+0x6c>)
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <SPI_Init+0x70>)
 80014ec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <SPI_Init+0x6c>)
 80014f0:	2218      	movs	r2, #24
 80014f2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <SPI_Init+0x6c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <SPI_Init+0x6c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <SPI_Init+0x6c>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <SPI_Init+0x6c>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <SPI_Init+0x6c>)
 800150e:	2207      	movs	r2, #7
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <SPI_Init+0x6c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <SPI_Init+0x6c>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <SPI_Init+0x6c>)
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <SPI_Init+0x6c>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SPI_Init+0x6c>)
 800152e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001532:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <SPI_Init+0x6c>)
 8001536:	f000 f833 	bl	80015a0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <SPI_Init+0x6c>)
 800153c:	f004 fac4 	bl	8005ac8 <HAL_SPI_Init>
  }
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2002597c 	.word	0x2002597c
 8001548:	40015000 	.word	0x40015000

0800154c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <SPI_Write+0x34>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1db9      	adds	r1, r7, #6
 8001560:	2201      	movs	r2, #1
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <SPI_Write+0x38>)
 8001564:	f004 fb61 	bl	8005c2a <HAL_SPI_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001572:	f000 f809 	bl	8001588 <SPI_Error>
  }
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000014 	.word	0x20000014
 8001584:	2002597c 	.word	0x2002597c

08001588 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <SPI_Error+0x14>)
 800158e:	f004 fb24 	bl	8005bda <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001592:	f7ff ffa1 	bl	80014d8 <SPI_Init>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2002597c 	.word	0x2002597c

080015a0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	4b17      	ldr	r3, [pc, #92]	@ (800160c <SPI_MspInit+0x6c>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b0:	4a16      	ldr	r2, [pc, #88]	@ (800160c <SPI_MspInit+0x6c>)
 80015b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <SPI_MspInit+0x6c>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <SPI_MspInit+0x6c>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	4a0f      	ldr	r2, [pc, #60]	@ (800160c <SPI_MspInit+0x6c>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <SPI_MspInit+0x6c>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80015e0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <SPI_MspInit+0x70>)
 80015fe:	f001 fdc5 	bl	800318c <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40021400 	.word	0x40021400

08001614 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800161a:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <LCD_IO_Init+0xe0>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d164      	bne.n	80016ec <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <LCD_IO_Init+0xe0>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <LCD_IO_Init+0xe4>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	4a31      	ldr	r2, [pc, #196]	@ (80016f8 <LCD_IO_Init+0xe4>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6313      	str	r3, [r2, #48]	@ 0x30
 8001638:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <LCD_IO_Init+0xe4>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001648:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	4827      	ldr	r0, [pc, #156]	@ (80016fc <LCD_IO_Init+0xe8>)
 800165e:	f001 fd95 	bl	800318c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <LCD_IO_Init+0xe4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <LCD_IO_Init+0xe4>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <LCD_IO_Init+0xe4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800167e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	4819      	ldr	r0, [pc, #100]	@ (80016fc <LCD_IO_Init+0xe8>)
 8001698:	f001 fd78 	bl	800318c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <LCD_IO_Init+0xe4>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <LCD_IO_Init+0xe4>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <LCD_IO_Init+0xe4>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80016b8:	2304      	movs	r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <LCD_IO_Init+0xec>)
 80016d0:	f001 fd5c 	bl	800318c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80016d4:	2200      	movs	r2, #0
 80016d6:	2104      	movs	r1, #4
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <LCD_IO_Init+0xec>)
 80016da:	f002 f80f 	bl	80036fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80016de:	2201      	movs	r2, #1
 80016e0:	2104      	movs	r1, #4
 80016e2:	4807      	ldr	r0, [pc, #28]	@ (8001700 <LCD_IO_Init+0xec>)
 80016e4:	f002 f80a 	bl	80036fc <HAL_GPIO_WritePin>

    SPI_Init();
 80016e8:	f7ff fef6 	bl	80014d8 <SPI_Init>
  }
}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200259d4 	.word	0x200259d4
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40020800 	.word	0x40020800

08001704 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001714:	480a      	ldr	r0, [pc, #40]	@ (8001740 <LCD_IO_WriteData+0x3c>)
 8001716:	f001 fff1 	bl	80036fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800171a:	2200      	movs	r2, #0
 800171c:	2104      	movs	r1, #4
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <LCD_IO_WriteData+0x40>)
 8001720:	f001 ffec 	bl	80036fc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff10 	bl	800154c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800172c:	2201      	movs	r2, #1
 800172e:	2104      	movs	r1, #4
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <LCD_IO_WriteData+0x40>)
 8001732:	f001 ffe3 	bl	80036fc <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40020800 	.word	0x40020800

08001748 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001758:	480a      	ldr	r0, [pc, #40]	@ (8001784 <LCD_IO_WriteReg+0x3c>)
 800175a:	f001 ffcf 	bl	80036fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800175e:	2200      	movs	r2, #0
 8001760:	2104      	movs	r1, #4
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <LCD_IO_WriteReg+0x40>)
 8001764:	f001 ffca 	bl	80036fc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff feed 	bl	800154c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001772:	2201      	movs	r2, #1
 8001774:	2104      	movs	r1, #4
 8001776:	4804      	ldr	r0, [pc, #16]	@ (8001788 <LCD_IO_WriteReg+0x40>)
 8001778:	f001 ffc0 	bl	80036fc <HAL_GPIO_WritePin>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40020800 	.word	0x40020800

0800178c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f001 fbc3 	bl	8002f20 <HAL_Delay>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f001 fb47 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f89d 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 faab 	bl	8001d0c <MX_GPIO_Init>
  MX_LTDC_Init();
 80017b6:	f000 f943 	bl	8001a40 <MX_LTDC_Init>
  MX_RNG_Init();
 80017ba:	f000 f9f3 	bl	8001ba4 <MX_RNG_Init>
  MX_SPI5_Init();
 80017be:	f000 fa05 	bl	8001bcc <MX_SPI5_Init>
  MX_I2C3_Init();
 80017c2:	f000 f8fd 	bl	80019c0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80017c6:	f7fe fee3 	bl	8000590 <ApplicationInit>

  game_seconds  = 0;
 80017ca:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <main+0x118>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  seconds_flag = true;
 80017d0:	4b3b      	ldr	r3, [pc, #236]	@ (80018c0 <main+0x11c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f001 fba1 	bl	8002f20 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /////////////////////////// TEST DRAW FUNCTIONS////////////////////////////////
  LCD_DrawMenuScreen();
 80017de:	f7ff f9bf 	bl	8000b60 <LCD_DrawMenuScreen>
  STMPE811_TouchData touch;
  while (1) {
      if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fbf4 	bl	8000fd2 <returnTouchStateAndLocation>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f8      	bne.n	80017e2 <main+0x3e>
          if (touch.y < 120) {
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b77      	cmp	r3, #119	@ 0x77
 80017f4:	d803      	bhi.n	80017fe <main+0x5a>
              onePlayerMode = 1;
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <main+0x120>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
          } else {
              onePlayerMode = 0;
          }
          break;
 80017fc:	e002      	b.n	8001804 <main+0x60>
              onePlayerMode = 0;
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <main+0x120>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
      }
  }
  LCD_DrawGameBoard(board);
 8001804:	4830      	ldr	r0, [pc, #192]	@ (80018c8 <main+0x124>)
 8001806:	f7ff fa13 	bl	8000c30 <LCD_DrawGameBoard>
  MX_TIM2_Init();
 800180a:	f000 fa15 	bl	8001c38 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800180e:	482f      	ldr	r0, [pc, #188]	@ (80018cc <main+0x128>)
 8001810:	f004 fc8a 	bl	8006128 <HAL_TIM_Base_Start_IT>

  while (!gameOver) {
 8001814:	e041      	b.n	800189a <main+0xf6>
	  uint16_t color;
	  if (currentPlayer == 1) {
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <main+0x12c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d103      	bne.n	8001826 <main+0x82>
		  color = COLOR_PLAYER1;
 800181e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001822:	81fb      	strh	r3, [r7, #14]
 8001824:	e002      	b.n	800182c <main+0x88>
	  } else {
		  color = COLOR_PLAYER2;
 8001826:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800182a:	81fb      	strh	r3, [r7, #14]
	  }
	  HAL_Delay(50);
 800182c:	2032      	movs	r0, #50	@ 0x32
 800182e:	f001 fb77 	bl	8002f20 <HAL_Delay>
	  LCD_DrawFloatingCoin(currentColumn, color);
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <main+0x130>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	89fa      	ldrh	r2, [r7, #14]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fba0 	bl	8000f80 <LCD_DrawFloatingCoin>

	  if (seconds_flag) {
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <main+0x11c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <main+0xb6>
	    seconds_flag = false;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <main+0x11c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
	    draw_elapsed_time(game_seconds);
 8001850:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <main+0x118>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa69 	bl	8000d2c <draw_elapsed_time>
	  }

	  if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fbb8 	bl	8000fd2 <returnTouchStateAndLocation>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d118      	bne.n	800189a <main+0xf6>
		  LCD_ClearFloatingBand();
 8001868:	f7ff fa3e 	bl	8000ce8 <LCD_ClearFloatingBand>
		  if (touch.y < 120) currentColumn = MAX(0, currentColumn - 1);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b77      	cmp	r3, #119	@ 0x77
 8001870:	d808      	bhi.n	8001884 <main+0xe0>
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <main+0x130>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	bfb8      	it	lt
 800187a:	2301      	movlt	r3, #1
 800187c:	3b01      	subs	r3, #1
 800187e:	4a15      	ldr	r2, [pc, #84]	@ (80018d4 <main+0x130>)
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e007      	b.n	8001894 <main+0xf0>
		  else currentColumn = MIN(6, currentColumn + 1);
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <main+0x130>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b05      	cmp	r3, #5
 800188a:	bfa8      	it	ge
 800188c:	2305      	movge	r3, #5
 800188e:	3301      	adds	r3, #1
 8001890:	4a10      	ldr	r2, [pc, #64]	@ (80018d4 <main+0x130>)
 8001892:	6013      	str	r3, [r2, #0]
		  HAL_Delay(100);
 8001894:	2064      	movs	r0, #100	@ 0x64
 8001896:	f001 fb43 	bl	8002f20 <HAL_Delay>
  while (!gameOver) {
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <main+0x134>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0b9      	beq.n	8001816 <main+0x72>
	  }
  }

  LCD_DrawGameOverScreen(winner, redWins, yellowWins, elapsedTime);
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <main+0x138>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <main+0x13c>)
 80018a8:	6819      	ldr	r1, [r3, #0]
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <main+0x140>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <main+0x144>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f7ff faa9 	bl	8000e08 <LCD_DrawGameOverScreen>

  while (1);
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <main+0x112>
 80018ba:	bf00      	nop
 80018bc:	20025c44 	.word	0x20025c44
 80018c0:	20025c48 	.word	0x20025c48
 80018c4:	20025c2c 	.word	0x20025c2c
 80018c8:	20025b84 	.word	0x20025b84
 80018cc:	20025b3c 	.word	0x20025b3c
 80018d0:	20000018 	.word	0x20000018
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20025c30 	.word	0x20025c30
 80018dc:	20025c34 	.word	0x20025c34
 80018e0:	20025c38 	.word	0x20025c38
 80018e4:	20025c3c 	.word	0x20025c3c
 80018e8:	20025c40 	.word	0x20025c40

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	@ 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	@ 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 f85a 	bl	80069b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a27      	ldr	r2, [pc, #156]	@ (80019b8 <SystemClock_Config+0xcc>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <SystemClock_Config+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <SystemClock_Config+0xd0>)
 8001936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <SystemClock_Config+0xd0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001948:	2301      	movs	r3, #1
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001952:	2302      	movs	r3, #2
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001956:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001960:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001966:	2302      	movs	r3, #2
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800196a:	2307      	movs	r3, #7
 800196c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fa3a 	bl	8004dec <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800197e:	f000 fbf3 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2105      	movs	r1, #5
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fc9b 	bl	80052dc <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019ac:	f000 fbdc 	bl	8002168 <Error_Handler>
  }
}
 80019b0:	bf00      	nop
 80019b2:	3750      	adds	r7, #80	@ 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <MX_I2C3_Init+0x78>)
 80019c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019cc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a3c <MX_I2C3_Init+0x7c>)
 80019ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f0:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <MX_I2C3_Init+0x74>)
 80019fe:	f001 feaf 	bl	8003760 <HAL_I2C_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a08:	f000 fbae 	bl	8002168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <MX_I2C3_Init+0x74>)
 8001a10:	f002 feca 	bl	80047a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a1a:	f000 fba5 	bl	8002168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <MX_I2C3_Init+0x74>)
 8001a22:	f002 fefd 	bl	8004820 <HAL_I2CEx_ConfigDigitalFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a2c:	f000 fb9c 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200259d8 	.word	0x200259d8
 8001a38:	40005c00 	.word	0x40005c00
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b09a      	sub	sp, #104	@ 0x68
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a4a:	2234      	movs	r2, #52	@ 0x34
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 ffb0 	bl	80069b4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2234      	movs	r2, #52	@ 0x34
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 ffaa 	bl	80069b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a60:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a62:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba0 <MX_LTDC_Init+0x160>)
 8001a64:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a78:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001a84:	4b45      	ldr	r3, [pc, #276]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a86:	2203      	movs	r2, #3
 8001a88:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001a8a:	4b44      	ldr	r3, [pc, #272]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a8c:	220e      	movs	r2, #14
 8001a8e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001a90:	4b42      	ldr	r3, [pc, #264]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a92:	2205      	movs	r2, #5
 8001a94:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001a98:	f240 228e 	movw	r2, #654	@ 0x28e
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001aa0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001aa8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001ab0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ac6:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ace:	4833      	ldr	r0, [pc, #204]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001ad0:	f002 fee6 	bl	80048a0 <HAL_LTDC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001ada:	f000 fb45 	bl	8002168 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001aee:	2300      	movs	r3, #0
 8001af0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001afe:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b00:	2305      	movs	r3, #5
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b26:	2200      	movs	r2, #0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481c      	ldr	r0, [pc, #112]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001b2c:	f002 ff88 	bl	8004a40 <HAL_LTDC_ConfigLayer>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001b36:	f000 fb17 	bl	8002168 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_LTDC_Init+0x15c>)
 8001b86:	f002 ff5b 	bl	8004a40 <HAL_LTDC_ConfigLayer>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001b90:	f000 faea 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3768      	adds	r7, #104	@ 0x68
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20025a2c 	.word	0x20025a2c
 8001ba0:	40016800 	.word	0x40016800

08001ba4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_RNG_Init+0x20>)
 8001baa:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <MX_RNG_Init+0x24>)
 8001bac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_RNG_Init+0x20>)
 8001bb0:	f003 ff60 	bl	8005a74 <HAL_RNG_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bba:	f000 fad5 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20025ad4 	.word	0x20025ad4
 8001bc8:	50060800 	.word	0x50060800

08001bcc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <MX_SPI5_Init+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001bd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bdc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bfc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c18:	220a      	movs	r2, #10
 8001c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <MX_SPI5_Init+0x64>)
 8001c1e:	f003 ff53 	bl	8005ac8 <HAL_SPI_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c28:	f000 fa9e 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20025ae4 	.word	0x20025ae4
 8001c34:	40015000 	.word	0x40015000

08001c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <MX_TIM2_Init+0xcc>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a2f      	ldr	r2, [pc, #188]	@ (8001d04 <MX_TIM2_Init+0xcc>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <MX_TIM2_Init+0xcc>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c7c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c8a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c9c:	481a      	ldr	r0, [pc, #104]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001c9e:	f004 f9f3 	bl	8006088 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ca8:	f000 fa5e 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4813      	ldr	r0, [pc, #76]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001cba:	f004 fb95 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001cc4:	f000 fa50 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001cd8:	f004 fdbc 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001ce2:	f000 fa41 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001ce6:	4808      	ldr	r0, [pc, #32]	@ (8001d08 <MX_TIM2_Init+0xd0>)
 8001ce8:	f004 fa1e 	bl	8006128 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2102      	movs	r1, #2
 8001cf0:	201c      	movs	r0, #28
 8001cf2:	f001 fa14 	bl	800311e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf6:	201c      	movs	r0, #28
 8001cf8:	f001 fa2d 	bl	8003156 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	20025b3c 	.word	0x20025b3c

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	@ 0x38
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	4bb3      	ldr	r3, [pc, #716]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4ab2      	ldr	r2, [pc, #712]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4bb0      	ldr	r3, [pc, #704]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	4bac      	ldr	r3, [pc, #688]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4aab      	ldr	r2, [pc, #684]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4ba9      	ldr	r3, [pc, #676]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4aa4      	ldr	r2, [pc, #656]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a9d      	ldr	r2, [pc, #628]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b9b      	ldr	r3, [pc, #620]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b97      	ldr	r3, [pc, #604]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a96      	ldr	r2, [pc, #600]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b94      	ldr	r3, [pc, #592]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b90      	ldr	r3, [pc, #576]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a8f      	ldr	r2, [pc, #572]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a88      	ldr	r2, [pc, #544]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b86      	ldr	r3, [pc, #536]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b82      	ldr	r3, [pc, #520]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a81      	ldr	r2, [pc, #516]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2116      	movs	r1, #22
 8001e06:	487c      	ldr	r0, [pc, #496]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001e08:	f001 fc78 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	@ 0x80
 8001e10:	487a      	ldr	r0, [pc, #488]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001e12:	f001 fc73 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001e1c:	4878      	ldr	r0, [pc, #480]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001e1e:	f001 fc6d 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001e28:	4876      	ldr	r0, [pc, #472]	@ (8002004 <MX_GPIO_Init+0x2f8>)
 8001e2a:	f001 fc67 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e40:	230c      	movs	r3, #12
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	486f      	ldr	r0, [pc, #444]	@ (8002008 <MX_GPIO_Init+0x2fc>)
 8001e4c:	f001 f99e 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e60:	230c      	movs	r3, #12
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4863      	ldr	r0, [pc, #396]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001e6c:	f001 f98e 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e70:	2316      	movs	r3, #22
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	485c      	ldr	r0, [pc, #368]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001e88:	f001 f980 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;// DISABLE FUNCTIONALITY FOR INT1 & 2?
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4856      	ldr	r0, [pc, #344]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001ea2:	f001 f973 	bl	800318c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);///////////////////////////////////CONFIGURE NVIC//////////////////////////////////////////
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f001 f937 	bl	800311e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eb0:	2006      	movs	r0, #6
 8001eb2:	f001 f950 	bl	8003156 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	484b      	ldr	r0, [pc, #300]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001ece:	f001 f95d 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ed6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4844      	ldr	r0, [pc, #272]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001ee8:	f001 f950 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001eec:	2304      	movs	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4843      	ldr	r0, [pc, #268]	@ (800200c <MX_GPIO_Init+0x300>)
 8001f00:	f001 f944 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f04:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f16:	230c      	movs	r3, #12
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4838      	ldr	r0, [pc, #224]	@ (8002004 <MX_GPIO_Init+0x2f8>)
 8001f22:	f001 f933 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f26:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f38:	230c      	movs	r3, #12
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4833      	ldr	r0, [pc, #204]	@ (8002010 <MX_GPIO_Init+0x304>)
 8001f44:	f001 f922 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f48:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4829      	ldr	r0, [pc, #164]	@ (800200c <MX_GPIO_Init+0x300>)
 8001f66:	f001 f911 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4823      	ldr	r0, [pc, #140]	@ (800200c <MX_GPIO_Init+0x300>)
 8001f80:	f001 f904 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001f84:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f96:	230c      	movs	r3, #12
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4817      	ldr	r0, [pc, #92]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001fa2:	f001 f8f3 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4811      	ldr	r0, [pc, #68]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001fbc:	f001 f8e6 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001fc0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4809      	ldr	r0, [pc, #36]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001fda:	f001 f8d7 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	e00f      	b.n	8002014 <MX_GPIO_Init+0x308>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021800 	.word	0x40021800
 8002008:	40021400 	.word	0x40021400
 800200c:	40020400 	.word	0x40020400
 8002010:	40021000 	.word	0x40021000
 8002014:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4812      	ldr	r0, [pc, #72]	@ (8002068 <MX_GPIO_Init+0x35c>)
 800201e:	f001 f8b5 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002022:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002038:	4619      	mov	r1, r3
 800203a:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_GPIO_Init+0x360>)
 800203c:	f001 f8a6 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002040:	2360      	movs	r3, #96	@ 0x60
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002050:	230c      	movs	r3, #12
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	@ (8002070 <MX_GPIO_Init+0x364>)
 800205c:	f001 f896 	bl	800318c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002060:	bf00      	nop
 8002062:	3738      	adds	r7, #56	@ 0x38
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40020000 	.word	0x40020000
 800206c:	40021800 	.word	0x40021800
 8002070:	40020400 	.word	0x40020400

08002074 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPressTime = 0;
	if (HAL_GetTick() - lastPressTime < 200) return;
 800207e:	f000 ff43 	bl	8002f08 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2bc7      	cmp	r3, #199	@ 0xc7
 800208c:	d93f      	bls.n	800210e <HAL_GPIO_EXTI_Callback+0x9a>
	lastPressTime = HAL_GetTick();
 800208e:	f000 ff3b 	bl	8002f08 <HAL_GetTick>
 8002092:	4603      	mov	r3, r0
 8002094:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002096:	6013      	str	r3, [r2, #0]

    if (GPIO_Pin == GPIO_PIN_0) {
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d133      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x92>
        int placedRow = placeCoin(board, currentColumn, currentPlayer);
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <HAL_GPIO_EXTI_Callback+0xa8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xac>)
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	481e      	ldr	r0, [pc, #120]	@ (8002124 <HAL_GPIO_EXTI_Callback+0xb0>)
 80020aa:	f7fe ff9e 	bl	8000fea <placeCoin>
 80020ae:	60f8      	str	r0, [r7, #12]
        if (placedRow != -1) { // THIS CHECKS IF ROW IS FULL, IT WON'T PLACE THE COIN IF THE ROW IS FULL
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d026      	beq.n	8002106 <HAL_GPIO_EXTI_Callback+0x92>
            int result = checkWinOrTie(board, placedRow, currentColumn, currentPlayer);
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <HAL_GPIO_EXTI_Callback+0xa8>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68f9      	ldr	r1, [r7, #12]
 80020c2:	4818      	ldr	r0, [pc, #96]	@ (8002124 <HAL_GPIO_EXTI_Callback+0xb0>)
 80020c4:	f7ff f801 	bl	80010ca <checkWinOrTie>
 80020c8:	60b8      	str	r0, [r7, #8]
            if (result == 1) {
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_GPIO_EXTI_Callback+0x6c>
                winner = currentPlayer;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <HAL_GPIO_EXTI_Callback+0xb4>)
 80020d6:	6013      	str	r3, [r2, #0]
                gameOver = 1;
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_GPIO_EXTI_Callback+0xb8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e012      	b.n	8002106 <HAL_GPIO_EXTI_Callback+0x92>
            } else if (result == 2) {
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d106      	bne.n	80020f4 <HAL_GPIO_EXTI_Callback+0x80>
                winner = 0; // TIE
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <HAL_GPIO_EXTI_Callback+0xb4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
                gameOver = 1;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_GPIO_EXTI_Callback+0xb8>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e008      	b.n	8002106 <HAL_GPIO_EXTI_Callback+0x92>
            } else {
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xac>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_GPIO_EXTI_Callback+0x8c>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_EXTI_Callback+0x8e>
 8002100:	2301      	movs	r3, #1
 8002102:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xac>)
 8002104:	6013      	str	r3, [r2, #0]
            }
        }
    }
    LCD_DrawGameBoard(board);
 8002106:	4807      	ldr	r0, [pc, #28]	@ (8002124 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002108:	f7fe fd92 	bl	8000c30 <LCD_DrawGameBoard>
 800210c:	e000      	b.n	8002110 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GetTick() - lastPressTime < 200) return;
 800210e:	bf00      	nop
}
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20025c4c 	.word	0x20025c4c
 800211c:	2000001c 	.word	0x2000001c
 8002120:	20000018 	.word	0x20000018
 8002124:	20025b84 	.word	0x20025b84
 8002128:	20025c34 	.word	0x20025c34
 800212c:	20025c30 	.word	0x20025c30

08002130 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d107      	bne.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x22>
    game_seconds++;
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800214a:	6013      	str	r3, [r2, #0]
    seconds_flag = true;
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20025c44 	.word	0x20025c44
 8002164:	20025c48 	.word	0x20025c48

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <HAL_MspInit+0x4c>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002188:	6453      	str	r3, [r2, #68]	@ 0x44
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_MspInit+0x4c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_MspInit+0x4c>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_MspInit+0x4c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021b2:	2007      	movs	r0, #7
 80021b4:	f000 ffa8 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <HAL_I2C_MspInit+0xc4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d14b      	bne.n	800227e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a20      	ldr	r2, [pc, #128]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800221e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002230:	2304      	movs	r3, #4
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 800223c:	f000 ffa6 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002252:	2304      	movs	r3, #4
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <HAL_I2C_MspInit+0xd0>)
 800225e:	f000 ff95 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	@ 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005c00 	.word	0x40005c00
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800
 8002294:	40020000 	.word	0x40020000

08002298 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b09a      	sub	sp, #104	@ 0x68
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b4:	2230      	movs	r2, #48	@ 0x30
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 fb7b 	bl	80069b4 <memset>
  if(hltdc->Instance==LTDC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a81      	ldr	r2, [pc, #516]	@ (80024c8 <HAL_LTDC_MspInit+0x230>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 80fb 	bne.w	80024c0 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022ca:	2308      	movs	r3, #8
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80022ce:	23c8      	movs	r3, #200	@ 0xc8
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80022d6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80022da:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fa07 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80022ec:	f7ff ff3c 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	4a74      	ldr	r2, [pc, #464]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 80022fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002300:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	4b6e      	ldr	r3, [pc, #440]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	4a6d      	ldr	r2, [pc, #436]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	6313      	str	r3, [r2, #48]	@ 0x30
 800231c:	4b6b      	ldr	r3, [pc, #428]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4a66      	ldr	r2, [pc, #408]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6313      	str	r3, [r2, #48]	@ 0x30
 8002338:	4b64      	ldr	r3, [pc, #400]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	4b60      	ldr	r3, [pc, #384]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	4a5f      	ldr	r2, [pc, #380]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	6313      	str	r3, [r2, #48]	@ 0x30
 8002354:	4b5d      	ldr	r3, [pc, #372]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	4b59      	ldr	r3, [pc, #356]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800236a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800236e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002370:	4b56      	ldr	r3, [pc, #344]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b52      	ldr	r3, [pc, #328]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	4a51      	ldr	r2, [pc, #324]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6313      	str	r3, [r2, #48]	@ 0x30
 800238c:	4b4f      	ldr	r3, [pc, #316]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	4a4a      	ldr	r2, [pc, #296]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a8:	4b48      	ldr	r3, [pc, #288]	@ (80024cc <HAL_LTDC_MspInit+0x234>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80023b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023c6:	230e      	movs	r3, #14
 80023c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023ce:	4619      	mov	r1, r3
 80023d0:	483f      	ldr	r0, [pc, #252]	@ (80024d0 <HAL_LTDC_MspInit+0x238>)
 80023d2:	f000 fedb 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80023d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80023da:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023e8:	230e      	movs	r3, #14
 80023ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023f0:	4619      	mov	r1, r3
 80023f2:	4838      	ldr	r0, [pc, #224]	@ (80024d4 <HAL_LTDC_MspInit+0x23c>)
 80023f4:	f000 feca 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80023f8:	2303      	movs	r3, #3
 80023fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002408:	2309      	movs	r3, #9
 800240a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002410:	4619      	mov	r1, r3
 8002412:	4831      	ldr	r0, [pc, #196]	@ (80024d8 <HAL_LTDC_MspInit+0x240>)
 8002414:	f000 feba 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002418:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800241c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242a:	230e      	movs	r3, #14
 800242c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002432:	4619      	mov	r1, r3
 8002434:	4828      	ldr	r0, [pc, #160]	@ (80024d8 <HAL_LTDC_MspInit+0x240>)
 8002436:	f000 fea9 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800243a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800243e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244c:	230e      	movs	r3, #14
 800244e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002450:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002454:	4619      	mov	r1, r3
 8002456:	4821      	ldr	r0, [pc, #132]	@ (80024dc <HAL_LTDC_MspInit+0x244>)
 8002458:	f000 fe98 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800245c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002460:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800246e:	230e      	movs	r3, #14
 8002470:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002476:	4619      	mov	r1, r3
 8002478:	4819      	ldr	r0, [pc, #100]	@ (80024e0 <HAL_LTDC_MspInit+0x248>)
 800247a:	f000 fe87 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800247e:	2348      	movs	r3, #72	@ 0x48
 8002480:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248e:	230e      	movs	r3, #14
 8002490:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002492:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002496:	4619      	mov	r1, r3
 8002498:	4812      	ldr	r0, [pc, #72]	@ (80024e4 <HAL_LTDC_MspInit+0x24c>)
 800249a:	f000 fe77 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800249e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024b0:	2309      	movs	r3, #9
 80024b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b8:	4619      	mov	r1, r3
 80024ba:	4808      	ldr	r0, [pc, #32]	@ (80024dc <HAL_LTDC_MspInit+0x244>)
 80024bc:	f000 fe66 	bl	800318c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80024c0:	bf00      	nop
 80024c2:	3768      	adds	r7, #104	@ 0x68
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40016800 	.word	0x40016800
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40021400 	.word	0x40021400
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40020c00 	.word	0x40020c00

080024e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <HAL_RNG_MspInit+0x3c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10d      	bne.n	8002516 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_RNG_MspInit+0x40>)
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_RNG_MspInit+0x40>)
 8002504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002508:	6353      	str	r3, [r2, #52]	@ 0x34
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <HAL_RNG_MspInit+0x40>)
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	50060800 	.word	0x50060800
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_SPI_MspInit+0x84>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12c      	bne.n	80025a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002586:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002598:	2305      	movs	r3, #5
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <HAL_SPI_MspInit+0x8c>)
 80025a4:	f000 fdf2 	bl	800318c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	@ 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40015000 	.word	0x40015000
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40021400 	.word	0x40021400

080025bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a08      	ldr	r2, [pc, #32]	@ (80025ec <HAL_SPI_MspDeInit+0x30>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10a      	bne.n	80025e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_SPI_MspDeInit+0x34>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <HAL_SPI_MspDeInit+0x34>)
 80025d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80025da:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80025de:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <HAL_SPI_MspDeInit+0x38>)
 80025e0:	f000 ff80 	bl	80034e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40015000 	.word	0x40015000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40021400 	.word	0x40021400

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d10d      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_TIM_Base_MspInit+0x3c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <HAL_TIM_Base_MspInit+0x3c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_TIM_Base_MspInit+0x3c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <NMI_Handler+0x4>

08002640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <MemManage_Handler+0x4>

08002650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <UsageFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268e:	f000 fc27 	bl	8002ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}

08002696 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800269a:	2001      	movs	r0, #1
 800269c:	f001 f848 	bl	8003730 <HAL_GPIO_EXTI_IRQHandler>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <TIM2_IRQHandler+0x10>)
 80026aa:	f003 fdad 	bl	8006208 <HAL_TIM_IRQHandler>
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20025b3c 	.word	0x20025b3c

080026b8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80026be:	f000 f9cd 	bl	8002a5c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80026c2:	f000 f98d 	bl	80029e0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80026c6:	2202      	movs	r2, #2
 80026c8:	2103      	movs	r1, #3
 80026ca:	2082      	movs	r0, #130	@ 0x82
 80026cc:	f000 fa1a 	bl	8002b04 <I2C3_Write>
    HAL_Delay(5);
 80026d0:	2005      	movs	r0, #5
 80026d2:	f000 fc25 	bl	8002f20 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2103      	movs	r1, #3
 80026da:	2082      	movs	r0, #130	@ 0x82
 80026dc:	f000 fa12 	bl	8002b04 <I2C3_Write>
    HAL_Delay(2);
 80026e0:	2002      	movs	r0, #2
 80026e2:	f000 fc1d 	bl	8002f20 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80026e6:	1cba      	adds	r2, r7, #2
 80026e8:	2302      	movs	r3, #2
 80026ea:	2100      	movs	r1, #0
 80026ec:	2082      	movs	r0, #130	@ 0x82
 80026ee:	f000 fa59 	bl	8002ba4 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4313      	orrs	r3, r2
 8002702:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	f640 0211 	movw	r2, #2065	@ 0x811
 800270a:	4293      	cmp	r3, r2
 800270c:	d001      	beq.n	8002712 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800270e:	2303      	movs	r3, #3
 8002710:	e075      	b.n	80027fe <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002712:	2202      	movs	r2, #2
 8002714:	2103      	movs	r1, #3
 8002716:	2082      	movs	r0, #130	@ 0x82
 8002718:	f000 f9f4 	bl	8002b04 <I2C3_Write>
    HAL_Delay(5);
 800271c:	2005      	movs	r0, #5
 800271e:	f000 fbff 	bl	8002f20 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002722:	2200      	movs	r2, #0
 8002724:	2103      	movs	r1, #3
 8002726:	2082      	movs	r0, #130	@ 0x82
 8002728:	f000 f9ec 	bl	8002b04 <I2C3_Write>
    HAL_Delay(2);
 800272c:	2002      	movs	r0, #2
 800272e:	f000 fbf7 	bl	8002f20 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002732:	2004      	movs	r0, #4
 8002734:	f000 f867 	bl	8002806 <STMPE811_Read>
 8002738:	4603      	mov	r3, r0
 800273a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002744:	797b      	ldrb	r3, [r7, #5]
 8002746:	461a      	mov	r2, r3
 8002748:	2104      	movs	r1, #4
 800274a:	2082      	movs	r0, #130	@ 0x82
 800274c:	f000 f9da 	bl	8002b04 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002750:	2004      	movs	r0, #4
 8002752:	f000 f858 	bl	8002806 <STMPE811_Read>
 8002756:	4603      	mov	r3, r0
 8002758:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	f023 0302 	bic.w	r3, r3, #2
 8002760:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002762:	797b      	ldrb	r3, [r7, #5]
 8002764:	461a      	mov	r2, r3
 8002766:	2104      	movs	r1, #4
 8002768:	2082      	movs	r0, #130	@ 0x82
 800276a:	f000 f9cb 	bl	8002b04 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800276e:	2249      	movs	r2, #73	@ 0x49
 8002770:	2120      	movs	r1, #32
 8002772:	2082      	movs	r0, #130	@ 0x82
 8002774:	f000 f9c6 	bl	8002b04 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002778:	2002      	movs	r0, #2
 800277a:	f000 fbd1 	bl	8002f20 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800277e:	2201      	movs	r2, #1
 8002780:	2121      	movs	r1, #33	@ 0x21
 8002782:	2082      	movs	r0, #130	@ 0x82
 8002784:	f000 f9be 	bl	8002b04 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002788:	2017      	movs	r0, #23
 800278a:	f000 f83c 	bl	8002806 <STMPE811_Read>
 800278e:	4603      	mov	r3, r0
 8002790:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002792:	797b      	ldrb	r3, [r7, #5]
 8002794:	f043 031e 	orr.w	r3, r3, #30
 8002798:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	461a      	mov	r2, r3
 800279e:	2117      	movs	r1, #23
 80027a0:	2082      	movs	r0, #130	@ 0x82
 80027a2:	f000 f9af 	bl	8002b04 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80027a6:	229a      	movs	r2, #154	@ 0x9a
 80027a8:	2141      	movs	r1, #65	@ 0x41
 80027aa:	2082      	movs	r0, #130	@ 0x82
 80027ac:	f000 f9aa 	bl	8002b04 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80027b0:	2201      	movs	r2, #1
 80027b2:	214a      	movs	r1, #74	@ 0x4a
 80027b4:	2082      	movs	r0, #130	@ 0x82
 80027b6:	f000 f9a5 	bl	8002b04 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80027ba:	2201      	movs	r2, #1
 80027bc:	214b      	movs	r1, #75	@ 0x4b
 80027be:	2082      	movs	r0, #130	@ 0x82
 80027c0:	f000 f9a0 	bl	8002b04 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80027c4:	2200      	movs	r2, #0
 80027c6:	214b      	movs	r1, #75	@ 0x4b
 80027c8:	2082      	movs	r0, #130	@ 0x82
 80027ca:	f000 f99b 	bl	8002b04 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80027ce:	2201      	movs	r2, #1
 80027d0:	2156      	movs	r1, #86	@ 0x56
 80027d2:	2082      	movs	r0, #130	@ 0x82
 80027d4:	f000 f996 	bl	8002b04 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80027d8:	2201      	movs	r2, #1
 80027da:	2158      	movs	r1, #88	@ 0x58
 80027dc:	2082      	movs	r0, #130	@ 0x82
 80027de:	f000 f991 	bl	8002b04 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80027e2:	2203      	movs	r2, #3
 80027e4:	2140      	movs	r1, #64	@ 0x40
 80027e6:	2082      	movs	r0, #130	@ 0x82
 80027e8:	f000 f98c 	bl	8002b04 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80027ec:	22ff      	movs	r2, #255	@ 0xff
 80027ee:	210b      	movs	r1, #11
 80027f0:	2082      	movs	r0, #130	@ 0x82
 80027f2:	f000 f987 	bl	8002b04 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80027f6:	20c8      	movs	r0, #200	@ 0xc8
 80027f8:	f000 fb92 	bl	8002f20 <HAL_Delay>

    return STMPE811_State_Ok;
 80027fc:	2302      	movs	r3, #2

}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002810:	f107 020f 	add.w	r2, r7, #15
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	4619      	mov	r1, r3
 8002818:	2082      	movs	r0, #130	@ 0x82
 800281a:	f000 f99d 	bl	8002b58 <I2C3_Read>

    return readData;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	791a      	ldrb	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002838:	2040      	movs	r0, #64	@ 0x40
 800283a:	f7ff ffe4 	bl	8002806 <STMPE811_Read>
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0e      	blt.n	8002868 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002850:	2201      	movs	r2, #1
 8002852:	214b      	movs	r1, #75	@ 0x4b
 8002854:	2082      	movs	r0, #130	@ 0x82
 8002856:	f000 f955 	bl	8002b04 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800285a:	2200      	movs	r2, #0
 800285c:	214b      	movs	r1, #75	@ 0x4b
 800285e:	2082      	movs	r0, #130	@ 0x82
 8002860:	f000 f950 	bl	8002b04 <I2C3_Write>

        return STMPE811_State_Released;
 8002864:	2301      	movs	r3, #1
 8002866:	e0a7      	b.n	80029b8 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	799b      	ldrb	r3, [r3, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d117      	bne.n	80028a0 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f9b7 	bl	8002be8 <TM_STMPE811_ReadX>
 800287a:	4603      	mov	r3, r0
 800287c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	885b      	ldrh	r3, [r3, #2]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fa0a 	bl	8002ca4 <TM_STMPE811_ReadY>
 8002890:	4603      	mov	r3, r0
 8002892:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002896:	3301      	adds	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	805a      	strh	r2, [r3, #2]
 800289e:	e048      	b.n	8002932 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	799b      	ldrb	r3, [r3, #6]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d112      	bne.n	80028ce <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f99b 	bl	8002be8 <TM_STMPE811_ReadX>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	885b      	ldrh	r3, [r3, #2]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f9f0 	bl	8002ca4 <TM_STMPE811_ReadY>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	805a      	strh	r2, [r3, #2]
 80028cc:	e031      	b.n	8002932 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	799b      	ldrb	r3, [r3, #6]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d115      	bne.n	8002902 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	885b      	ldrh	r3, [r3, #2]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f984 	bl	8002be8 <TM_STMPE811_ReadX>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f9d9 	bl	8002ca4 <TM_STMPE811_ReadY>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80028f8:	3301      	adds	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	e017      	b.n	8002932 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	799b      	ldrb	r3, [r3, #6]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d113      	bne.n	8002932 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f96a 	bl	8002be8 <TM_STMPE811_ReadX>
 8002914:	4603      	mov	r3, r0
 8002916:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f9bd 	bl	8002ca4 <TM_STMPE811_ReadY>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002932:	2201      	movs	r2, #1
 8002934:	214b      	movs	r1, #75	@ 0x4b
 8002936:	2082      	movs	r0, #130	@ 0x82
 8002938:	f000 f8e4 	bl	8002b04 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800293c:	2200      	movs	r2, #0
 800293e:	214b      	movs	r1, #75	@ 0x4b
 8002940:	2082      	movs	r0, #130	@ 0x82
 8002942:	f000 f8df 	bl	8002b04 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	799b      	ldrb	r3, [r3, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <STMPE811_ReadTouch+0x12e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	799b      	ldrb	r3, [r3, #6]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d115      	bne.n	8002982 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d027      	beq.n	80029ae <STMPE811_ReadTouch+0x186>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2bee      	cmp	r3, #238	@ 0xee
 8002964:	d823      	bhi.n	80029ae <STMPE811_ReadTouch+0x186>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	885b      	ldrh	r3, [r3, #2]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01f      	beq.n	80029ae <STMPE811_ReadTouch+0x186>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	885b      	ldrh	r3, [r3, #2]
 8002972:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002976:	d81a      	bhi.n	80029ae <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800297e:	2300      	movs	r3, #0
 8002980:	e01a      	b.n	80029b8 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <STMPE811_ReadTouch+0x188>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002992:	d80d      	bhi.n	80029b0 <STMPE811_ReadTouch+0x188>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	885b      	ldrh	r3, [r3, #2]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <STMPE811_ReadTouch+0x188>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	885b      	ldrh	r3, [r3, #2]
 80029a0:	2bee      	cmp	r3, #238	@ 0xee
 80029a2:	d805      	bhi.n	80029b0 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e004      	b.n	80029b8 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80029ae:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <verifyHAL_I2C_IS_OKAY+0x1c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20025ca4 	.word	0x20025ca4

080029e0 <I2C3_Init>:

static void I2C3_Init()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <I2C3_Init+0x6c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <I2C3_Init+0x6c>)
 80029f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <I2C3_Init+0x6c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002a02:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <I2C3_Init+0x70>)
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <I2C3_Init+0x74>)
 8002a06:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <I2C3_Init+0x70>)
 8002a0a:	4a13      	ldr	r2, [pc, #76]	@ (8002a58 <I2C3_Init+0x78>)
 8002a0c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <I2C3_Init+0x70>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <I2C3_Init+0x70>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <I2C3_Init+0x70>)
 8002a1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a20:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <I2C3_Init+0x70>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <I2C3_Init+0x70>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002a2e:	4808      	ldr	r0, [pc, #32]	@ (8002a50 <I2C3_Init+0x70>)
 8002a30:	f000 fe96 	bl	8003760 <HAL_I2C_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002a3e:	bf00      	nop
 8002a40:	e7fd      	b.n	8002a3e <I2C3_Init+0x5e>
    }
    return;
 8002a42:	bf00      	nop
}
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	20025c50 	.word	0x20025c50
 8002a54:	40005c00 	.word	0x40005c00
 8002a58:	000186a0 	.word	0x000186a0

08002a5c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a18      	ldr	r2, [pc, #96]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <I2C3_MspInit+0x9c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002aaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab0:	2312      	movs	r3, #18
 8002ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002abc:	2304      	movs	r3, #4
 8002abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480d      	ldr	r0, [pc, #52]	@ (8002afc <I2C3_MspInit+0xa0>)
 8002ac8:	f000 fb60 	bl	800318c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad2:	2312      	movs	r3, #18
 8002ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <I2C3_MspInit+0xa4>)
 8002aea:	f000 fb4f 	bl	800318c <HAL_GPIO_Init>
    
}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020000 	.word	0x40020000

08002b04 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	717b      	strb	r3, [r7, #5]
 8002b12:	4613      	mov	r3, r2
 8002b14:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002b16:	793b      	ldrb	r3, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b1a:	797b      	ldrb	r3, [r7, #5]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	88f9      	ldrh	r1, [r7, #6]
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <I2C3_Write+0x48>)
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	f107 030f 	add.w	r3, r7, #15
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <I2C3_Write+0x4c>)
 8002b32:	f000 ff59 	bl	80039e8 <HAL_I2C_Mem_Write>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <I2C3_Write+0x50>)
 8002b3c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002b3e:	f7ff ff3f 	bl	80029c0 <verifyHAL_I2C_IS_OKAY>
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0003d090 	.word	0x0003d090
 8002b50:	20025c50 	.word	0x20025c50
 8002b54:	20025ca4 	.word	0x20025ca4

08002b58 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af04      	add	r7, sp, #16
 8002b5e:	4603      	mov	r3, r0
 8002b60:	603a      	str	r2, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	460b      	mov	r3, r1
 8002b66:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	b299      	uxth	r1, r3
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <I2C3_Read+0x40>)
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	2301      	movs	r3, #1
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	4807      	ldr	r0, [pc, #28]	@ (8002b9c <I2C3_Read+0x44>)
 8002b80:	f001 f82c 	bl	8003bdc <HAL_I2C_Mem_Read>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <I2C3_Read+0x48>)
 8002b8a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002b8c:	f7ff ff18 	bl	80029c0 <verifyHAL_I2C_IS_OKAY>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	0003d090 	.word	0x0003d090
 8002b9c:	20025c50 	.word	0x20025c50
 8002ba0:	20025ca4 	.word	0x20025ca4

08002ba4 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	603a      	str	r2, [r7, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	71bb      	strb	r3, [r7, #6]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <I2C3_MulitByteRead+0x3c>)
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4804      	ldr	r0, [pc, #16]	@ (8002be4 <I2C3_MulitByteRead+0x40>)
 8002bd2:	f001 f803 	bl	8003bdc <HAL_I2C_Mem_Read>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0003d090 	.word	0x0003d090
 8002be4:	20025c50 	.word	0x20025c50

08002be8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002bf2:	204d      	movs	r0, #77	@ 0x4d
 8002bf4:	f7ff fe07 	bl	8002806 <STMPE811_Read>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002bfc:	204e      	movs	r0, #78	@ 0x4e
 8002bfe:	f7ff fe02 	bl	8002806 <STMPE811_Read>
 8002c02:	4603      	mov	r3, r0
 8002c04:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002c06:	7a7b      	ldrb	r3, [r7, #9]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	7a3b      	ldrb	r3, [r7, #8]
 8002c0e:	b21b      	sxth	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c18:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	dc06      	bgt.n	8002c2e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002c26:	330c      	adds	r3, #12
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	81fb      	strh	r3, [r7, #14]
 8002c2c:	e005      	b.n	8002c3a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002c34:	3308      	adds	r3, #8
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ca0 <TM_STMPE811_ReadX+0xb8>)
 8002c40:	fb82 1203 	smull	r1, r2, r2, r3
 8002c44:	441a      	add	r2, r3
 8002c46:	10d2      	asrs	r2, r2, #3
 8002c48:	17db      	asrs	r3, r3, #31
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c52:	2bef      	cmp	r3, #239	@ 0xef
 8002c54:	dd02      	ble.n	8002c5c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002c56:	23ef      	movs	r3, #239	@ 0xef
 8002c58:	81fb      	strh	r3, [r7, #14]
 8002c5a:	e005      	b.n	8002c68 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da01      	bge.n	8002c68 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002c68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dd05      	ble.n	8002c7e <TM_STMPE811_ReadX+0x96>
 8002c72:	89fa      	ldrh	r2, [r7, #14]
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	e004      	b.n	8002c88 <TM_STMPE811_ReadX+0xa0>
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002c8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	dd01      	ble.n	8002c96 <TM_STMPE811_ReadX+0xae>
        return val;
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	e000      	b.n	8002c98 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002c96:	88fb      	ldrh	r3, [r7, #6]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	88888889 	.word	0x88888889

08002ca4 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002cae:	204f      	movs	r0, #79	@ 0x4f
 8002cb0:	f7ff fda9 	bl	8002806 <STMPE811_Read>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002cb8:	2050      	movs	r0, #80	@ 0x50
 8002cba:	f7ff fda4 	bl	8002806 <STMPE811_Read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002cc2:	7a7b      	ldrb	r3, [r7, #9]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	7a3b      	ldrb	r3, [r7, #8]
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cde:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <TM_STMPE811_ReadY+0xa0>)
 8002ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce4:	1052      	asrs	r2, r2, #1
 8002ce6:	17db      	asrs	r3, r3, #31
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dc02      	bgt.n	8002cfa <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	81fb      	strh	r3, [r7, #14]
 8002cf8:	e007      	b.n	8002d0a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cfe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d02:	db02      	blt.n	8002d0a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002d04:	f240 133f 	movw	r3, #319	@ 0x13f
 8002d08:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002d0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dd05      	ble.n	8002d20 <TM_STMPE811_ReadY+0x7c>
 8002d14:	89fa      	ldrh	r2, [r7, #14]
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	e004      	b.n	8002d2a <TM_STMPE811_ReadY+0x86>
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002d2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	dd01      	ble.n	8002d38 <TM_STMPE811_ReadY+0x94>
        return val;
 8002d34:	89fb      	ldrh	r3, [r7, #14]
 8002d36:	e000      	b.n	8002d3a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002d38:	88fb      	ldrh	r3, [r7, #6]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2e8ba2e9 	.word	0x2e8ba2e9

08002d48 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <_sbrk+0x5c>)
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <_sbrk+0x60>)
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	@ (8002dbc <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <_sbrk+0x64>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <_sbrk+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d88:	f003 fe1c 	bl	80069c4 <__errno>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	e009      	b.n	8002dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <_sbrk+0x64>)
 8002da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20030000 	.word	0x20030000
 8002db8:	00000400 	.word	0x00000400
 8002dbc:	20025ca8 	.word	0x20025ca8
 8002dc0:	20025df8 	.word	0x20025df8

08002dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <SystemInit+0x20>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <SystemInit+0x20>)
 8002dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dec:	f7ff ffea 	bl	8002dc4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002df0:	480c      	ldr	r0, [pc, #48]	@ (8002e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002df2:	490d      	ldr	r1, [pc, #52]	@ (8002e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002df4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df8:	e002      	b.n	8002e00 <LoopCopyDataInit>

08002dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfe:	3304      	adds	r3, #4

08002e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e04:	d3f9      	bcc.n	8002dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e08:	4c0a      	ldr	r4, [pc, #40]	@ (8002e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e0c:	e001      	b.n	8002e12 <LoopFillZerobss>

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e10:	3204      	adds	r2, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e16:	f003 fddb 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1a:	f7fe fcc3 	bl	80017a4 <main>
  bx  lr    
 8002e1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002e2c:	08008dfc 	.word	0x08008dfc
  ldr r2, =_sbss
 8002e30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002e34:	20025df8 	.word	0x20025df8

08002e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_Init+0x40>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_Init+0x40>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	@ (8002e7c <HAL_Init+0x40>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f000 f94f 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f000 f808 	bl	8002e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e70:	f7ff f980 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00

08002e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e88:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_InitTick+0x54>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_InitTick+0x58>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f967 	bl	8003172 <HAL_SYSTICK_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00e      	b.n	8002ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b0f      	cmp	r3, #15
 8002eb2:	d80a      	bhi.n	8002eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f000 f92f 	bl	800311e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec0:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <HAL_InitTick+0x5c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000020 	.word	0x20000020
 8002ed8:	20000028 	.word	0x20000028
 8002edc:	20000024 	.word	0x20000024

08002ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_IncTick+0x20>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_IncTick+0x24>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <HAL_IncTick+0x24>)
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000028 	.word	0x20000028
 8002f04:	20025cac 	.word	0x20025cac

08002f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_GetTick+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20025cac 	.word	0x20025cac

08002f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f28:	f7ff ffee 	bl	8002f08 <HAL_GetTick>
 8002f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d005      	beq.n	8002f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_Delay+0x44>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f46:	bf00      	nop
 8002f48:	f7ff ffde 	bl	8002f08 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d8f7      	bhi.n	8002f48 <HAL_Delay+0x28>
  {
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000028 	.word	0x20000028

08002f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f84:	4013      	ands	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	60d3      	str	r3, [r2, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 0307 	and.w	r3, r3, #7
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db0b      	blt.n	8002ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4907      	ldr	r1, [pc, #28]	@ (8003004 <__NVIC_EnableIRQ+0x38>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2001      	movs	r0, #1
 8002fee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e100 	.word	0xe000e100

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	@ (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	@ (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d4:	d301      	bcc.n	80030da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00f      	b.n	80030fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <SysTick_Config+0x40>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e2:	210f      	movs	r1, #15
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f7ff ff8e 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <SysTick_Config+0x40>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <SysTick_Config+0x40>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000e010 	.word	0xe000e010

08003108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff29 	bl	8002f68 <__NVIC_SetPriorityGrouping>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003130:	f7ff ff3e 	bl	8002fb0 <__NVIC_GetPriorityGrouping>
 8003134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f7ff ff8e 	bl	800305c <NVIC_EncodePriority>
 8003140:	4602      	mov	r2, r0
 8003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff5d 	bl	8003008 <__NVIC_SetPriority>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff31 	bl	8002fcc <__NVIC_EnableIRQ>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffa2 	bl	80030c4 <SysTick_Config>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e177      	b.n	8003498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8166 	bne.w	8003492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d130      	bne.n	8003240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d017      	beq.n	800327c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80c0 	beq.w	8003492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b66      	ldr	r3, [pc, #408]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a65      	ldr	r2, [pc, #404]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b63      	ldr	r3, [pc, #396]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332e:	4a61      	ldr	r2, [pc, #388]	@ (80034b4 <HAL_GPIO_Init+0x328>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_GPIO_Init+0x32c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d037      	beq.n	80033ca <HAL_GPIO_Init+0x23e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a57      	ldr	r2, [pc, #348]	@ (80034bc <HAL_GPIO_Init+0x330>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0x23a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a56      	ldr	r2, [pc, #344]	@ (80034c0 <HAL_GPIO_Init+0x334>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x236>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a55      	ldr	r2, [pc, #340]	@ (80034c4 <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x232>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a54      	ldr	r2, [pc, #336]	@ (80034c8 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x22e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a53      	ldr	r2, [pc, #332]	@ (80034cc <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x22a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	@ (80034d4 <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_GPIO_Init+0x34c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	@ (80034dc <HAL_GPIO_Init+0x350>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x21a>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e012      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033a6:	230a      	movs	r3, #10
 80033a8:	e010      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e00e      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	@ (80034b4 <HAL_GPIO_Init+0x328>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a34      	ldr	r2, [pc, #208]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a29      	ldr	r2, [pc, #164]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003462:	4a1f      	ldr	r2, [pc, #124]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003468:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae84 	bls.w	80031a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	@ 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40021c00 	.word	0x40021c00
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022400 	.word	0x40022400
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e0d9      	b.n	80036b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003500:	2201      	movs	r2, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	429a      	cmp	r2, r3
 8003518:	f040 80c9 	bne.w	80036ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800351c:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_GPIO_DeInit+0x1e8>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003528:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a63      	ldr	r2, [pc, #396]	@ (80036d0 <HAL_GPIO_DeInit+0x1ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d037      	beq.n	80035b6 <HAL_GPIO_DeInit+0xd2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a62      	ldr	r2, [pc, #392]	@ (80036d4 <HAL_GPIO_DeInit+0x1f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_GPIO_DeInit+0xce>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a61      	ldr	r2, [pc, #388]	@ (80036d8 <HAL_GPIO_DeInit+0x1f4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_DeInit+0xca>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a60      	ldr	r2, [pc, #384]	@ (80036dc <HAL_GPIO_DeInit+0x1f8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_DeInit+0xc6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a5f      	ldr	r2, [pc, #380]	@ (80036e0 <HAL_GPIO_DeInit+0x1fc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_DeInit+0xc2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a5e      	ldr	r2, [pc, #376]	@ (80036e4 <HAL_GPIO_DeInit+0x200>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_DeInit+0xbe>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a5d      	ldr	r2, [pc, #372]	@ (80036e8 <HAL_GPIO_DeInit+0x204>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_DeInit+0xba>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a5c      	ldr	r2, [pc, #368]	@ (80036ec <HAL_GPIO_DeInit+0x208>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_DeInit+0xb6>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a5b      	ldr	r2, [pc, #364]	@ (80036f0 <HAL_GPIO_DeInit+0x20c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_DeInit+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a5a      	ldr	r2, [pc, #360]	@ (80036f4 <HAL_GPIO_DeInit+0x210>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_DeInit+0xae>
 800358e:	2309      	movs	r3, #9
 8003590:	e012      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 8003592:	230a      	movs	r3, #10
 8003594:	e010      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 8003596:	2308      	movs	r3, #8
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 800359a:	2307      	movs	r3, #7
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_DeInit+0xd4>
 80035b6:	2300      	movs	r3, #0
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d132      	bne.n	800362e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035c8:	4b4b      	ldr	r3, [pc, #300]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	4949      	ldr	r1, [pc, #292]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035d6:	4b48      	ldr	r3, [pc, #288]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	4946      	ldr	r1, [pc, #280]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035e4:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	4942      	ldr	r1, [pc, #264]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	493f      	ldr	r1, [pc, #252]	@ (80036f8 <HAL_GPIO_DeInit+0x214>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003610:	4a2e      	ldr	r2, [pc, #184]	@ (80036cc <HAL_GPIO_DeInit+0x1e8>)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	43da      	mvns	r2, r3
 8003620:	482a      	ldr	r0, [pc, #168]	@ (80036cc <HAL_GPIO_DeInit+0x1e8>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	400a      	ands	r2, r1
 8003628:	3302      	adds	r3, #2
 800362a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2103      	movs	r1, #3
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	08d2      	lsrs	r2, r2, #3
 8003664:	4019      	ands	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2103      	movs	r1, #3
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	401a      	ands	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	2101      	movs	r1, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2103      	movs	r1, #3
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	401a      	ands	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f af22 	bls.w	8003500 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40022400 	.word	0x40022400
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800373a:	4b08      	ldr	r3, [pc, #32]	@ (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fc90 	bl	8002074 <HAL_GPIO_EXTI_Callback>
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e12b      	b.n	80039ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe fd1c 	bl	80021c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c4:	f001 ff82 	bl	80056cc <HAL_RCC_GetPCLK1Freq>
 80037c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a81      	ldr	r2, [pc, #516]	@ (80039d4 <HAL_I2C_Init+0x274>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d807      	bhi.n	80037e4 <HAL_I2C_Init+0x84>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a80      	ldr	r2, [pc, #512]	@ (80039d8 <HAL_I2C_Init+0x278>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf94      	ite	ls
 80037dc:	2301      	movls	r3, #1
 80037de:	2300      	movhi	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e006      	b.n	80037f2 <HAL_I2C_Init+0x92>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a7d      	ldr	r2, [pc, #500]	@ (80039dc <HAL_I2C_Init+0x27c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e0e7      	b.n	80039ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a78      	ldr	r2, [pc, #480]	@ (80039e0 <HAL_I2C_Init+0x280>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0c9b      	lsrs	r3, r3, #18
 8003804:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4a6a      	ldr	r2, [pc, #424]	@ (80039d4 <HAL_I2C_Init+0x274>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d802      	bhi.n	8003834 <HAL_I2C_Init+0xd4>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3301      	adds	r3, #1
 8003832:	e009      	b.n	8003848 <HAL_I2C_Init+0xe8>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	4a69      	ldr	r2, [pc, #420]	@ (80039e4 <HAL_I2C_Init+0x284>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	3301      	adds	r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800385a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	495c      	ldr	r1, [pc, #368]	@ (80039d4 <HAL_I2C_Init+0x274>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d819      	bhi.n	800389c <HAL_I2C_Init+0x13c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e59      	subs	r1, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fbb1 f3f3 	udiv	r3, r1, r3
 8003876:	1c59      	adds	r1, r3, #1
 8003878:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800387c:	400b      	ands	r3, r1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_I2C_Init+0x138>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1e59      	subs	r1, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003896:	e051      	b.n	800393c <HAL_I2C_Init+0x1dc>
 8003898:	2304      	movs	r3, #4
 800389a:	e04f      	b.n	800393c <HAL_I2C_Init+0x1dc>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d111      	bne.n	80038c8 <HAL_I2C_Init+0x168>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e012      	b.n	80038ee <HAL_I2C_Init+0x18e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	0099      	lsls	r1, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x196>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e022      	b.n	800393c <HAL_I2C_Init+0x1dc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <HAL_I2C_Init+0x1bc>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e58      	subs	r0, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	440b      	add	r3, r1
 800390c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003910:	3301      	adds	r3, #1
 8003912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800391a:	e00f      	b.n	800393c <HAL_I2C_Init+0x1dc>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e58      	subs	r0, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	0099      	lsls	r1, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	6809      	ldr	r1, [r1, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800396a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6911      	ldr	r1, [r2, #16]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	000186a0 	.word	0x000186a0
 80039d8:	001e847f 	.word	0x001e847f
 80039dc:	003d08ff 	.word	0x003d08ff
 80039e0:	431bde83 	.word	0x431bde83
 80039e4:	10624dd3 	.word	0x10624dd3

080039e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a02:	f7ff fa81 	bl	8002f08 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	f040 80d9 	bne.w	8003bc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2319      	movs	r3, #25
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	496d      	ldr	r1, [pc, #436]	@ (8003bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fc8b 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0cc      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Mem_Write+0x56>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0c5      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d007      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2221      	movs	r2, #33	@ 0x21
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	@ 0x40
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8003aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aa6:	88f8      	ldrh	r0, [r7, #6]
 8003aa8:	893a      	ldrh	r2, [r7, #8]
 8003aaa:	8979      	ldrh	r1, [r7, #10]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fac2 	bl	8004040 <I2C_RequestMemoryWrite>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d052      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e081      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fd50 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d107      	bne.n	8003aee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_I2C_Mem_Write+0x180>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1aa      	bne.n	8003ac6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fd43 	bl	8004600 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d107      	bne.n	8003b98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e016      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e000      	b.n	8003bca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	00100002 	.word	0x00100002
 8003bd8:	ffff0000 	.word	0xffff0000

08003bdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	@ 0x30
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7ff f987 	bl	8002f08 <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 8214 	bne.w	8004032 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	497b      	ldr	r1, [pc, #492]	@ (8003e00 <HAL_I2C_Mem_Read+0x224>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fb91 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e207      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e200      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2222      	movs	r2, #34	@ 0x22
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_I2C_Mem_Read+0x228>)
 8003c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa5e 	bl	800416c <I2C_RequestMemoryRead>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e1bc      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e190      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d11b      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e170      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d11b      	bne.n	8003d6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	e150      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d80:	e144      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	f200 80f1 	bhi.w	8003f6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d123      	bne.n	8003ddc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fc79 	bl	8004690 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e145      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dda:	e117      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d14e      	bne.n	8003e82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	2200      	movs	r2, #0
 8003dec:	4906      	ldr	r1, [pc, #24]	@ (8003e08 <HAL_I2C_Mem_Read+0x22c>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 faa4 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e11a      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
 8003dfe:	bf00      	nop
 8003e00:	00100002 	.word	0x00100002
 8003e04:	ffff0000 	.word	0xffff0000
 8003e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e80:	e0c4      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	496c      	ldr	r1, [pc, #432]	@ (800403c <HAL_I2C_Mem_Read+0x460>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fa55 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0cb      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4955      	ldr	r1, [pc, #340]	@ (800403c <HAL_I2C_Mem_Read+0x460>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa27 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e09d      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f6c:	e04e      	b.n	800400c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fb8c 	bl	8004690 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e058      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d124      	bne.n	800400c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f aeb6 	bne.w	8003d82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	@ 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	00010004 	.word	0x00010004

08004040 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]
 8004052:	460b      	mov	r3, r1
 8004054:	813b      	strh	r3, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2200      	movs	r2, #0
 8004072:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f960 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004090:	d103      	bne.n	800409a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004098:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e05f      	b.n	800415e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	492d      	ldr	r1, [pc, #180]	@ (8004168 <I2C_RequestMemoryWrite+0x128>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f9bb 	bl	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e04c      	b.n	800415e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	6a39      	ldr	r1, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa46 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d107      	bne.n	8004102 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e02b      	b.n	800415e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]
 8004116:	e021      	b.n	800415c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	6a39      	ldr	r1, [r7, #32]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fa20 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e005      	b.n	800415e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004152:	893b      	ldrh	r3, [r7, #8]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	00010002 	.word	0x00010002

0800416c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	460b      	mov	r3, r1
 8004180:	813b      	strh	r3, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004194:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8c2 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041cc:	d103      	bne.n	80041d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0aa      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	4952      	ldr	r1, [pc, #328]	@ (8004338 <I2C_RequestMemoryRead+0x1cc>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f91d 	bl	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e097      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f9a8 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e076      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004248:	893b      	ldrh	r3, [r7, #8]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	e021      	b.n	8004298 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	6a39      	ldr	r1, [r7, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f982 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b04      	cmp	r3, #4
 8004278:	d107      	bne.n	800428a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e050      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429a:	6a39      	ldr	r1, [r7, #32]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f967 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d107      	bne.n	80042c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e035      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2200      	movs	r2, #0
 80042dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f82b 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fa:	d103      	bne.n	8004304 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e013      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004308:	897b      	ldrh	r3, [r7, #10]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	4906      	ldr	r1, [pc, #24]	@ (8004338 <I2C_RequestMemoryRead+0x1cc>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f886 	bl	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	00010002 	.word	0x00010002

0800433c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800434c:	e048      	b.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d044      	beq.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe fdd7 	bl	8002f08 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d139      	bne.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d10d      	bne.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	43da      	mvns	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	e00c      	b.n	80043ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	43da      	mvns	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d116      	bne.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e023      	b.n	8004428 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10d      	bne.n	8004406 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	43da      	mvns	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	e00c      	b.n	8004420 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	429a      	cmp	r2, r3
 8004424:	d093      	beq.n	800434e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800443e:	e071      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444e:	d123      	bne.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e067      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d041      	beq.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe fd32 	bl	8002f08 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d136      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d10c      	bne.n	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e00b      	b.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e021      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10c      	bne.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	43da      	mvns	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e00b      	b.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	f47f af6d 	bne.w	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457c:	e034      	b.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f8e3 	bl	800474a <I2C_IsAcknowledgeFailed>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e034      	b.n	80045f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d028      	beq.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe fcb7 	bl	8002f08 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d11d      	bne.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	2b80      	cmp	r3, #128	@ 0x80
 80045b8:	d016      	beq.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b80      	cmp	r3, #128	@ 0x80
 80045f4:	d1c3      	bne.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460c:	e034      	b.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f89b 	bl	800474a <I2C_IsAcknowledgeFailed>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e034      	b.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d028      	beq.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe fc6f 	bl	8002f08 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11d      	bne.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d016      	beq.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	f043 0220 	orr.w	r2, r3, #32
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e007      	b.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b04      	cmp	r3, #4
 8004684:	d1c3      	bne.n	800460e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800469c:	e049      	b.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d119      	bne.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0210 	mvn.w	r2, #16
 80046b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e030      	b.n	8004742 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e0:	f7fe fc12 	bl	8002f08 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d016      	beq.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e007      	b.n	8004742 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d1ae      	bne.n	800469e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004760:	d11b      	bne.n	800479a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800476a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d129      	bne.n	8004812 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	@ 0x24
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0210 	bic.w	r2, r2, #16
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d12a      	bne.n	8004890 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2224      	movs	r2, #36	@ 0x24
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	4313      	orrs	r3, r2
 800486a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0bf      	b.n	8004a32 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fce6 	bl	8002298 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80048e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b4a      	ldr	r3, [pc, #296]	@ (8004a3c <HAL_LTDC_Init+0x19c>)
 8004914:	400b      	ands	r3, r1
 8004916:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6899      	ldr	r1, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68d9      	ldr	r1, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b3e      	ldr	r3, [pc, #248]	@ (8004a3c <HAL_LTDC_Init+0x19c>)
 8004942:	400b      	ands	r3, r1
 8004944:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68d9      	ldr	r1, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6919      	ldr	r1, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <HAL_LTDC_Init+0x19c>)
 8004970:	400b      	ands	r3, r1
 8004972:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6919      	ldr	r1, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6959      	ldr	r1, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b27      	ldr	r3, [pc, #156]	@ (8004a3c <HAL_LTDC_Init+0x19c>)
 800499e:	400b      	ands	r3, r1
 80049a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0206 	orr.w	r2, r2, #6
 8004a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	f000f800 	.word	0xf000f800

08004a40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a40:	b5b0      	push	{r4, r5, r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_LTDC_ConfigLayer+0x1a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e02c      	b.n	8004ab4 <HAL_LTDC_ConfigLayer+0x74>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2134      	movs	r1, #52	@ 0x34
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f811 	bl	8004abc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bdb0      	pop	{r4, r5, r7, pc}

08004abc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	@ 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad8:	4413      	add	r3, r2
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	4413      	add	r3, r2
 8004aea:	3384      	adds	r3, #132	@ 0x84
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	4611      	mov	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	01d2      	lsls	r2, r2, #7
 8004af8:	440a      	add	r2, r1
 8004afa:	3284      	adds	r2, #132	@ 0x84
 8004afc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	01db      	lsls	r3, r3, #7
 8004b20:	440b      	add	r3, r1
 8004b22:	3384      	adds	r3, #132	@ 0x84
 8004b24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3a:	4413      	add	r3, r2
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	01db      	lsls	r3, r3, #7
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3384      	adds	r3, #132	@ 0x84
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4611      	mov	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	01d2      	lsls	r2, r2, #7
 8004b5a:	440a      	add	r2, r1
 8004b5c:	3284      	adds	r2, #132	@ 0x84
 8004b5e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b72:	4413      	add	r3, r2
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	440b      	add	r3, r1
 8004b82:	3384      	adds	r3, #132	@ 0x84
 8004b84:	4619      	mov	r1, r3
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	01db      	lsls	r3, r3, #7
 8004b96:	4413      	add	r3, r2
 8004b98:	3384      	adds	r3, #132	@ 0x84
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	01d2      	lsls	r2, r2, #7
 8004ba6:	440a      	add	r2, r1
 8004ba8:	3284      	adds	r2, #132	@ 0x84
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	@ 0x84
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	3384      	adds	r3, #132	@ 0x84
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	01db      	lsls	r3, r3, #7
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3384      	adds	r3, #132	@ 0x84
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	440b      	add	r3, r1
 8004c22:	3384      	adds	r3, #132	@ 0x84
 8004c24:	4619      	mov	r1, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4413      	add	r3, r2
 8004c38:	3384      	adds	r3, #132	@ 0x84
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4611      	mov	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	01d2      	lsls	r2, r2, #7
 8004c46:	440a      	add	r2, r1
 8004c48:	3284      	adds	r2, #132	@ 0x84
 8004c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	01db      	lsls	r3, r3, #7
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3384      	adds	r3, #132	@ 0x84
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	01db      	lsls	r3, r3, #7
 8004c70:	4413      	add	r3, r2
 8004c72:	3384      	adds	r3, #132	@ 0x84
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	01d2      	lsls	r2, r2, #7
 8004c80:	440a      	add	r2, r1
 8004c82:	3284      	adds	r2, #132	@ 0x84
 8004c84:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6809      	ldr	r1, [r1, #0]
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	01c9      	lsls	r1, r1, #7
 8004ca0:	4401      	add	r1, r0
 8004ca2:	3184      	adds	r1, #132	@ 0x84
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3384      	adds	r3, #132	@ 0x84
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	01db      	lsls	r3, r3, #7
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3384      	adds	r3, #132	@ 0x84
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	01db      	lsls	r3, r3, #7
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3384      	adds	r3, #132	@ 0x84
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cea:	2304      	movs	r3, #4
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e01b      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e014      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00b      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d007      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d003      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d1a:	2b07      	cmp	r3, #7
 8004d1c:	d102      	bne.n	8004d24 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e001      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d24:	2301      	movs	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	01db      	lsls	r3, r3, #7
 8004d32:	4413      	add	r3, r2
 8004d34:	3384      	adds	r3, #132	@ 0x84
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	01d2      	lsls	r2, r2, #7
 8004d42:	440a      	add	r2, r1
 8004d44:	3284      	adds	r2, #132	@ 0x84
 8004d46:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1acb      	subs	r3, r1, r3
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6809      	ldr	r1, [r1, #0]
 8004d6e:	4608      	mov	r0, r1
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	01c9      	lsls	r1, r1, #7
 8004d74:	4401      	add	r1, r0
 8004d76:	3184      	adds	r1, #132	@ 0x84
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	01db      	lsls	r3, r3, #7
 8004d86:	4413      	add	r3, r2
 8004d88:	3384      	adds	r3, #132	@ 0x84
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4611      	mov	r1, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	01d2      	lsls	r2, r2, #7
 8004d96:	440a      	add	r2, r1
 8004d98:	3284      	adds	r2, #132	@ 0x84
 8004d9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4413      	add	r3, r2
 8004db0:	3384      	adds	r3, #132	@ 0x84
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	01db      	lsls	r3, r3, #7
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3384      	adds	r3, #132	@ 0x84
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	01d2      	lsls	r2, r2, #7
 8004dd4:	440a      	add	r2, r1
 8004dd6:	3284      	adds	r2, #132	@ 0x84
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3724      	adds	r7, #36	@ 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e267      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e0a:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b85      	ldr	r3, [pc, #532]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d112      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4b82      	ldr	r3, [pc, #520]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	4b7e      	ldr	r3, [pc, #504]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x108>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d157      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e242      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x74>
 8004e52:	4b76      	ldr	r3, [pc, #472]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a75      	ldr	r2, [pc, #468]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e01d      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b70      	ldr	r3, [pc, #448]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b6d      	ldr	r3, [pc, #436]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e84:	4b69      	ldr	r3, [pc, #420]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a68      	ldr	r2, [pc, #416]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a65      	ldr	r2, [pc, #404]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe f830 	bl	8002f08 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fe f82c 	bl	8002f08 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	@ 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e207      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fe f81c 	bl	8002f08 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fe f818 	bl	8002f08 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	@ 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1f3      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	4b51      	ldr	r3, [pc, #324]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xe8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f02:	4b4a      	ldr	r3, [pc, #296]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b47      	ldr	r3, [pc, #284]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d11c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b44      	ldr	r3, [pc, #272]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d116      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1c7      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4937      	ldr	r1, [pc, #220]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	e03a      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f5c:	4b34      	ldr	r3, [pc, #208]	@ (8005030 <HAL_RCC_OscConfig+0x244>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fd ffd1 	bl	8002f08 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6a:	f7fd ffcd 	bl	8002f08 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e1a8      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4925      	ldr	r1, [pc, #148]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	e015      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9e:	4b24      	ldr	r3, [pc, #144]	@ (8005030 <HAL_RCC_OscConfig+0x244>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fd ffb0 	bl	8002f08 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fac:	f7fd ffac 	bl	8002f08 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e187      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d036      	beq.n	8005044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <HAL_RCC_OscConfig+0x248>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fd ff90 	bl	8002f08 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fec:	f7fd ff8c 	bl	8002f08 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e167      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8005000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x200>
 800500a:	e01b      	b.n	8005044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCC_OscConfig+0x248>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fd ff79 	bl	8002f08 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	e00e      	b.n	8005038 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501a:	f7fd ff75 	bl	8002f08 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d907      	bls.n	8005038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e150      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	42470000 	.word	0x42470000
 8005034:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ea      	bne.n	800501a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8097 	beq.w	8005180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b81      	ldr	r3, [pc, #516]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	4b7d      	ldr	r3, [pc, #500]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	4a7c      	ldr	r2, [pc, #496]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	@ 0x40
 8005072:	4b7a      	ldr	r3, [pc, #488]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b77      	ldr	r3, [pc, #476]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d118      	bne.n	80050c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b74      	ldr	r3, [pc, #464]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a73      	ldr	r2, [pc, #460]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fd ff35 	bl	8002f08 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fd ff31 	bl	8002f08 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e10c      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2ea>
 80050c8:	4b64      	ldr	r3, [pc, #400]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	4a63      	ldr	r2, [pc, #396]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d4:	e01c      	b.n	8005110 <HAL_RCC_OscConfig+0x324>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x30c>
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a5e      	ldr	r2, [pc, #376]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ea:	4b5c      	ldr	r3, [pc, #368]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	4a5b      	ldr	r2, [pc, #364]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f6:	e00b      	b.n	8005110 <HAL_RCC_OscConfig+0x324>
 80050f8:	4b58      	ldr	r3, [pc, #352]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4a57      	ldr	r2, [pc, #348]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	6713      	str	r3, [r2, #112]	@ 0x70
 8005104:	4b55      	ldr	r3, [pc, #340]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4a54      	ldr	r2, [pc, #336]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800510a:	f023 0304 	bic.w	r3, r3, #4
 800510e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fd fef6 	bl	8002f08 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	e00a      	b.n	8005136 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fd fef2 	bl	8002f08 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0cb      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	4b49      	ldr	r3, [pc, #292]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ee      	beq.n	8005120 <HAL_RCC_OscConfig+0x334>
 8005142:	e014      	b.n	800516e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005144:	f7fd fee0 	bl	8002f08 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	e00a      	b.n	8005162 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fd fedc 	bl	8002f08 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0b5      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005162:	4b3e      	ldr	r3, [pc, #248]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1ee      	bne.n	800514c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b39      	ldr	r3, [pc, #228]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	4a38      	ldr	r2, [pc, #224]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80a1 	beq.w	80052cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518a:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b08      	cmp	r3, #8
 8005194:	d05c      	beq.n	8005250 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d141      	bne.n	8005222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fd feb0 	bl	8002f08 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fd feac 	bl	8002f08 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e087      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	4b27      	ldr	r3, [pc, #156]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	019b      	lsls	r3, r3, #6
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	3b01      	subs	r3, #1
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	491b      	ldr	r1, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fd fe85 	bl	8002f08 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005202:	f7fd fe81 	bl	8002f08 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e05c      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x416>
 8005220:	e054      	b.n	80052cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fd fe6e 	bl	8002f08 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd fe6a 	bl	8002f08 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e045      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x444>
 800524e:	e03d      	b.n	80052cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e038      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
 800525c:	40023800 	.word	0x40023800
 8005260:	40007000 	.word	0x40007000
 8005264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d028      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d121      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d11a      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005298:	4013      	ands	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800529e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d111      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800

080052dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0cc      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b68      	ldr	r3, [pc, #416]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90c      	bls.n	8005318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b65      	ldr	r3, [pc, #404]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a58      	ldr	r2, [pc, #352]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800533a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a52      	ldr	r2, [pc, #328]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539a:	4b3f      	ldr	r3, [pc, #252]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e067      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4934      	ldr	r1, [pc, #208]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fd9c 	bl	8002f08 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fd fd98 	bl	8002f08 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b25      	ldr	r3, [pc, #148]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d20c      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fcfc 	bl	8002e80 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00
 8005498:	40023800 	.word	0x40023800
 800549c:	08008da0 	.word	0x08008da0
 80054a0:	20000020 	.word	0x20000020
 80054a4:	20000024 	.word	0x20000024

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ac:	b094      	sub	sp, #80	@ 0x50
 80054ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c0:	4b79      	ldr	r3, [pc, #484]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d00d      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x40>
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	f200 80e1 	bhi.w	8005694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x34>
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054da:	e0db      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b73      	ldr	r3, [pc, #460]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x204>)
 80054de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e0:	e0db      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e2:	4b73      	ldr	r3, [pc, #460]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e6:	e0d8      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e8:	4b6f      	ldr	r3, [pc, #444]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f2:	4b6d      	ldr	r3, [pc, #436]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d063      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fe:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	2200      	movs	r2, #0
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30
 8005512:	2300      	movs	r3, #0
 8005514:	637b      	str	r3, [r7, #52]	@ 0x34
 8005516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552c:	0150      	lsls	r0, r2, #5
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4621      	mov	r1, r4
 8005534:	1a51      	subs	r1, r2, r1
 8005536:	6139      	str	r1, [r7, #16]
 8005538:	4629      	mov	r1, r5
 800553a:	eb63 0301 	sbc.w	r3, r3, r1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800554c:	4659      	mov	r1, fp
 800554e:	018b      	lsls	r3, r1, #6
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005556:	4651      	mov	r1, sl
 8005558:	018a      	lsls	r2, r1, #6
 800555a:	4651      	mov	r1, sl
 800555c:	ebb2 0801 	subs.w	r8, r2, r1
 8005560:	4659      	mov	r1, fp
 8005562:	eb63 0901 	sbc.w	r9, r3, r1
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800557a:	4690      	mov	r8, r2
 800557c:	4699      	mov	r9, r3
 800557e:	4623      	mov	r3, r4
 8005580:	eb18 0303 	adds.w	r3, r8, r3
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	462b      	mov	r3, r5
 8005588:	eb49 0303 	adc.w	r3, r9, r3
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800559a:	4629      	mov	r1, r5
 800559c:	024b      	lsls	r3, r1, #9
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055a4:	4621      	mov	r1, r4
 80055a6:	024a      	lsls	r2, r1, #9
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ae:	2200      	movs	r2, #0
 80055b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055b8:	f7fa fe72 	bl	80002a0 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c4:	e058      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c6:	4b38      	ldr	r3, [pc, #224]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	2200      	movs	r2, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	4611      	mov	r1, r2
 80055d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
 80055dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f04f 0100 	mov.w	r1, #0
 80055ec:	0159      	lsls	r1, r3, #5
 80055ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055f2:	0150      	lsls	r0, r2, #5
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4641      	mov	r1, r8
 80055fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80055fe:	4649      	mov	r1, r9
 8005600:	eb63 0b01 	sbc.w	fp, r3, r1
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005618:	ebb2 040a 	subs.w	r4, r2, sl
 800561c:	eb63 050b 	sbc.w	r5, r3, fp
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	00eb      	lsls	r3, r5, #3
 800562a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562e:	00e2      	lsls	r2, r4, #3
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	4643      	mov	r3, r8
 8005636:	18e3      	adds	r3, r4, r3
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	464b      	mov	r3, r9
 800563c:	eb45 0303 	adc.w	r3, r5, r3
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564e:	4629      	mov	r1, r5
 8005650:	028b      	lsls	r3, r1, #10
 8005652:	4621      	mov	r1, r4
 8005654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005658:	4621      	mov	r1, r4
 800565a:	028a      	lsls	r2, r1, #10
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	2200      	movs	r2, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	61fa      	str	r2, [r7, #28]
 8005668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566c:	f7fa fe18 	bl	80002a0 <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005678:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005692:	e002      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800569c:	4618      	mov	r0, r3
 800569e:	3750      	adds	r7, #80	@ 0x50
 80056a0:	46bd      	mov	sp, r7
 80056a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	007a1200 	.word	0x007a1200

080056b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b8:	4b03      	ldr	r3, [pc, #12]	@ (80056c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000020 	.word	0x20000020

080056cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056d0:	f7ff fff0 	bl	80056b4 <HAL_RCC_GetHCLKFreq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	0a9b      	lsrs	r3, r3, #10
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	4903      	ldr	r1, [pc, #12]	@ (80056f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e2:	5ccb      	ldrb	r3, [r1, r3]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40023800 	.word	0x40023800
 80056f0:	08008db0 	.word	0x08008db0

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d075      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005728:	4b91      	ldr	r3, [pc, #580]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800572e:	f7fd fbeb 	bl	8002f08 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005736:	f7fd fbe7 	bl	8002f08 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e189      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005748:	4b8a      	ldr	r3, [pc, #552]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	019a      	lsls	r2, r3, #6
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	071b      	lsls	r3, r3, #28
 800576c:	4981      	ldr	r1, [pc, #516]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01f      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005780:	4b7c      	ldr	r3, [pc, #496]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005786:	0f1b      	lsrs	r3, r3, #28
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	019a      	lsls	r2, r3, #6
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	061b      	lsls	r3, r3, #24
 800579a:	431a      	orrs	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	071b      	lsls	r3, r3, #28
 80057a0:	4974      	ldr	r1, [pc, #464]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057a8:	4b72      	ldr	r3, [pc, #456]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ae:	f023 021f 	bic.w	r2, r3, #31
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	496e      	ldr	r1, [pc, #440]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	019a      	lsls	r2, r3, #6
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	071b      	lsls	r3, r3, #28
 80057e0:	4964      	ldr	r1, [pc, #400]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057e8:	4b61      	ldr	r3, [pc, #388]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ee:	f7fd fb8b 	bl	8002f08 <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057f6:	f7fd fb87 	bl	8002f08 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e129      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005808:	4b5a      	ldr	r3, [pc, #360]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005828:	2b00      	cmp	r3, #0
 800582a:	d079      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800582c:	4b52      	ldr	r3, [pc, #328]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005832:	f7fd fb69 	bl	8002f08 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800583a:	f7fd fb65 	bl	8002f08 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e107      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800584c:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005858:	d0ef      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005866:	4b43      	ldr	r3, [pc, #268]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	0f1b      	lsrs	r3, r3, #28
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	019a      	lsls	r2, r3, #6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	061b      	lsls	r3, r3, #24
 8005880:	431a      	orrs	r2, r3
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	071b      	lsls	r3, r3, #28
 8005886:	493b      	ldr	r1, [pc, #236]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800588e:	4b39      	ldr	r3, [pc, #228]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005894:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	3b01      	subs	r3, #1
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	4934      	ldr	r1, [pc, #208]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	0e1b      	lsrs	r3, r3, #24
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	019a      	lsls	r2, r3, #6
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	071b      	lsls	r3, r3, #28
 80058d4:	4927      	ldr	r1, [pc, #156]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058dc:	4b25      	ldr	r3, [pc, #148]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	4922      	ldr	r1, [pc, #136]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058f2:	4b21      	ldr	r3, [pc, #132]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f8:	f7fd fb06 	bl	8002f08 <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005900:	f7fd fb02 	bl	8002f08 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0a4      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005912:	4b18      	ldr	r3, [pc, #96]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591e:	d1ef      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808b 	beq.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	4a0f      	ldr	r2, [pc, #60]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	@ 0x40
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a0b      	ldr	r2, [pc, #44]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005954:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005956:	f7fd fad7 	bl	8002f08 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800595c:	e010      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7fd fad3 	bl	8002f08 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d909      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e075      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005970:	42470068 	.word	0x42470068
 8005974:	40023800 	.word	0x40023800
 8005978:	42470070 	.word	0x42470070
 800597c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005980:	4b38      	ldr	r3, [pc, #224]	@ (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0e8      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800598c:	4b36      	ldr	r3, [pc, #216]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005994:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d028      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	4b2c      	ldr	r3, [pc, #176]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059c0:	4a29      	ldr	r2, [pc, #164]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c6:	4b28      	ldr	r3, [pc, #160]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d114      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059d2:	f7fd fa99 	bl	8002f08 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fd fa95 	bl	8002f08 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e035      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ee      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a08:	d10d      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a0a:	4b17      	ldr	r3, [pc, #92]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	4912      	ldr	r1, [pc, #72]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]
 8005a24:	e005      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a30:	6093      	str	r3, [r2, #8]
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3e:	490a      	ldr	r1, [pc, #40]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005a56:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a58:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40007000 	.word	0x40007000
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	42470e40 	.word	0x42470e40
 8005a70:	424711e0 	.word	0x424711e0

08005a74 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e01c      	b.n	8005ac0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	795b      	ldrb	r3, [r3, #5]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fd26 	bl	80024e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0204 	orr.w	r2, r2, #4
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e07b      	b.n	8005bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aea:	d009      	beq.n	8005b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	61da      	str	r2, [r3, #28]
 8005af2:	e005      	b.n	8005b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc fd06 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	f003 0104 	and.w	r1, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	f003 0210 	and.w	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e01a      	b.n	8005c22 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fc fcd9 	bl	80025bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3a:	f7fd f965 	bl	8002f08 <HAL_GetTick>
 8005c3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	e12a      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_SPI_Transmit+0x36>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e122      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_SPI_Transmit+0x48>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e11b      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cec:	2b40      	cmp	r3, #64	@ 0x40
 8005cee:	d007      	beq.n	8005d00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d08:	d152      	bne.n	8005db0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Transmit+0xee>
 8005d12:	8b7b      	ldrh	r3, [r7, #26]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d145      	bne.n	8005da4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d3c:	e032      	b.n	8005da4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d112      	bne.n	8005d72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	1c9a      	adds	r2, r3, #2
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d70:	e018      	b.n	8005da4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d72:	f7fd f8c9 	bl	8002f08 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d803      	bhi.n	8005d8a <HAL_SPI_Transmit+0x160>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d102      	bne.n	8005d90 <HAL_SPI_Transmit+0x166>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d109      	bne.n	8005da4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e082      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1c7      	bne.n	8005d3e <HAL_SPI_Transmit+0x114>
 8005dae:	e053      	b.n	8005e58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_SPI_Transmit+0x194>
 8005db8:	8b7b      	ldrh	r3, [r7, #26]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d147      	bne.n	8005e4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005de4:	e033      	b.n	8005e4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d113      	bne.n	8005e1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	7812      	ldrb	r2, [r2, #0]
 8005e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e1a:	e018      	b.n	8005e4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1c:	f7fd f874 	bl	8002f08 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d803      	bhi.n	8005e34 <HAL_SPI_Transmit+0x20a>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_Transmit+0x210>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e02d      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1c6      	bne.n	8005de6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f8bf 	bl	8005fe0 <SPI_EndRxTxTransaction>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ec0:	b2db      	uxtb	r3, r3
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee0:	f7fd f812 	bl	8002f08 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ef0:	f7fd f80a 	bl	8002f08 <HAL_GetTick>
 8005ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef6:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	0d1b      	lsrs	r3, r3, #20
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f06:	e054      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d050      	beq.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f10:	f7fc fffa 	bl	8002f08 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d902      	bls.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d13d      	bne.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3e:	d111      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f48:	d004      	beq.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f52:	d107      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6c:	d10f      	bne.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e017      	b.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d19b      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000020 	.word	0x20000020

08005fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff ff6a 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e032      	b.n	8006078 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006012:	4b1b      	ldr	r3, [pc, #108]	@ (8006080 <SPI_EndRxTxTransaction+0xa0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	@ (8006084 <SPI_EndRxTxTransaction+0xa4>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	0d5b      	lsrs	r3, r3, #21
 800601e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006030:	d112      	bne.n	8006058 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	2180      	movs	r1, #128	@ 0x80
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff ff47 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d016      	beq.n	8006076 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e00f      	b.n	8006078 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3b01      	subs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b80      	cmp	r3, #128	@ 0x80
 8006070:	d0f2      	beq.n	8006058 <SPI_EndRxTxTransaction+0x78>
 8006072:	e000      	b.n	8006076 <SPI_EndRxTxTransaction+0x96>
        break;
 8006074:	bf00      	nop
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000020 	.word	0x20000020
 8006084:	165e9f81 	.word	0x165e9f81

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e041      	b.n	800611e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fc faa2 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 fa7e 	bl	80065c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d001      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e04e      	b.n	80061de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a23      	ldr	r2, [pc, #140]	@ (80061ec <HAL_TIM_Base_Start_IT+0xc4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d01d      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <HAL_TIM_Base_Start_IT+0xd8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <HAL_TIM_Base_Start_IT+0xdc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d010      	beq.n	80061dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	e007      	b.n	80061dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40001800 	.word	0x40001800

08006208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d020      	beq.n	800626c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0202 	mvn.w	r2, #2
 800623c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f999 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f98b 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f99c 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d020      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0204 	mvn.w	r2, #4
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f973 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f965 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f976 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d020      	beq.n	8006304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0208 	mvn.w	r2, #8
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2204      	movs	r2, #4
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f94d 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f93f 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f950 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2208      	movs	r2, #8
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f927 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f919 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f92a 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0201 	mvn.w	r2, #1
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb fede 	bl	8002130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fae4 	bl	8006960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8fb 	bl	80065b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0220 	mvn.w	r2, #32
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fab6 	bl	800694c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIM_ConfigClockSource+0x1c>
 8006400:	2302      	movs	r3, #2
 8006402:	e0b4      	b.n	800656e <HAL_TIM_ConfigClockSource+0x186>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800642a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643c:	d03e      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0xd4>
 800643e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006442:	f200 8087 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644a:	f000 8086 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x172>
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006452:	d87f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b70      	cmp	r3, #112	@ 0x70
 8006456:	d01a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xa6>
 8006458:	2b70      	cmp	r3, #112	@ 0x70
 800645a:	d87b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b60      	cmp	r3, #96	@ 0x60
 800645e:	d050      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x11a>
 8006460:	2b60      	cmp	r3, #96	@ 0x60
 8006462:	d877      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b50      	cmp	r3, #80	@ 0x50
 8006466:	d03c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006468:	2b50      	cmp	r3, #80	@ 0x50
 800646a:	d873      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	d058      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x13a>
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	d86f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b30      	cmp	r3, #48	@ 0x30
 8006476:	d064      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	2b30      	cmp	r3, #48	@ 0x30
 800647a:	d86b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b20      	cmp	r3, #32
 800647e:	d060      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d867      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006488:	2b10      	cmp	r3, #16
 800648a:	d05a      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 800648c:	e062      	b.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800649e:	f000 f9b9 	bl	8006814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	609a      	str	r2, [r3, #8]
      break;
 80064ba:	e04f      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064cc:	f000 f9a2 	bl	8006814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064de:	609a      	str	r2, [r3, #8]
      break;
 80064e0:	e03c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 f916 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2150      	movs	r1, #80	@ 0x50
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f96f 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006500:	e02c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800650e:	461a      	mov	r2, r3
 8006510:	f000 f935 	bl	800677e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2160      	movs	r1, #96	@ 0x60
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f95f 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006520:	e01c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652e:	461a      	mov	r2, r3
 8006530:	f000 f8f6 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2140      	movs	r1, #64	@ 0x40
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f94f 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006540:	e00c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 f946 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006552:	e003      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e000      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800655a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a46      	ldr	r2, [pc, #280]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e6:	d00f      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a43      	ldr	r2, [pc, #268]	@ (80066f8 <TIM_Base_SetConfig+0x130>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a42      	ldr	r2, [pc, #264]	@ (80066fc <TIM_Base_SetConfig+0x134>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a41      	ldr	r2, [pc, #260]	@ (8006700 <TIM_Base_SetConfig+0x138>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a40      	ldr	r2, [pc, #256]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d108      	bne.n	800661a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a35      	ldr	r2, [pc, #212]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006628:	d027      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a32      	ldr	r2, [pc, #200]	@ (80066f8 <TIM_Base_SetConfig+0x130>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d023      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a31      	ldr	r2, [pc, #196]	@ (80066fc <TIM_Base_SetConfig+0x134>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a30      	ldr	r2, [pc, #192]	@ (8006700 <TIM_Base_SetConfig+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2f      	ldr	r2, [pc, #188]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d017      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2e      	ldr	r2, [pc, #184]	@ (8006708 <TIM_Base_SetConfig+0x140>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2d      	ldr	r2, [pc, #180]	@ (800670c <TIM_Base_SetConfig+0x144>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2c      	ldr	r2, [pc, #176]	@ (8006710 <TIM_Base_SetConfig+0x148>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <TIM_Base_SetConfig+0x14c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <TIM_Base_SetConfig+0x150>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <TIM_Base_SetConfig+0x154>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a10      	ldr	r2, [pc, #64]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0xf8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a12      	ldr	r2, [pc, #72]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d105      	bne.n	80066e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f023 0201 	bic.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]
  }
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40010400 	.word	0x40010400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800
 8006714:	40001800 	.word	0x40001800
 8006718:	40001c00 	.word	0x40001c00
 800671c:	40002000 	.word	0x40002000

08006720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800674a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 030a 	bic.w	r3, r3, #10
 800675c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677e:	b480      	push	{r7}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f023 0210 	bic.w	r2, r3, #16
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	031b      	lsls	r3, r3, #12
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f043 0307 	orr.w	r3, r3, #7
 8006800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800682e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	431a      	orrs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e05a      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a21      	ldr	r2, [pc, #132]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d022      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d01d      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1d      	ldr	r2, [pc, #116]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a17      	ldr	r2, [pc, #92]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40010400 	.word	0x40010400
 8006944:	40014000 	.word	0x40014000
 8006948:	40001800 	.word	0x40001800

0800694c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <siprintf>:
 8006974:	b40e      	push	{r1, r2, r3}
 8006976:	b500      	push	{lr}
 8006978:	b09c      	sub	sp, #112	@ 0x70
 800697a:	ab1d      	add	r3, sp, #116	@ 0x74
 800697c:	9002      	str	r0, [sp, #8]
 800697e:	9006      	str	r0, [sp, #24]
 8006980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006984:	4809      	ldr	r0, [pc, #36]	@ (80069ac <siprintf+0x38>)
 8006986:	9107      	str	r1, [sp, #28]
 8006988:	9104      	str	r1, [sp, #16]
 800698a:	4909      	ldr	r1, [pc, #36]	@ (80069b0 <siprintf+0x3c>)
 800698c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006990:	9105      	str	r1, [sp, #20]
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	a902      	add	r1, sp, #8
 8006998:	f000 f994 	bl	8006cc4 <_svfiprintf_r>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	b01c      	add	sp, #112	@ 0x70
 80069a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a8:	b003      	add	sp, #12
 80069aa:	4770      	bx	lr
 80069ac:	2000002c 	.word	0x2000002c
 80069b0:	ffff0208 	.word	0xffff0208

080069b4 <memset>:
 80069b4:	4402      	add	r2, r0
 80069b6:	4603      	mov	r3, r0
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d100      	bne.n	80069be <memset+0xa>
 80069bc:	4770      	bx	lr
 80069be:	f803 1b01 	strb.w	r1, [r3], #1
 80069c2:	e7f9      	b.n	80069b8 <memset+0x4>

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	@ (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	2000002c 	.word	0x2000002c

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a08 <__libc_init_array+0x38>)
 80069d4:	4c0d      	ldr	r4, [pc, #52]	@ (8006a0c <__libc_init_array+0x3c>)
 80069d6:	1b64      	subs	r4, r4, r5
 80069d8:	10a4      	asrs	r4, r4, #2
 80069da:	2600      	movs	r6, #0
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006a10 <__libc_init_array+0x40>)
 80069e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006a14 <__libc_init_array+0x44>)
 80069e4:	f000 fc66 	bl	80072b4 <_init>
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	2600      	movs	r6, #0
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	08008df4 	.word	0x08008df4
 8006a0c:	08008df4 	.word	0x08008df4
 8006a10:	08008df4 	.word	0x08008df4
 8006a14:	08008df8 	.word	0x08008df8

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_free_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d041      	beq.n	8006aa8 <_free_r+0x8c>
 8006a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a28:	1f0c      	subs	r4, r1, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfb8      	it	lt
 8006a2e:	18e4      	addlt	r4, r4, r3
 8006a30:	f000 f8e0 	bl	8006bf4 <__malloc_lock>
 8006a34:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <_free_r+0x90>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	b933      	cbnz	r3, 8006a48 <_free_r+0x2c>
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	6014      	str	r4, [r2, #0]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a44:	f000 b8dc 	b.w	8006c00 <__malloc_unlock>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x42>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	e7ed      	b.n	8006a3a <_free_r+0x1e>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b10b      	cbz	r3, 8006a68 <_free_r+0x4c>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d9fa      	bls.n	8006a5e <_free_r+0x42>
 8006a68:	6811      	ldr	r1, [r2, #0]
 8006a6a:	1850      	adds	r0, r2, r1
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d10b      	bne.n	8006a88 <_free_r+0x6c>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	4401      	add	r1, r0
 8006a74:	1850      	adds	r0, r2, r1
 8006a76:	4283      	cmp	r3, r0
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	d1e0      	bne.n	8006a3e <_free_r+0x22>
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	6053      	str	r3, [r2, #4]
 8006a82:	4408      	add	r0, r1
 8006a84:	6010      	str	r0, [r2, #0]
 8006a86:	e7da      	b.n	8006a3e <_free_r+0x22>
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x74>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	e7d6      	b.n	8006a3e <_free_r+0x22>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	1821      	adds	r1, r4, r0
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf04      	itt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	bf04      	itt	eq
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	6054      	str	r4, [r2, #4]
 8006aa6:	e7ca      	b.n	8006a3e <_free_r+0x22>
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	20025df4 	.word	0x20025df4

08006ab0 <sbrk_aligned>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8006af0 <sbrk_aligned+0x40>)
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6831      	ldr	r1, [r6, #0]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b911      	cbnz	r1, 8006ac2 <sbrk_aligned+0x12>
 8006abc:	f000 fba6 	bl	800720c <_sbrk_r>
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 fba1 	bl	800720c <_sbrk_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d103      	bne.n	8006ad6 <sbrk_aligned+0x26>
 8006ace:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	1cc4      	adds	r4, r0, #3
 8006ad8:	f024 0403 	bic.w	r4, r4, #3
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d0f8      	beq.n	8006ad2 <sbrk_aligned+0x22>
 8006ae0:	1a21      	subs	r1, r4, r0
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 fb92 	bl	800720c <_sbrk_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1f2      	bne.n	8006ad2 <sbrk_aligned+0x22>
 8006aec:	e7ef      	b.n	8006ace <sbrk_aligned+0x1e>
 8006aee:	bf00      	nop
 8006af0:	20025df0 	.word	0x20025df0

08006af4 <_malloc_r>:
 8006af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af8:	1ccd      	adds	r5, r1, #3
 8006afa:	f025 0503 	bic.w	r5, r5, #3
 8006afe:	3508      	adds	r5, #8
 8006b00:	2d0c      	cmp	r5, #12
 8006b02:	bf38      	it	cc
 8006b04:	250c      	movcc	r5, #12
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	4606      	mov	r6, r0
 8006b0a:	db01      	blt.n	8006b10 <_malloc_r+0x1c>
 8006b0c:	42a9      	cmp	r1, r5
 8006b0e:	d904      	bls.n	8006b1a <_malloc_r+0x26>
 8006b10:	230c      	movs	r3, #12
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	2000      	movs	r0, #0
 8006b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf0 <_malloc_r+0xfc>
 8006b1e:	f000 f869 	bl	8006bf4 <__malloc_lock>
 8006b22:	f8d8 3000 	ldr.w	r3, [r8]
 8006b26:	461c      	mov	r4, r3
 8006b28:	bb44      	cbnz	r4, 8006b7c <_malloc_r+0x88>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff ffbf 	bl	8006ab0 <sbrk_aligned>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	4604      	mov	r4, r0
 8006b36:	d158      	bne.n	8006bea <_malloc_r+0xf6>
 8006b38:	f8d8 4000 	ldr.w	r4, [r8]
 8006b3c:	4627      	mov	r7, r4
 8006b3e:	2f00      	cmp	r7, #0
 8006b40:	d143      	bne.n	8006bca <_malloc_r+0xd6>
 8006b42:	2c00      	cmp	r4, #0
 8006b44:	d04b      	beq.n	8006bde <_malloc_r+0xea>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	eb04 0903 	add.w	r9, r4, r3
 8006b50:	f000 fb5c 	bl	800720c <_sbrk_r>
 8006b54:	4581      	cmp	r9, r0
 8006b56:	d142      	bne.n	8006bde <_malloc_r+0xea>
 8006b58:	6821      	ldr	r1, [r4, #0]
 8006b5a:	1a6d      	subs	r5, r5, r1
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ffa6 	bl	8006ab0 <sbrk_aligned>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d03a      	beq.n	8006bde <_malloc_r+0xea>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	442b      	add	r3, r5
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	bb62      	cbnz	r2, 8006bd0 <_malloc_r+0xdc>
 8006b76:	f8c8 7000 	str.w	r7, [r8]
 8006b7a:	e00f      	b.n	8006b9c <_malloc_r+0xa8>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	1b52      	subs	r2, r2, r5
 8006b80:	d420      	bmi.n	8006bc4 <_malloc_r+0xd0>
 8006b82:	2a0b      	cmp	r2, #11
 8006b84:	d917      	bls.n	8006bb6 <_malloc_r+0xc2>
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	6025      	str	r5, [r4, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	6059      	strne	r1, [r3, #4]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	bf08      	it	eq
 8006b94:	f8c8 1000 	streq.w	r1, [r8]
 8006b98:	5162      	str	r2, [r4, r5]
 8006b9a:	604b      	str	r3, [r1, #4]
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f82f 	bl	8006c00 <__malloc_unlock>
 8006ba2:	f104 000b 	add.w	r0, r4, #11
 8006ba6:	1d23      	adds	r3, r4, #4
 8006ba8:	f020 0007 	bic.w	r0, r0, #7
 8006bac:	1ac2      	subs	r2, r0, r3
 8006bae:	bf1c      	itt	ne
 8006bb0:	1a1b      	subne	r3, r3, r0
 8006bb2:	50a3      	strne	r3, [r4, r2]
 8006bb4:	e7af      	b.n	8006b16 <_malloc_r+0x22>
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	bf0c      	ite	eq
 8006bbc:	f8c8 2000 	streq.w	r2, [r8]
 8006bc0:	605a      	strne	r2, [r3, #4]
 8006bc2:	e7eb      	b.n	8006b9c <_malloc_r+0xa8>
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	6864      	ldr	r4, [r4, #4]
 8006bc8:	e7ae      	b.n	8006b28 <_malloc_r+0x34>
 8006bca:	463c      	mov	r4, r7
 8006bcc:	687f      	ldr	r7, [r7, #4]
 8006bce:	e7b6      	b.n	8006b3e <_malloc_r+0x4a>
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d1fb      	bne.n	8006bd0 <_malloc_r+0xdc>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6053      	str	r3, [r2, #4]
 8006bdc:	e7de      	b.n	8006b9c <_malloc_r+0xa8>
 8006bde:	230c      	movs	r3, #12
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f80c 	bl	8006c00 <__malloc_unlock>
 8006be8:	e794      	b.n	8006b14 <_malloc_r+0x20>
 8006bea:	6005      	str	r5, [r0, #0]
 8006bec:	e7d6      	b.n	8006b9c <_malloc_r+0xa8>
 8006bee:	bf00      	nop
 8006bf0:	20025df4 	.word	0x20025df4

08006bf4 <__malloc_lock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__malloc_lock+0x8>)
 8006bf6:	f7ff bf0f 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	20025dec 	.word	0x20025dec

08006c00 <__malloc_unlock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__malloc_unlock+0x8>)
 8006c02:	f7ff bf0a 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	20025dec 	.word	0x20025dec

08006c0c <__ssputs_r>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	688e      	ldr	r6, [r1, #8]
 8006c12:	461f      	mov	r7, r3
 8006c14:	42be      	cmp	r6, r7
 8006c16:	680b      	ldr	r3, [r1, #0]
 8006c18:	4682      	mov	sl, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	4690      	mov	r8, r2
 8006c1e:	d82d      	bhi.n	8006c7c <__ssputs_r+0x70>
 8006c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c28:	d026      	beq.n	8006c78 <__ssputs_r+0x6c>
 8006c2a:	6965      	ldr	r5, [r4, #20]
 8006c2c:	6909      	ldr	r1, [r1, #16]
 8006c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c32:	eba3 0901 	sub.w	r9, r3, r1
 8006c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c3a:	1c7b      	adds	r3, r7, #1
 8006c3c:	444b      	add	r3, r9
 8006c3e:	106d      	asrs	r5, r5, #1
 8006c40:	429d      	cmp	r5, r3
 8006c42:	bf38      	it	cc
 8006c44:	461d      	movcc	r5, r3
 8006c46:	0553      	lsls	r3, r2, #21
 8006c48:	d527      	bpl.n	8006c9a <__ssputs_r+0x8e>
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7ff ff52 	bl	8006af4 <_malloc_r>
 8006c50:	4606      	mov	r6, r0
 8006c52:	b360      	cbz	r0, 8006cae <__ssputs_r+0xa2>
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	464a      	mov	r2, r9
 8006c58:	f000 fae8 	bl	800722c <memcpy>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	6126      	str	r6, [r4, #16]
 8006c6a:	6165      	str	r5, [r4, #20]
 8006c6c:	444e      	add	r6, r9
 8006c6e:	eba5 0509 	sub.w	r5, r5, r9
 8006c72:	6026      	str	r6, [r4, #0]
 8006c74:	60a5      	str	r5, [r4, #8]
 8006c76:	463e      	mov	r6, r7
 8006c78:	42be      	cmp	r6, r7
 8006c7a:	d900      	bls.n	8006c7e <__ssputs_r+0x72>
 8006c7c:	463e      	mov	r6, r7
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	4632      	mov	r2, r6
 8006c82:	4641      	mov	r1, r8
 8006c84:	f000 faa8 	bl	80071d8 <memmove>
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	1b9b      	subs	r3, r3, r6
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	4433      	add	r3, r6
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	2000      	movs	r0, #0
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	f000 fad4 	bl	8007248 <_realloc_r>
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1e0      	bne.n	8006c68 <__ssputs_r+0x5c>
 8006ca6:	6921      	ldr	r1, [r4, #16]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	f7ff feb7 	bl	8006a1c <_free_r>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	f8ca 3000 	str.w	r3, [sl]
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e7e9      	b.n	8006c96 <__ssputs_r+0x8a>
	...

08006cc4 <_svfiprintf_r>:
 8006cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc8:	4698      	mov	r8, r3
 8006cca:	898b      	ldrh	r3, [r1, #12]
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	b09d      	sub	sp, #116	@ 0x74
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	d510      	bpl.n	8006cfa <_svfiprintf_r+0x36>
 8006cd8:	690b      	ldr	r3, [r1, #16]
 8006cda:	b973      	cbnz	r3, 8006cfa <_svfiprintf_r+0x36>
 8006cdc:	2140      	movs	r1, #64	@ 0x40
 8006cde:	f7ff ff09 	bl	8006af4 <_malloc_r>
 8006ce2:	6028      	str	r0, [r5, #0]
 8006ce4:	6128      	str	r0, [r5, #16]
 8006ce6:	b930      	cbnz	r0, 8006cf6 <_svfiprintf_r+0x32>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	b01d      	add	sp, #116	@ 0x74
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf6:	2340      	movs	r3, #64	@ 0x40
 8006cf8:	616b      	str	r3, [r5, #20]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cfe:	2320      	movs	r3, #32
 8006d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d08:	2330      	movs	r3, #48	@ 0x30
 8006d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ea8 <_svfiprintf_r+0x1e4>
 8006d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d12:	f04f 0901 	mov.w	r9, #1
 8006d16:	4623      	mov	r3, r4
 8006d18:	469a      	mov	sl, r3
 8006d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1e:	b10a      	cbz	r2, 8006d24 <_svfiprintf_r+0x60>
 8006d20:	2a25      	cmp	r2, #37	@ 0x25
 8006d22:	d1f9      	bne.n	8006d18 <_svfiprintf_r+0x54>
 8006d24:	ebba 0b04 	subs.w	fp, sl, r4
 8006d28:	d00b      	beq.n	8006d42 <_svfiprintf_r+0x7e>
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4638      	mov	r0, r7
 8006d32:	f7ff ff6b 	bl	8006c0c <__ssputs_r>
 8006d36:	3001      	adds	r0, #1
 8006d38:	f000 80a7 	beq.w	8006e8a <_svfiprintf_r+0x1c6>
 8006d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d3e:	445a      	add	r2, fp
 8006d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d42:	f89a 3000 	ldrb.w	r3, [sl]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 809f 	beq.w	8006e8a <_svfiprintf_r+0x1c6>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d56:	f10a 0a01 	add.w	sl, sl, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d64:	4654      	mov	r4, sl
 8006d66:	2205      	movs	r2, #5
 8006d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d6c:	484e      	ldr	r0, [pc, #312]	@ (8006ea8 <_svfiprintf_r+0x1e4>)
 8006d6e:	f7f9 fa47 	bl	8000200 <memchr>
 8006d72:	9a04      	ldr	r2, [sp, #16]
 8006d74:	b9d8      	cbnz	r0, 8006dae <_svfiprintf_r+0xea>
 8006d76:	06d0      	lsls	r0, r2, #27
 8006d78:	bf44      	itt	mi
 8006d7a:	2320      	movmi	r3, #32
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d80:	0711      	lsls	r1, r2, #28
 8006d82:	bf44      	itt	mi
 8006d84:	232b      	movmi	r3, #43	@ 0x2b
 8006d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d90:	d015      	beq.n	8006dbe <_svfiprintf_r+0xfa>
 8006d92:	9a07      	ldr	r2, [sp, #28]
 8006d94:	4654      	mov	r4, sl
 8006d96:	2000      	movs	r0, #0
 8006d98:	f04f 0c0a 	mov.w	ip, #10
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da2:	3b30      	subs	r3, #48	@ 0x30
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d94b      	bls.n	8006e40 <_svfiprintf_r+0x17c>
 8006da8:	b1b0      	cbz	r0, 8006dd8 <_svfiprintf_r+0x114>
 8006daa:	9207      	str	r2, [sp, #28]
 8006dac:	e014      	b.n	8006dd8 <_svfiprintf_r+0x114>
 8006dae:	eba0 0308 	sub.w	r3, r0, r8
 8006db2:	fa09 f303 	lsl.w	r3, r9, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	46a2      	mov	sl, r4
 8006dbc:	e7d2      	b.n	8006d64 <_svfiprintf_r+0xa0>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	9103      	str	r1, [sp, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfbb      	ittet	lt
 8006dca:	425b      	neglt	r3, r3
 8006dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd0:	9307      	strge	r3, [sp, #28]
 8006dd2:	9307      	strlt	r3, [sp, #28]
 8006dd4:	bfb8      	it	lt
 8006dd6:	9204      	strlt	r2, [sp, #16]
 8006dd8:	7823      	ldrb	r3, [r4, #0]
 8006dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ddc:	d10a      	bne.n	8006df4 <_svfiprintf_r+0x130>
 8006dde:	7863      	ldrb	r3, [r4, #1]
 8006de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de2:	d132      	bne.n	8006e4a <_svfiprintf_r+0x186>
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	9203      	str	r2, [sp, #12]
 8006dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006df0:	3402      	adds	r4, #2
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006eb8 <_svfiprintf_r+0x1f4>
 8006df8:	7821      	ldrb	r1, [r4, #0]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f7f9 f9ff 	bl	8000200 <memchr>
 8006e02:	b138      	cbz	r0, 8006e14 <_svfiprintf_r+0x150>
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	eba0 000a 	sub.w	r0, r0, sl
 8006e0a:	2240      	movs	r2, #64	@ 0x40
 8006e0c:	4082      	lsls	r2, r0
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	3401      	adds	r4, #1
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e18:	4824      	ldr	r0, [pc, #144]	@ (8006eac <_svfiprintf_r+0x1e8>)
 8006e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e1e:	2206      	movs	r2, #6
 8006e20:	f7f9 f9ee 	bl	8000200 <memchr>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d036      	beq.n	8006e96 <_svfiprintf_r+0x1d2>
 8006e28:	4b21      	ldr	r3, [pc, #132]	@ (8006eb0 <_svfiprintf_r+0x1ec>)
 8006e2a:	bb1b      	cbnz	r3, 8006e74 <_svfiprintf_r+0x1b0>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	3307      	adds	r3, #7
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	3308      	adds	r3, #8
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	4433      	add	r3, r6
 8006e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3e:	e76a      	b.n	8006d16 <_svfiprintf_r+0x52>
 8006e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e44:	460c      	mov	r4, r1
 8006e46:	2001      	movs	r0, #1
 8006e48:	e7a8      	b.n	8006d9c <_svfiprintf_r+0xd8>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	3401      	adds	r4, #1
 8006e4e:	9305      	str	r3, [sp, #20]
 8006e50:	4619      	mov	r1, r3
 8006e52:	f04f 0c0a 	mov.w	ip, #10
 8006e56:	4620      	mov	r0, r4
 8006e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e5c:	3a30      	subs	r2, #48	@ 0x30
 8006e5e:	2a09      	cmp	r2, #9
 8006e60:	d903      	bls.n	8006e6a <_svfiprintf_r+0x1a6>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c6      	beq.n	8006df4 <_svfiprintf_r+0x130>
 8006e66:	9105      	str	r1, [sp, #20]
 8006e68:	e7c4      	b.n	8006df4 <_svfiprintf_r+0x130>
 8006e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6e:	4604      	mov	r4, r0
 8006e70:	2301      	movs	r3, #1
 8006e72:	e7f0      	b.n	8006e56 <_svfiprintf_r+0x192>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <_svfiprintf_r+0x1f0>)
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f3af 8000 	nop.w
 8006e84:	1c42      	adds	r2, r0, #1
 8006e86:	4606      	mov	r6, r0
 8006e88:	d1d6      	bne.n	8006e38 <_svfiprintf_r+0x174>
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	065b      	lsls	r3, r3, #25
 8006e8e:	f53f af2d 	bmi.w	8006cec <_svfiprintf_r+0x28>
 8006e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e94:	e72c      	b.n	8006cf0 <_svfiprintf_r+0x2c>
 8006e96:	ab03      	add	r3, sp, #12
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <_svfiprintf_r+0x1f0>)
 8006e9e:	a904      	add	r1, sp, #16
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f000 f879 	bl	8006f98 <_printf_i>
 8006ea6:	e7ed      	b.n	8006e84 <_svfiprintf_r+0x1c0>
 8006ea8:	08008db8 	.word	0x08008db8
 8006eac:	08008dc2 	.word	0x08008dc2
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	08006c0d 	.word	0x08006c0d
 8006eb8:	08008dbe 	.word	0x08008dbe

08006ebc <_printf_common>:
 8006ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	4698      	mov	r8, r3
 8006ec4:	688a      	ldr	r2, [r1, #8]
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	bfb8      	it	lt
 8006ed0:	4613      	movlt	r3, r2
 8006ed2:	6033      	str	r3, [r6, #0]
 8006ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed8:	4607      	mov	r7, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	b10a      	cbz	r2, 8006ee2 <_printf_common+0x26>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	0699      	lsls	r1, r3, #26
 8006ee6:	bf42      	ittt	mi
 8006ee8:	6833      	ldrmi	r3, [r6, #0]
 8006eea:	3302      	addmi	r3, #2
 8006eec:	6033      	strmi	r3, [r6, #0]
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	f015 0506 	ands.w	r5, r5, #6
 8006ef4:	d106      	bne.n	8006f04 <_printf_common+0x48>
 8006ef6:	f104 0a19 	add.w	sl, r4, #25
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	6832      	ldr	r2, [r6, #0]
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	dc26      	bgt.n	8006f52 <_printf_common+0x96>
 8006f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	3b00      	subs	r3, #0
 8006f0c:	bf18      	it	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	0692      	lsls	r2, r2, #26
 8006f12:	d42b      	bmi.n	8006f6c <_printf_common+0xb0>
 8006f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f18:	4641      	mov	r1, r8
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c8      	blx	r9
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d01e      	beq.n	8006f60 <_printf_common+0xa4>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	6922      	ldr	r2, [r4, #16]
 8006f26:	f003 0306 	and.w	r3, r3, #6
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	bf02      	ittt	eq
 8006f2e:	68e5      	ldreq	r5, [r4, #12]
 8006f30:	6833      	ldreq	r3, [r6, #0]
 8006f32:	1aed      	subeq	r5, r5, r3
 8006f34:	68a3      	ldr	r3, [r4, #8]
 8006f36:	bf0c      	ite	eq
 8006f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f3c:	2500      	movne	r5, #0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	bfc4      	itt	gt
 8006f42:	1a9b      	subgt	r3, r3, r2
 8006f44:	18ed      	addgt	r5, r5, r3
 8006f46:	2600      	movs	r6, #0
 8006f48:	341a      	adds	r4, #26
 8006f4a:	42b5      	cmp	r5, r6
 8006f4c:	d11a      	bne.n	8006f84 <_printf_common+0xc8>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e008      	b.n	8006f64 <_printf_common+0xa8>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4652      	mov	r2, sl
 8006f56:	4641      	mov	r1, r8
 8006f58:	4638      	mov	r0, r7
 8006f5a:	47c8      	blx	r9
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d103      	bne.n	8006f68 <_printf_common+0xac>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f68:	3501      	adds	r5, #1
 8006f6a:	e7c6      	b.n	8006efa <_printf_common+0x3e>
 8006f6c:	18e1      	adds	r1, r4, r3
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	2030      	movs	r0, #48	@ 0x30
 8006f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f76:	4422      	add	r2, r4
 8006f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f80:	3302      	adds	r3, #2
 8006f82:	e7c7      	b.n	8006f14 <_printf_common+0x58>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4622      	mov	r2, r4
 8006f88:	4641      	mov	r1, r8
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c8      	blx	r9
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d0e6      	beq.n	8006f60 <_printf_common+0xa4>
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7d9      	b.n	8006f4a <_printf_common+0x8e>
	...

08006f98 <_printf_i>:
 8006f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	7e0f      	ldrb	r7, [r1, #24]
 8006f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fa0:	2f78      	cmp	r7, #120	@ 0x78
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	469a      	mov	sl, r3
 8006faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fae:	d807      	bhi.n	8006fc0 <_printf_i+0x28>
 8006fb0:	2f62      	cmp	r7, #98	@ 0x62
 8006fb2:	d80a      	bhi.n	8006fca <_printf_i+0x32>
 8006fb4:	2f00      	cmp	r7, #0
 8006fb6:	f000 80d2 	beq.w	800715e <_printf_i+0x1c6>
 8006fba:	2f58      	cmp	r7, #88	@ 0x58
 8006fbc:	f000 80b9 	beq.w	8007132 <_printf_i+0x19a>
 8006fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fc8:	e03a      	b.n	8007040 <_printf_i+0xa8>
 8006fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fce:	2b15      	cmp	r3, #21
 8006fd0:	d8f6      	bhi.n	8006fc0 <_printf_i+0x28>
 8006fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd8 <_printf_i+0x40>)
 8006fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd8:	08007031 	.word	0x08007031
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	08006fc1 	.word	0x08006fc1
 8006fe4:	08006fc1 	.word	0x08006fc1
 8006fe8:	08006fc1 	.word	0x08006fc1
 8006fec:	08006fc1 	.word	0x08006fc1
 8006ff0:	08007045 	.word	0x08007045
 8006ff4:	08006fc1 	.word	0x08006fc1
 8006ff8:	08006fc1 	.word	0x08006fc1
 8006ffc:	08006fc1 	.word	0x08006fc1
 8007000:	08006fc1 	.word	0x08006fc1
 8007004:	08007145 	.word	0x08007145
 8007008:	0800706f 	.word	0x0800706f
 800700c:	080070ff 	.word	0x080070ff
 8007010:	08006fc1 	.word	0x08006fc1
 8007014:	08006fc1 	.word	0x08006fc1
 8007018:	08007167 	.word	0x08007167
 800701c:	08006fc1 	.word	0x08006fc1
 8007020:	0800706f 	.word	0x0800706f
 8007024:	08006fc1 	.word	0x08006fc1
 8007028:	08006fc1 	.word	0x08006fc1
 800702c:	08007107 	.word	0x08007107
 8007030:	6833      	ldr	r3, [r6, #0]
 8007032:	1d1a      	adds	r2, r3, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6032      	str	r2, [r6, #0]
 8007038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800703c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007040:	2301      	movs	r3, #1
 8007042:	e09d      	b.n	8007180 <_printf_i+0x1e8>
 8007044:	6833      	ldr	r3, [r6, #0]
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	1d19      	adds	r1, r3, #4
 800704a:	6031      	str	r1, [r6, #0]
 800704c:	0606      	lsls	r6, r0, #24
 800704e:	d501      	bpl.n	8007054 <_printf_i+0xbc>
 8007050:	681d      	ldr	r5, [r3, #0]
 8007052:	e003      	b.n	800705c <_printf_i+0xc4>
 8007054:	0645      	lsls	r5, r0, #25
 8007056:	d5fb      	bpl.n	8007050 <_printf_i+0xb8>
 8007058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800705c:	2d00      	cmp	r5, #0
 800705e:	da03      	bge.n	8007068 <_printf_i+0xd0>
 8007060:	232d      	movs	r3, #45	@ 0x2d
 8007062:	426d      	negs	r5, r5
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007068:	4859      	ldr	r0, [pc, #356]	@ (80071d0 <_printf_i+0x238>)
 800706a:	230a      	movs	r3, #10
 800706c:	e011      	b.n	8007092 <_printf_i+0xfa>
 800706e:	6821      	ldr	r1, [r4, #0]
 8007070:	6833      	ldr	r3, [r6, #0]
 8007072:	0608      	lsls	r0, r1, #24
 8007074:	f853 5b04 	ldr.w	r5, [r3], #4
 8007078:	d402      	bmi.n	8007080 <_printf_i+0xe8>
 800707a:	0649      	lsls	r1, r1, #25
 800707c:	bf48      	it	mi
 800707e:	b2ad      	uxthmi	r5, r5
 8007080:	2f6f      	cmp	r7, #111	@ 0x6f
 8007082:	4853      	ldr	r0, [pc, #332]	@ (80071d0 <_printf_i+0x238>)
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	bf14      	ite	ne
 8007088:	230a      	movne	r3, #10
 800708a:	2308      	moveq	r3, #8
 800708c:	2100      	movs	r1, #0
 800708e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007092:	6866      	ldr	r6, [r4, #4]
 8007094:	60a6      	str	r6, [r4, #8]
 8007096:	2e00      	cmp	r6, #0
 8007098:	bfa2      	ittt	ge
 800709a:	6821      	ldrge	r1, [r4, #0]
 800709c:	f021 0104 	bicge.w	r1, r1, #4
 80070a0:	6021      	strge	r1, [r4, #0]
 80070a2:	b90d      	cbnz	r5, 80070a8 <_printf_i+0x110>
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	d04b      	beq.n	8007140 <_printf_i+0x1a8>
 80070a8:	4616      	mov	r6, r2
 80070aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ae:	fb03 5711 	mls	r7, r3, r1, r5
 80070b2:	5dc7      	ldrb	r7, [r0, r7]
 80070b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070b8:	462f      	mov	r7, r5
 80070ba:	42bb      	cmp	r3, r7
 80070bc:	460d      	mov	r5, r1
 80070be:	d9f4      	bls.n	80070aa <_printf_i+0x112>
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d10b      	bne.n	80070dc <_printf_i+0x144>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07df      	lsls	r7, r3, #31
 80070c8:	d508      	bpl.n	80070dc <_printf_i+0x144>
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	6861      	ldr	r1, [r4, #4]
 80070ce:	4299      	cmp	r1, r3
 80070d0:	bfde      	ittt	le
 80070d2:	2330      	movle	r3, #48	@ 0x30
 80070d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070dc:	1b92      	subs	r2, r2, r6
 80070de:	6122      	str	r2, [r4, #16]
 80070e0:	f8cd a000 	str.w	sl, [sp]
 80070e4:	464b      	mov	r3, r9
 80070e6:	aa03      	add	r2, sp, #12
 80070e8:	4621      	mov	r1, r4
 80070ea:	4640      	mov	r0, r8
 80070ec:	f7ff fee6 	bl	8006ebc <_printf_common>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d14a      	bne.n	800718a <_printf_i+0x1f2>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	b004      	add	sp, #16
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f043 0320 	orr.w	r3, r3, #32
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	4833      	ldr	r0, [pc, #204]	@ (80071d4 <_printf_i+0x23c>)
 8007108:	2778      	movs	r7, #120	@ 0x78
 800710a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6831      	ldr	r1, [r6, #0]
 8007112:	061f      	lsls	r7, r3, #24
 8007114:	f851 5b04 	ldr.w	r5, [r1], #4
 8007118:	d402      	bmi.n	8007120 <_printf_i+0x188>
 800711a:	065f      	lsls	r7, r3, #25
 800711c:	bf48      	it	mi
 800711e:	b2ad      	uxthmi	r5, r5
 8007120:	6031      	str	r1, [r6, #0]
 8007122:	07d9      	lsls	r1, r3, #31
 8007124:	bf44      	itt	mi
 8007126:	f043 0320 	orrmi.w	r3, r3, #32
 800712a:	6023      	strmi	r3, [r4, #0]
 800712c:	b11d      	cbz	r5, 8007136 <_printf_i+0x19e>
 800712e:	2310      	movs	r3, #16
 8007130:	e7ac      	b.n	800708c <_printf_i+0xf4>
 8007132:	4827      	ldr	r0, [pc, #156]	@ (80071d0 <_printf_i+0x238>)
 8007134:	e7e9      	b.n	800710a <_printf_i+0x172>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f023 0320 	bic.w	r3, r3, #32
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	e7f6      	b.n	800712e <_printf_i+0x196>
 8007140:	4616      	mov	r6, r2
 8007142:	e7bd      	b.n	80070c0 <_printf_i+0x128>
 8007144:	6833      	ldr	r3, [r6, #0]
 8007146:	6825      	ldr	r5, [r4, #0]
 8007148:	6961      	ldr	r1, [r4, #20]
 800714a:	1d18      	adds	r0, r3, #4
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	062e      	lsls	r6, r5, #24
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	d501      	bpl.n	8007158 <_printf_i+0x1c0>
 8007154:	6019      	str	r1, [r3, #0]
 8007156:	e002      	b.n	800715e <_printf_i+0x1c6>
 8007158:	0668      	lsls	r0, r5, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0x1bc>
 800715c:	8019      	strh	r1, [r3, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	4616      	mov	r6, r2
 8007164:	e7bc      	b.n	80070e0 <_printf_i+0x148>
 8007166:	6833      	ldr	r3, [r6, #0]
 8007168:	1d1a      	adds	r2, r3, #4
 800716a:	6032      	str	r2, [r6, #0]
 800716c:	681e      	ldr	r6, [r3, #0]
 800716e:	6862      	ldr	r2, [r4, #4]
 8007170:	2100      	movs	r1, #0
 8007172:	4630      	mov	r0, r6
 8007174:	f7f9 f844 	bl	8000200 <memchr>
 8007178:	b108      	cbz	r0, 800717e <_printf_i+0x1e6>
 800717a:	1b80      	subs	r0, r0, r6
 800717c:	6060      	str	r0, [r4, #4]
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	2300      	movs	r3, #0
 8007184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007188:	e7aa      	b.n	80070e0 <_printf_i+0x148>
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d0ad      	beq.n	80070f4 <_printf_i+0x15c>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	079b      	lsls	r3, r3, #30
 800719c:	d413      	bmi.n	80071c6 <_printf_i+0x22e>
 800719e:	68e0      	ldr	r0, [r4, #12]
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	4298      	cmp	r0, r3
 80071a4:	bfb8      	it	lt
 80071a6:	4618      	movlt	r0, r3
 80071a8:	e7a6      	b.n	80070f8 <_printf_i+0x160>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4632      	mov	r2, r6
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d09d      	beq.n	80070f4 <_printf_i+0x15c>
 80071b8:	3501      	adds	r5, #1
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	9903      	ldr	r1, [sp, #12]
 80071be:	1a5b      	subs	r3, r3, r1
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dcf2      	bgt.n	80071aa <_printf_i+0x212>
 80071c4:	e7eb      	b.n	800719e <_printf_i+0x206>
 80071c6:	2500      	movs	r5, #0
 80071c8:	f104 0619 	add.w	r6, r4, #25
 80071cc:	e7f5      	b.n	80071ba <_printf_i+0x222>
 80071ce:	bf00      	nop
 80071d0:	08008dc9 	.word	0x08008dc9
 80071d4:	08008dda 	.word	0x08008dda

080071d8 <memmove>:
 80071d8:	4288      	cmp	r0, r1
 80071da:	b510      	push	{r4, lr}
 80071dc:	eb01 0402 	add.w	r4, r1, r2
 80071e0:	d902      	bls.n	80071e8 <memmove+0x10>
 80071e2:	4284      	cmp	r4, r0
 80071e4:	4623      	mov	r3, r4
 80071e6:	d807      	bhi.n	80071f8 <memmove+0x20>
 80071e8:	1e43      	subs	r3, r0, #1
 80071ea:	42a1      	cmp	r1, r4
 80071ec:	d008      	beq.n	8007200 <memmove+0x28>
 80071ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071f6:	e7f8      	b.n	80071ea <memmove+0x12>
 80071f8:	4402      	add	r2, r0
 80071fa:	4601      	mov	r1, r0
 80071fc:	428a      	cmp	r2, r1
 80071fe:	d100      	bne.n	8007202 <memmove+0x2a>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800720a:	e7f7      	b.n	80071fc <memmove+0x24>

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	@ (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fb fd9e 	bl	8002d58 <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20025de8 	.word	0x20025de8

0800722c <memcpy>:
 800722c:	440a      	add	r2, r1
 800722e:	4291      	cmp	r1, r2
 8007230:	f100 33ff 	add.w	r3, r0, #4294967295
 8007234:	d100      	bne.n	8007238 <memcpy+0xc>
 8007236:	4770      	bx	lr
 8007238:	b510      	push	{r4, lr}
 800723a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007242:	4291      	cmp	r1, r2
 8007244:	d1f9      	bne.n	800723a <memcpy+0xe>
 8007246:	bd10      	pop	{r4, pc}

08007248 <_realloc_r>:
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	4680      	mov	r8, r0
 800724e:	4615      	mov	r5, r2
 8007250:	460c      	mov	r4, r1
 8007252:	b921      	cbnz	r1, 800725e <_realloc_r+0x16>
 8007254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	4611      	mov	r1, r2
 800725a:	f7ff bc4b 	b.w	8006af4 <_malloc_r>
 800725e:	b92a      	cbnz	r2, 800726c <_realloc_r+0x24>
 8007260:	f7ff fbdc 	bl	8006a1c <_free_r>
 8007264:	2400      	movs	r4, #0
 8007266:	4620      	mov	r0, r4
 8007268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800726c:	f000 f81a 	bl	80072a4 <_malloc_usable_size_r>
 8007270:	4285      	cmp	r5, r0
 8007272:	4606      	mov	r6, r0
 8007274:	d802      	bhi.n	800727c <_realloc_r+0x34>
 8007276:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800727a:	d8f4      	bhi.n	8007266 <_realloc_r+0x1e>
 800727c:	4629      	mov	r1, r5
 800727e:	4640      	mov	r0, r8
 8007280:	f7ff fc38 	bl	8006af4 <_malloc_r>
 8007284:	4607      	mov	r7, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d0ec      	beq.n	8007264 <_realloc_r+0x1c>
 800728a:	42b5      	cmp	r5, r6
 800728c:	462a      	mov	r2, r5
 800728e:	4621      	mov	r1, r4
 8007290:	bf28      	it	cs
 8007292:	4632      	movcs	r2, r6
 8007294:	f7ff ffca 	bl	800722c <memcpy>
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fbbe 	bl	8006a1c <_free_r>
 80072a0:	463c      	mov	r4, r7
 80072a2:	e7e0      	b.n	8007266 <_realloc_r+0x1e>

080072a4 <_malloc_usable_size_r>:
 80072a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a8:	1f18      	subs	r0, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfbc      	itt	lt
 80072ae:	580b      	ldrlt	r3, [r1, r0]
 80072b0:	18c0      	addlt	r0, r0, r3
 80072b2:	4770      	bx	lr

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
