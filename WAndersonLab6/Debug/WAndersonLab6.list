
WAndersonLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000717c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b20  0800732c  0800732c  0000832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e4c  08008e4c  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008e4c  08008e4c  00009e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e54  08008e54  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e54  08008e54  00009e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008e5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025ce8  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d60  20025d60  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e4c  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a0  00000000  00000000  0001def4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00021098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6b  00000000  00000000  00022498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002715f  00000000  00000000  00023403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ba2  00000000  00000000  0004a562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c7b  00000000  00000000  00063104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145d7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a0  00000000  00000000  00145dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007314 	.word	0x08007314

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007314 	.word	0x08007314

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f002 fc08 	bl	8002da8 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 f91a 	bl	80007d0 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f8d7 	bl	8000750 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fa08 	bl	80009bc <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f000 fd0a 	bl	8000fc4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b02      	ldr	r3, [pc, #8]	@ (80005bc <ApplicationInit+0x2c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000094 	.word	0x20000094

080005c0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	4a59      	ldr	r2, [pc, #356]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d6:	4b57      	ldr	r3, [pc, #348]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	4b53      	ldr	r3, [pc, #332]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a52      	ldr	r2, [pc, #328]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b50      	ldr	r3, [pc, #320]	@ (8000734 <LCD_GPIO_Init+0x174>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b4c      	ldr	r3, [pc, #304]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a4b      	ldr	r2, [pc, #300]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b45      	ldr	r3, [pc, #276]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b42      	ldr	r3, [pc, #264]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a36      	ldr	r2, [pc, #216]	@ (8000734 <LCD_GPIO_Init+0x174>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <LCD_GPIO_Init+0x174>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800068a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800068e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000698:	2302      	movs	r3, #2
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800069c:	230e      	movs	r3, #14
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4824      	ldr	r0, [pc, #144]	@ (8000738 <LCD_GPIO_Init+0x178>)
 80006a8:	f002 fda0 	bl	80031ec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006b0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4820      	ldr	r0, [pc, #128]	@ (800073c <LCD_GPIO_Init+0x17c>)
 80006ba:	f002 fd97 	bl	80031ec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481d      	ldr	r0, [pc, #116]	@ (8000740 <LCD_GPIO_Init+0x180>)
 80006cc:	f002 fd8e 	bl	80031ec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006d0:	2348      	movs	r3, #72	@ 0x48
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <LCD_GPIO_Init+0x184>)
 80006dc:	f002 fd86 	bl	80031ec <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4816      	ldr	r0, [pc, #88]	@ (8000748 <LCD_GPIO_Init+0x188>)
 80006ee:	f002 fd7d 	bl	80031ec <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006f2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006f6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4813      	ldr	r0, [pc, #76]	@ (800074c <LCD_GPIO_Init+0x18c>)
 8000700:	f002 fd74 	bl	80031ec <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000704:	2303      	movs	r3, #3
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000708:	2309      	movs	r3, #9
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	480a      	ldr	r0, [pc, #40]	@ (800073c <LCD_GPIO_Init+0x17c>)
 8000714:	f002 fd6a 	bl	80031ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <LCD_GPIO_Init+0x18c>)
 8000726:	f002 fd61 	bl	80031ec <HAL_GPIO_Init>
}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021400 	.word	0x40021400
 800074c:	40021800 	.word	0x40021800

08000750 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	@ 0x40
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800075e:	23f0      	movs	r3, #240	@ 0xf0
 8000760:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000766:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800076a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000770:	23ff      	movs	r3, #255	@ 0xff
 8000772:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800077e:	2305      	movs	r3, #5
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <LTCD_Layer_Init+0x78>)
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800078c:	23f0      	movs	r3, #240	@ 0xf0
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000790:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <LTCD_Layer_Init+0x7c>)
 80007b2:	f004 f975 	bl	8004aa0 <HAL_LTDC_ConfigLayer>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007bc:	f000 fbfc 	bl	8000fb8 <LCD_Error_Handler>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3740      	adds	r7, #64	@ 0x40
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000178 	.word	0x20000178
 80007cc:	2000009c 	.word	0x2000009c

080007d0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <LTCD__Init+0xb0>)
 80007d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000884 <LTCD__Init+0xb4>)
 80007d8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <LTCD__Init+0xb0>)
 80007dc:	2209      	movs	r2, #9
 80007de:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <LTCD__Init+0xb0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <LTCD__Init+0xb0>)
 80007e8:	221d      	movs	r2, #29
 80007ea:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <LTCD__Init+0xb0>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <LTCD__Init+0xb0>)
 80007f4:	f240 120d 	movw	r2, #269	@ 0x10d
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <LTCD__Init+0xb0>)
 80007fc:	f240 1243 	movw	r2, #323	@ 0x143
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <LTCD__Init+0xb0>)
 8000804:	f240 1217 	movw	r2, #279	@ 0x117
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <LTCD__Init+0xb0>)
 800080c:	f240 1247 	movw	r2, #327	@ 0x147
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <LTCD__Init+0xb0>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <LTCD__Init+0xb0>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <LTCD__Init+0xb0>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <LTCD__Init+0xb8>)
 800082c:	2208      	movs	r2, #8
 800082e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <LTCD__Init+0xb8>)
 8000832:	22c0      	movs	r2, #192	@ 0xc0
 8000834:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <LTCD__Init+0xb8>)
 8000838:	2204      	movs	r2, #4
 800083a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <LTCD__Init+0xb8>)
 800083e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <LTCD__Init+0xb8>)
 8000846:	f004 ff85 	bl	8005754 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <LTCD__Init+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <LTCD__Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <LTCD__Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <LTCD__Init+0xb0>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000862:	f7ff fead 	bl	80005c0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <LTCD__Init+0xb0>)
 8000868:	f004 f84a 	bl	8004900 <HAL_LTDC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000872:	f000 fba1 	bl	8000fb8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000876:	f000 fcc0 	bl	80011fa <ili9341_Init>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000009c 	.word	0x2000009c
 8000884:	40016800 	.word	0x40016800
 8000888:	20000144 	.word	0x20000144

0800088c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	460b      	mov	r3, r1
 8000898:	80bb      	strh	r3, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800089e:	88ba      	ldrh	r2, [r7, #4]
 80008a0:	4613      	mov	r3, r2
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	461a      	mov	r2, r3
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	4413      	add	r3, r2
 80008ae:	4905      	ldr	r1, [pc, #20]	@ (80008c4 <LCD_Draw_Pixel+0x38>)
 80008b0:	887a      	ldrh	r2, [r7, #2]
 80008b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000178 	.word	0x20000178

080008c8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	80fb      	strh	r3, [r7, #6]
 80008da:	4603      	mov	r3, r0
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	425b      	negs	r3, r3
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	81fb      	strh	r3, [r7, #14]
 80008ee:	e034      	b.n	800095a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	425b      	negs	r3, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	81bb      	strh	r3, [r7, #12]
 80008f8:	e024      	b.n	8000944 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80008fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000902:	fb03 f202 	mul.w	r2, r3, r2
 8000906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800090a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800090e:	fb01 f303 	mul.w	r3, r1, r3
 8000912:	441a      	add	r2, r3
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	8879      	ldrh	r1, [r7, #2]
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	429a      	cmp	r2, r3
 800091e:	dc0b      	bgt.n	8000938 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000920:	89ba      	ldrh	r2, [r7, #12]
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	89fa      	ldrh	r2, [r7, #14]
 800092a:	88bb      	ldrh	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	b29b      	uxth	r3, r3
 8000930:	883a      	ldrh	r2, [r7, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	f7ff ffaa 	bl	800088c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800093c:	b29b      	uxth	r3, r3
 800093e:	3301      	adds	r3, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	81bb      	strh	r3, [r7, #12]
 8000944:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	429a      	cmp	r2, r3
 800094c:	ddd5      	ble.n	80008fa <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	b29b      	uxth	r3, r3
 8000954:	3301      	adds	r3, #1
 8000956:	b29b      	uxth	r3, r3
 8000958:	81fb      	strh	r3, [r7, #14]
 800095a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	429a      	cmp	r2, r3
 8000962:	ddc5      	ble.n	80008f0 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	e00b      	b.n	80009aa <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	88bb      	ldrh	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	b299      	uxth	r1, r3
 800099a:	883a      	ldrh	r2, [r7, #0]
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff74 	bl	800088c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	3301      	adds	r3, #1
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3ef      	bcc.n	8000992 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}

080009bc <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10e      	bne.n	80009f0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e007      	b.n	80009e8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009d8:	4908      	ldr	r1, [pc, #32]	@ (80009fc <LCD_Clear+0x40>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	88ba      	ldrh	r2, [r7, #4]
 80009de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009ee:	d3f3      	bcc.n	80009d8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000178 	.word	0x20000178

08000a00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <LCD_SetTextColor+0x1c>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	8013      	strh	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000000 	.word	0x20000000

08000a20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <LCD_SetFont+0x1c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000174 	.word	0x20000174

08000a40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e04c      	b.n	8000af8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e03f      	b.n	8000ae4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <LCD_Draw_Char+0xd4>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	409a      	lsls	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	fa42 f303 	asr.w	r3, r2, r3
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <LCD_Draw_Char+0x5c>
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	889b      	ldrh	r3, [r3, #4]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d920      	bls.n	8000ade <LCD_Draw_Char+0x9e>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <LCD_Draw_Char+0x80>
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	d80e      	bhi.n	8000ade <LCD_Draw_Char+0x9e>
      {
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <LCD_Draw_Char+0xd8>)
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff fed7 	bl	800088c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d3b8      	bcc.n	8000a64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	88db      	ldrh	r3, [r3, #6]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d3ab      	bcc.n	8000a5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000174 	.word	0x20000174
 8000b14:	aaaaaaab 	.word	0xaaaaaaab
 8000b18:	20000000 	.word	0x20000000

08000b1c <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	3b20      	subs	r3, #32
 8000b32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b3e:	6809      	ldr	r1, [r1, #0]
 8000b40:	88c9      	ldrh	r1, [r1, #6]
 8000b42:	fb01 f303 	mul.w	r3, r1, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	441a      	add	r2, r3
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff76 	bl	8000a40 <LCD_Draw_Char>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000174 	.word	0x20000174

08000b60 <LCD_DrawMenuScreen>:

void LCD_DrawMenuScreen(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    LCD_Clear(0, COLOR_BG);
 8000b64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff ff27 	bl	80009bc <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff46 	bl	8000a00 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000b74:	482d      	ldr	r0, [pc, #180]	@ (8000c2c <LCD_DrawMenuScreen+0xcc>)
 8000b76:	f7ff ff53 	bl	8000a20 <LCD_SetFont>
    LCD_DisplayChar(50, 40, '1');
 8000b7a:	2231      	movs	r2, #49	@ 0x31
 8000b7c:	2128      	movs	r1, #40	@ 0x28
 8000b7e:	2032      	movs	r0, #50	@ 0x32
 8000b80:	f7ff ffcc 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 60, '-');
 8000b84:	222d      	movs	r2, #45	@ 0x2d
 8000b86:	213c      	movs	r1, #60	@ 0x3c
 8000b88:	2032      	movs	r0, #50	@ 0x32
 8000b8a:	f7ff ffc7 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 80, 'P');
 8000b8e:	2250      	movs	r2, #80	@ 0x50
 8000b90:	2150      	movs	r1, #80	@ 0x50
 8000b92:	2032      	movs	r0, #50	@ 0x32
 8000b94:	f7ff ffc2 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 100, 'L');
 8000b98:	224c      	movs	r2, #76	@ 0x4c
 8000b9a:	2164      	movs	r1, #100	@ 0x64
 8000b9c:	2032      	movs	r0, #50	@ 0x32
 8000b9e:	f7ff ffbd 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 120, 'A');
 8000ba2:	2241      	movs	r2, #65	@ 0x41
 8000ba4:	2178      	movs	r1, #120	@ 0x78
 8000ba6:	2032      	movs	r0, #50	@ 0x32
 8000ba8:	f7ff ffb8 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 140, 'Y');
 8000bac:	2259      	movs	r2, #89	@ 0x59
 8000bae:	218c      	movs	r1, #140	@ 0x8c
 8000bb0:	2032      	movs	r0, #50	@ 0x32
 8000bb2:	f7ff ffb3 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 160, 'E');
 8000bb6:	2245      	movs	r2, #69	@ 0x45
 8000bb8:	21a0      	movs	r1, #160	@ 0xa0
 8000bba:	2032      	movs	r0, #50	@ 0x32
 8000bbc:	f7ff ffae 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 180, 'R');
 8000bc0:	2252      	movs	r2, #82	@ 0x52
 8000bc2:	21b4      	movs	r1, #180	@ 0xb4
 8000bc4:	2032      	movs	r0, #50	@ 0x32
 8000bc6:	f7ff ffa9 	bl	8000b1c <LCD_DisplayChar>

    LCD_DisplayChar(170, 40, '2');
 8000bca:	2232      	movs	r2, #50	@ 0x32
 8000bcc:	2128      	movs	r1, #40	@ 0x28
 8000bce:	20aa      	movs	r0, #170	@ 0xaa
 8000bd0:	f7ff ffa4 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 60, '-');
 8000bd4:	222d      	movs	r2, #45	@ 0x2d
 8000bd6:	213c      	movs	r1, #60	@ 0x3c
 8000bd8:	20aa      	movs	r0, #170	@ 0xaa
 8000bda:	f7ff ff9f 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 80, 'P');
 8000bde:	2250      	movs	r2, #80	@ 0x50
 8000be0:	2150      	movs	r1, #80	@ 0x50
 8000be2:	20aa      	movs	r0, #170	@ 0xaa
 8000be4:	f7ff ff9a 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 100, 'L');
 8000be8:	224c      	movs	r2, #76	@ 0x4c
 8000bea:	2164      	movs	r1, #100	@ 0x64
 8000bec:	20aa      	movs	r0, #170	@ 0xaa
 8000bee:	f7ff ff95 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 120, 'A');
 8000bf2:	2241      	movs	r2, #65	@ 0x41
 8000bf4:	2178      	movs	r1, #120	@ 0x78
 8000bf6:	20aa      	movs	r0, #170	@ 0xaa
 8000bf8:	f7ff ff90 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 140, 'Y');
 8000bfc:	2259      	movs	r2, #89	@ 0x59
 8000bfe:	218c      	movs	r1, #140	@ 0x8c
 8000c00:	20aa      	movs	r0, #170	@ 0xaa
 8000c02:	f7ff ff8b 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 160, 'E');
 8000c06:	2245      	movs	r2, #69	@ 0x45
 8000c08:	21a0      	movs	r1, #160	@ 0xa0
 8000c0a:	20aa      	movs	r0, #170	@ 0xaa
 8000c0c:	f7ff ff86 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 180, 'R');
 8000c10:	2252      	movs	r2, #82	@ 0x52
 8000c12:	21b4      	movs	r1, #180	@ 0xb4
 8000c14:	20aa      	movs	r0, #170	@ 0xaa
 8000c16:	f7ff ff81 	bl	8000b1c <LCD_DisplayChar>

    LCD_Draw_Vertical_Line(120, 40, 240, LCD_COLOR_BLACK);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	22f0      	movs	r2, #240	@ 0xf0
 8000c1e:	2128      	movs	r1, #40	@ 0x28
 8000c20:	2078      	movs	r0, #120	@ 0x78
 8000c22:	f7ff fea4 	bl	800096e <LCD_Draw_Vertical_Line>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000004 	.word	0x20000004

08000c30 <LCD_DrawGameBoard>:

void LCD_DrawGameBoard(uint8_t board[6][7]) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 8000c38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff febd 	bl	80009bc <LCD_Clear>

    for (uint8_t row = 0; row < BOARD_ROWS; row++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e041      	b.n	8000ccc <LCD_DrawGameBoard+0x9c>
        for (uint8_t col = 0; col < BOARD_COLS; col++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73bb      	strb	r3, [r7, #14]
 8000c4c:	e038      	b.n	8000cc0 <LCD_DrawGameBoard+0x90>
            uint16_t x = BOARD_X_START + col * (2 * CELL_RADIUS + CELL_SPACING);
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	015b      	lsls	r3, r3, #5
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3314      	adds	r3, #20
 8000c58:	817b      	strh	r3, [r7, #10]
            uint16_t y = BOARD_Y_START + row * (2 * CELL_RADIUS + CELL_SPACING);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	333c      	adds	r3, #60	@ 0x3c
 8000c64:	813b      	strh	r3, [r7, #8]
            uint16_t color = COLOR_BG;
 8000c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c6a:	81bb      	strh	r3, [r7, #12]

            if (board[row][col] == 1) color = COLOR_PLAYER1;
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	441a      	add	r2, r3
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d103      	bne.n	8000c88 <LCD_DrawGameBoard+0x58>
 8000c80:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	e00c      	b.n	8000ca2 <LCD_DrawGameBoard+0x72>
            else if (board[row][col] == 2) color = COLOR_PLAYER2;
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	441a      	add	r2, r3
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d102      	bne.n	8000ca2 <LCD_DrawGameBoard+0x72>
 8000c9c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ca0:	81bb      	strh	r3, [r7, #12]

            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, COLOR_GRID);
 8000ca2:	8939      	ldrh	r1, [r7, #8]
 8000ca4:	8978      	ldrh	r0, [r7, #10]
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	220e      	movs	r2, #14
 8000caa:	f7ff fe0d 	bl	80008c8 <LCD_Draw_Circle_Fill>
            LCD_Draw_Circle_Fill(x, y, CELL_RADIUS - 3, color);
 8000cae:	89bb      	ldrh	r3, [r7, #12]
 8000cb0:	8939      	ldrh	r1, [r7, #8]
 8000cb2:	8978      	ldrh	r0, [r7, #10]
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	f7ff fe07 	bl	80008c8 <LCD_Draw_Circle_Fill>
        for (uint8_t col = 0; col < BOARD_COLS; col++) {
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73bb      	strb	r3, [r7, #14]
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d9c3      	bls.n	8000c4e <LCD_DrawGameBoard+0x1e>
    for (uint8_t row = 0; row < BOARD_ROWS; row++) {
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d9ba      	bls.n	8000c48 <LCD_DrawGameBoard+0x18>
        }
    }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <LCD_ClearFloatingBand>:

void LCD_ClearFloatingBand(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	e012      	b.n	8000d0e <LCD_ClearFloatingBand+0x32>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	80bb      	strh	r3, [r7, #4]
 8000cec:	e009      	b.n	8000d02 <LCD_ClearFloatingBand+0x26>
        LCD_Draw_Pixel(x, y, COLOR_BG);
 8000cee:	88f9      	ldrh	r1, [r7, #6]
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fdc8 	bl	800088c <LCD_Draw_Pixel>
      for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	80bb      	strh	r3, [r7, #4]
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	2bef      	cmp	r3, #239	@ 0xef
 8000d06:	d9f2      	bls.n	8000cee <LCD_ClearFloatingBand+0x12>
    for (uint16_t y = FLOATING_COIN_Y0; y < FLOATING_COIN_H; y++) {
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	80fb      	strh	r3, [r7, #6]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d12:	d9e9      	bls.n	8000ce8 <LCD_ClearFloatingBand+0xc>
      }
    }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <draw_elapsed_time>:

void draw_elapsed_time(uint8_t t) {
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    sprintf(buf, "%lu", t);
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4930      	ldr	r1, [pc, #192]	@ (8000df4 <draw_elapsed_time+0xd4>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fe4e 	bl	80069d4 <siprintf>

    uint16_t text_w = strlen(buf) * 8;
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa57 	bl	80001f0 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	837b      	strh	r3, [r7, #26]
    uint16_t text_h = 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	833b      	strh	r3, [r7, #24]
    uint16_t x0 = (LCD_PIXEL_WIDTH - text_w) / 2;
 8000d4e:	8b7b      	ldrh	r3, [r7, #26]
 8000d50:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000d54:	0fda      	lsrs	r2, r3, #31
 8000d56:	4413      	add	r3, r2
 8000d58:	105b      	asrs	r3, r3, #1
 8000d5a:	82fb      	strh	r3, [r7, #22]
    uint16_t y0 = LCD_PIXEL_HEIGHT - text_h - 2;
 8000d5c:	8b3b      	ldrh	r3, [r7, #24]
 8000d5e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8000d62:	82bb      	strh	r3, [r7, #20]

    for (uint16_t i = 0; i < strlen(buf); i++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	83fb      	strh	r3, [r7, #30]
 8000d68:	e013      	b.n	8000d92 <draw_elapsed_time+0x72>
        LCD_Draw_Circle_Fill(x0 + i * 12, y0 + 4, 10, COLOR_BG);
 8000d6a:	8bfb      	ldrh	r3, [r7, #30]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	0052      	lsls	r2, r2, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	8afb      	ldrh	r3, [r7, #22]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b298      	uxth	r0, r3
 8000d7c:	8abb      	ldrh	r3, [r7, #20]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	b299      	uxth	r1, r3
 8000d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d86:	220a      	movs	r2, #10
 8000d88:	f7ff fd9e 	bl	80008c8 <LCD_Draw_Circle_Fill>
    for (uint16_t i = 0; i < strlen(buf); i++) {
 8000d8c:	8bfb      	ldrh	r3, [r7, #30]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	83fb      	strh	r3, [r7, #30]
 8000d92:	8bfc      	ldrh	r4, [r7, #30]
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa29 	bl	80001f0 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	429c      	cmp	r4, r3
 8000da2:	d3e2      	bcc.n	8000d6a <draw_elapsed_time+0x4a>
    }

    // Draw new text
    LCD_SetFont(&Font12x12);
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <draw_elapsed_time+0xd8>)
 8000da6:	f7ff fe3b 	bl	8000a20 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fe28 	bl	8000a00 <LCD_SetTextColor>
    for (uint16_t i = 0; buf[i]; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	83bb      	strh	r3, [r7, #28]
 8000db4:	e011      	b.n	8000dda <draw_elapsed_time+0xba>
        LCD_DisplayChar(x0 + i * 8, y0, buf[i]);
 8000db6:	8bbb      	ldrh	r3, [r7, #28]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	8bbb      	ldrh	r3, [r7, #28]
 8000dc4:	3320      	adds	r3, #32
 8000dc6:	443b      	add	r3, r7
 8000dc8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000dcc:	8abb      	ldrh	r3, [r7, #20]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff fea4 	bl	8000b1c <LCD_DisplayChar>
    for (uint16_t i = 0; buf[i]; i++) {
 8000dd4:	8bbb      	ldrh	r3, [r7, #28]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	83bb      	strh	r3, [r7, #28]
 8000dda:	8bbb      	ldrh	r3, [r7, #28]
 8000ddc:	3320      	adds	r3, #32
 8000dde:	443b      	add	r3, r7
 8000de0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e6      	bne.n	8000db6 <draw_elapsed_time+0x96>
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800732c 	.word	0x0800732c
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <LCD_DrawGameOverScreen>:

void LCD_DrawGameOverScreen(uint8_t winner, uint8_t redWins, uint8_t yellowWins, uint8_t elapsedTime) {
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71bb      	strb	r3, [r7, #6]
 8000e12:	460b      	mov	r3, r1
 8000e14:	717b      	strb	r3, [r7, #5]
 8000e16:	4613      	mov	r3, r2
 8000e18:	713b      	strb	r3, [r7, #4]
    LCD_Clear(0, COLOR_BG);
 8000e1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fdcc 	bl	80009bc <LCD_Clear>
    LCD_SetFont(&Font16x24);
 8000e24:	4856      	ldr	r0, [pc, #344]	@ (8000f80 <LCD_DrawGameOverScreen+0x184>)
 8000e26:	f7ff fdfb 	bl	8000a20 <LCD_SetFont>

    if (winner == 1) {
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d12c      	bne.n	8000e8a <LCD_DrawGameOverScreen+0x8e>
        LCD_SetTextColor(LCD_COLOR_RED);
 8000e30:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000e34:	f7ff fde4 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(40, 100, 'R');
 8000e38:	2252      	movs	r2, #82	@ 0x52
 8000e3a:	2164      	movs	r1, #100	@ 0x64
 8000e3c:	2028      	movs	r0, #40	@ 0x28
 8000e3e:	f7ff fe6d 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'E');
 8000e42:	2245      	movs	r2, #69	@ 0x45
 8000e44:	2164      	movs	r1, #100	@ 0x64
 8000e46:	203c      	movs	r0, #60	@ 0x3c
 8000e48:	f7ff fe68 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'D');
 8000e4c:	2244      	movs	r2, #68	@ 0x44
 8000e4e:	2164      	movs	r1, #100	@ 0x64
 8000e50:	2050      	movs	r0, #80	@ 0x50
 8000e52:	f7ff fe63 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, ' ');
 8000e56:	2220      	movs	r2, #32
 8000e58:	2164      	movs	r1, #100	@ 0x64
 8000e5a:	2064      	movs	r0, #100	@ 0x64
 8000e5c:	f7ff fe5e 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 8000e60:	2257      	movs	r2, #87	@ 0x57
 8000e62:	2164      	movs	r1, #100	@ 0x64
 8000e64:	2078      	movs	r0, #120	@ 0x78
 8000e66:	f7ff fe59 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'I');
 8000e6a:	2249      	movs	r2, #73	@ 0x49
 8000e6c:	2164      	movs	r1, #100	@ 0x64
 8000e6e:	208c      	movs	r0, #140	@ 0x8c
 8000e70:	f7ff fe54 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'N');
 8000e74:	224e      	movs	r2, #78	@ 0x4e
 8000e76:	2164      	movs	r1, #100	@ 0x64
 8000e78:	20a0      	movs	r0, #160	@ 0xa0
 8000e7a:	f7ff fe4f 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'S');
 8000e7e:	2253      	movs	r2, #83	@ 0x53
 8000e80:	2164      	movs	r1, #100	@ 0x64
 8000e82:	20b4      	movs	r0, #180	@ 0xb4
 8000e84:	f7ff fe4a 	bl	8000b1c <LCD_DisplayChar>
 8000e88:	e050      	b.n	8000f2c <LCD_DrawGameOverScreen+0x130>
    }
    else if (winner == 2) {
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d13b      	bne.n	8000f08 <LCD_DrawGameOverScreen+0x10c>
        LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000e90:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000e94:	f7ff fdb4 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(20, 100, 'Y');
 8000e98:	2259      	movs	r2, #89	@ 0x59
 8000e9a:	2164      	movs	r1, #100	@ 0x64
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f7ff fe3d 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(40, 100, 'E');
 8000ea2:	2245      	movs	r2, #69	@ 0x45
 8000ea4:	2164      	movs	r1, #100	@ 0x64
 8000ea6:	2028      	movs	r0, #40	@ 0x28
 8000ea8:	f7ff fe38 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(60, 100, 'L');
 8000eac:	224c      	movs	r2, #76	@ 0x4c
 8000eae:	2164      	movs	r1, #100	@ 0x64
 8000eb0:	203c      	movs	r0, #60	@ 0x3c
 8000eb2:	f7ff fe33 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(80, 100, 'L');
 8000eb6:	224c      	movs	r2, #76	@ 0x4c
 8000eb8:	2164      	movs	r1, #100	@ 0x64
 8000eba:	2050      	movs	r0, #80	@ 0x50
 8000ebc:	f7ff fe2e 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(100, 100, 'O');
 8000ec0:	224f      	movs	r2, #79	@ 0x4f
 8000ec2:	2164      	movs	r1, #100	@ 0x64
 8000ec4:	2064      	movs	r0, #100	@ 0x64
 8000ec6:	f7ff fe29 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'W');
 8000eca:	2257      	movs	r2, #87	@ 0x57
 8000ecc:	2164      	movs	r1, #100	@ 0x64
 8000ece:	2078      	movs	r0, #120	@ 0x78
 8000ed0:	f7ff fe24 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, ' ');
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	2164      	movs	r1, #100	@ 0x64
 8000ed8:	208c      	movs	r0, #140	@ 0x8c
 8000eda:	f7ff fe1f 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(160, 100, 'W');
 8000ede:	2257      	movs	r2, #87	@ 0x57
 8000ee0:	2164      	movs	r1, #100	@ 0x64
 8000ee2:	20a0      	movs	r0, #160	@ 0xa0
 8000ee4:	f7ff fe1a 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(180, 100, 'I');
 8000ee8:	2249      	movs	r2, #73	@ 0x49
 8000eea:	2164      	movs	r1, #100	@ 0x64
 8000eec:	20b4      	movs	r0, #180	@ 0xb4
 8000eee:	f7ff fe15 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(200, 100, 'N');
 8000ef2:	224e      	movs	r2, #78	@ 0x4e
 8000ef4:	2164      	movs	r1, #100	@ 0x64
 8000ef6:	20c8      	movs	r0, #200	@ 0xc8
 8000ef8:	f7ff fe10 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(220, 100, 'S');
 8000efc:	2253      	movs	r2, #83	@ 0x53
 8000efe:	2164      	movs	r1, #100	@ 0x64
 8000f00:	20dc      	movs	r0, #220	@ 0xdc
 8000f02:	f7ff fe0b 	bl	8000b1c <LCD_DisplayChar>
 8000f06:	e011      	b.n	8000f2c <LCD_DrawGameOverScreen+0x130>
    }
    else { // tie
        LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fd79 	bl	8000a00 <LCD_SetTextColor>
        LCD_DisplayChar(100, 100, 'T');
 8000f0e:	2254      	movs	r2, #84	@ 0x54
 8000f10:	2164      	movs	r1, #100	@ 0x64
 8000f12:	2064      	movs	r0, #100	@ 0x64
 8000f14:	f7ff fe02 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(120, 100, 'I');
 8000f18:	2249      	movs	r2, #73	@ 0x49
 8000f1a:	2164      	movs	r1, #100	@ 0x64
 8000f1c:	2078      	movs	r0, #120	@ 0x78
 8000f1e:	f7ff fdfd 	bl	8000b1c <LCD_DisplayChar>
        LCD_DisplayChar(140, 100, 'E');
 8000f22:	2245      	movs	r2, #69	@ 0x45
 8000f24:	2164      	movs	r1, #100	@ 0x64
 8000f26:	208c      	movs	r0, #140	@ 0x8c
 8000f28:	f7ff fdf8 	bl	8000b1c <LCD_DisplayChar>
    }

    // Draw "Restart" below the winner line
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fd67 	bl	8000a00 <LCD_SetTextColor>
    LCD_DisplayChar(60, 180, 'R');
 8000f32:	2252      	movs	r2, #82	@ 0x52
 8000f34:	21b4      	movs	r1, #180	@ 0xb4
 8000f36:	203c      	movs	r0, #60	@ 0x3c
 8000f38:	f7ff fdf0 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(80, 180, 'E');
 8000f3c:	2245      	movs	r2, #69	@ 0x45
 8000f3e:	21b4      	movs	r1, #180	@ 0xb4
 8000f40:	2050      	movs	r0, #80	@ 0x50
 8000f42:	f7ff fdeb 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(100, 180, 'S');
 8000f46:	2253      	movs	r2, #83	@ 0x53
 8000f48:	21b4      	movs	r1, #180	@ 0xb4
 8000f4a:	2064      	movs	r0, #100	@ 0x64
 8000f4c:	f7ff fde6 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(120, 180, 'T');
 8000f50:	2254      	movs	r2, #84	@ 0x54
 8000f52:	21b4      	movs	r1, #180	@ 0xb4
 8000f54:	2078      	movs	r0, #120	@ 0x78
 8000f56:	f7ff fde1 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(140, 180, 'A');
 8000f5a:	2241      	movs	r2, #65	@ 0x41
 8000f5c:	21b4      	movs	r1, #180	@ 0xb4
 8000f5e:	208c      	movs	r0, #140	@ 0x8c
 8000f60:	f7ff fddc 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(160, 180, 'R');
 8000f64:	2252      	movs	r2, #82	@ 0x52
 8000f66:	21b4      	movs	r1, #180	@ 0xb4
 8000f68:	20a0      	movs	r0, #160	@ 0xa0
 8000f6a:	f7ff fdd7 	bl	8000b1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 180, 'T');
 8000f6e:	2254      	movs	r2, #84	@ 0x54
 8000f70:	21b4      	movs	r1, #180	@ 0xb4
 8000f72:	20b4      	movs	r0, #180	@ 0xb4
 8000f74:	f7ff fdd2 	bl	8000b1c <LCD_DisplayChar>
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	20000004 	.word	0x20000004

08000f84 <LCD_DrawFloatingCoin>:



void LCD_DrawFloatingCoin(uint8_t column, uint16_t color) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	uint16_t x = BOARD_X_START + column * (2 * CELL_RADIUS + CELL_SPACING);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	81fb      	strh	r3, [r7, #14]
	uint16_t y = BOARD_Y_START - 30;
 8000fa0:	231e      	movs	r3, #30
 8000fa2:	81bb      	strh	r3, [r7, #12]

    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	89b9      	ldrh	r1, [r7, #12]
 8000fa8:	89f8      	ldrh	r0, [r7, #14]
 8000faa:	220e      	movs	r2, #14
 8000fac:	f7ff fc8c 	bl	80008c8 <LCD_Draw_Circle_Fill>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <LCD_Error_Handler+0x8>

08000fc4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000fc8:	f001 fba6 	bl	8002718 <STMPE811_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d001      	beq.n	8000fd6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000fd2:	bf00      	nop
 8000fd4:	e7fd      	b.n	8000fd2 <InitializeLCDTouch+0xe>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fc50 	bl	8002888 <STMPE811_ReadTouch>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <placeCoin>:
 *      Author: willa
 */

#include "game_state.h"

int placeCoin(uint8_t board[6][7], uint8_t col, uint8_t player) {
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
 8000ffe:	4613      	mov	r3, r2
 8001000:	70bb      	strb	r3, [r7, #2]
    for (uint8_t row = 5; row >= 0; row--) {
 8001002:	2305      	movs	r3, #5
 8001004:	73fb      	strb	r3, [r7, #15]
        if (board[row][col] == 0) {
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	441a      	add	r2, r3
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <placeCoin+0x3e>
            board[row][col] = player;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	441a      	add	r2, r3
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	78b9      	ldrb	r1, [r7, #2]
 800102a:	54d1      	strb	r1, [r2, r3]
            return row;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	e003      	b.n	8001038 <placeCoin+0x46>
    for (uint8_t row = 5; row >= 0; row--) {
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3b01      	subs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
        if (board[row][col] == 0) {
 8001036:	e7e6      	b.n	8001006 <placeCoin+0x14>
        }
    }
    return -1; // COL FULL, IMPLIMENT THIS LATER AND DON'T FORGET
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <countDirection>:

static int countDirection(uint8_t board[6][7], uint8_t startRow, uint8_t startCol, uint8_t chngRow, uint8_t chngCol, uint8_t player) {
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	70fb      	strb	r3, [r7, #3]
 8001056:	460b      	mov	r3, r1
 8001058:	70bb      	strb	r3, [r7, #2]
 800105a:	4613      	mov	r3, r2
 800105c:	707b      	strb	r3, [r7, #1]
	uint8_t count = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
	uint8_t r = startRow + chngRow;
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	4413      	add	r3, r2
 8001068:	73bb      	strb	r3, [r7, #14]
	uint8_t c = startCol + chngCol;
 800106a:	78ba      	ldrb	r2, [r7, #2]
 800106c:	7e3b      	ldrb	r3, [r7, #24]
 800106e:	4413      	add	r3, r2
 8001070:	737b      	strb	r3, [r7, #13]
    while ((r >= 0) && (r < 6) && (c >= 0) && (c < 7) && (board[r][c] == player)) {
 8001072:	e00a      	b.n	800108a <countDirection+0x46>
        count++;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
        r += chngRow;
 800107a:	7bba      	ldrb	r2, [r7, #14]
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	4413      	add	r3, r2
 8001080:	73bb      	strb	r3, [r7, #14]
        c += chngCol;
 8001082:	7b7a      	ldrb	r2, [r7, #13]
 8001084:	7e3b      	ldrb	r3, [r7, #24]
 8001086:	4413      	add	r3, r2
 8001088:	737b      	strb	r3, [r7, #13]
    while ((r >= 0) && (r < 6) && (c >= 0) && (c < 7) && (board[r][c] == player)) {
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d80d      	bhi.n	80010ac <countDirection+0x68>
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	2b06      	cmp	r3, #6
 8001094:	d80a      	bhi.n	80010ac <countDirection+0x68>
 8001096:	7bba      	ldrb	r2, [r7, #14]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	441a      	add	r2, r3
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	7f3a      	ldrb	r2, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0e3      	beq.n	8001074 <countDirection+0x30>
    }
    return count;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <checkWinOrTie>:


// 1 IS PLAYER WIN
// 2 IS TIE
// 0 NO WIN OR TIE, GAME STILL GOING
int checkWinOrTie(uint8_t board[6][7], uint8_t row, uint8_t col, uint8_t player) {
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b087      	sub	sp, #28
 80010be:	af02      	add	r7, sp, #8
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	4608      	mov	r0, r1
 80010c4:	4611      	mov	r1, r2
 80010c6:	461a      	mov	r2, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70bb      	strb	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
    if (1 + countDirection(board, row, col, 0, 1, player) +
 80010d4:	78ba      	ldrb	r2, [r7, #2]
 80010d6:	78f9      	ldrb	r1, [r7, #3]
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffae 	bl	8001044 <countDirection>
 80010e8:	4603      	mov	r3, r0
 80010ea:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 0, -1, player) >= 4)
 80010ec:	78ba      	ldrb	r2, [r7, #2]
 80010ee:	78f9      	ldrb	r1, [r7, #3]
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	23ff      	movs	r3, #255	@ 0xff
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <countDirection>
 8001100:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 0, 1, player) +
 8001102:	4423      	add	r3, r4
 8001104:	2b03      	cmp	r3, #3
 8001106:	dd01      	ble.n	800110c <checkWinOrTie+0x52>
        return 1;
 8001108:	2301      	movs	r3, #1
 800110a:	e072      	b.n	80011f2 <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, 1, 0, player) +
 800110c:	78ba      	ldrb	r2, [r7, #2]
 800110e:	78f9      	ldrb	r1, [r7, #3]
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff92 	bl	8001044 <countDirection>
 8001120:	4603      	mov	r3, r0
 8001122:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, 0, player) >= 4)
 8001124:	78ba      	ldrb	r2, [r7, #2]
 8001126:	78f9      	ldrb	r1, [r7, #3]
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	23ff      	movs	r3, #255	@ 0xff
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff86 	bl	8001044 <countDirection>
 8001138:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 0, player) +
 800113a:	4423      	add	r3, r4
 800113c:	2b03      	cmp	r3, #3
 800113e:	dd01      	ble.n	8001144 <checkWinOrTie+0x8a>
        return 1;
 8001140:	2301      	movs	r3, #1
 8001142:	e056      	b.n	80011f2 <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, 1, 1, player) +
 8001144:	78ba      	ldrb	r2, [r7, #2]
 8001146:	78f9      	ldrb	r1, [r7, #3]
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2301      	movs	r3, #1
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff76 	bl	8001044 <countDirection>
 8001158:	4603      	mov	r3, r0
 800115a:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, -1, -1, player) >= 4)
 800115c:	78ba      	ldrb	r2, [r7, #2]
 800115e:	78f9      	ldrb	r1, [r7, #3]
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	23ff      	movs	r3, #255	@ 0xff
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff6a 	bl	8001044 <countDirection>
 8001170:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, 1, 1, player) +
 8001172:	4423      	add	r3, r4
 8001174:	2b03      	cmp	r3, #3
 8001176:	dd01      	ble.n	800117c <checkWinOrTie+0xc2>
        return 1;
 8001178:	2301      	movs	r3, #1
 800117a:	e03a      	b.n	80011f2 <checkWinOrTie+0x138>

    if (1 + countDirection(board, row, col, -1, 1, player) +
 800117c:	78ba      	ldrb	r2, [r7, #2]
 800117e:	78f9      	ldrb	r1, [r7, #3]
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	2301      	movs	r3, #1
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	23ff      	movs	r3, #255	@ 0xff
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff5a 	bl	8001044 <countDirection>
 8001190:	4603      	mov	r3, r0
 8001192:	1c5c      	adds	r4, r3, #1
            countDirection(board, row, col, 1, -1, player) >= 4)
 8001194:	78ba      	ldrb	r2, [r7, #2]
 8001196:	78f9      	ldrb	r1, [r7, #3]
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	23ff      	movs	r3, #255	@ 0xff
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4e 	bl	8001044 <countDirection>
 80011a8:	4603      	mov	r3, r0
    if (1 + countDirection(board, row, col, -1, 1, player) +
 80011aa:	4423      	add	r3, r4
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	dd01      	ble.n	80011b4 <checkWinOrTie+0xfa>
        return 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e01e      	b.n	80011f2 <checkWinOrTie+0x138>

    // CHECK TIE
    for (uint8_t r = 0; r < 6; r++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e017      	b.n	80011ea <checkWinOrTie+0x130>
        for (uint8_t c = 0; c < 7; c++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	e00e      	b.n	80011de <checkWinOrTie+0x124>
            if (board[r][c] == 0)
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	441a      	add	r2, r3
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <checkWinOrTie+0x11e>
                return 0; // GAME STILL RUNNING
 80011d4:	2300      	movs	r3, #0
 80011d6:	e00c      	b.n	80011f2 <checkWinOrTie+0x138>
        for (uint8_t c = 0; c < 7; c++) {
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	3301      	adds	r3, #1
 80011dc:	73bb      	strb	r3, [r7, #14]
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	d9ed      	bls.n	80011c0 <checkWinOrTie+0x106>
    for (uint8_t r = 0; r < 6; r++) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d9e4      	bls.n	80011ba <checkWinOrTie+0x100>
        }
    }

    return 2;
 80011f0:	2302      	movs	r3, #2
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80011fe:	f000 f9ff 	bl	8001600 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001202:	20ca      	movs	r0, #202	@ 0xca
 8001204:	f000 f943 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001208:	20c3      	movs	r0, #195	@ 0xc3
 800120a:	f000 f94d 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800120e:	2008      	movs	r0, #8
 8001210:	f000 f94a 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001214:	2050      	movs	r0, #80	@ 0x50
 8001216:	f000 f947 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800121a:	20cf      	movs	r0, #207	@ 0xcf
 800121c:	f000 f937 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f941 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001226:	20c1      	movs	r0, #193	@ 0xc1
 8001228:	f000 f93e 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800122c:	2030      	movs	r0, #48	@ 0x30
 800122e:	f000 f93b 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001232:	20ed      	movs	r0, #237	@ 0xed
 8001234:	f000 f92b 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001238:	2064      	movs	r0, #100	@ 0x64
 800123a:	f000 f935 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 f932 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001244:	2012      	movs	r0, #18
 8001246:	f000 f92f 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800124a:	2081      	movs	r0, #129	@ 0x81
 800124c:	f000 f92c 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001250:	20e8      	movs	r0, #232	@ 0xe8
 8001252:	f000 f91c 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001256:	2085      	movs	r0, #133	@ 0x85
 8001258:	f000 f926 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f923 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 f920 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001268:	20cb      	movs	r0, #203	@ 0xcb
 800126a:	f000 f910 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800126e:	2039      	movs	r0, #57	@ 0x39
 8001270:	f000 f91a 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001274:	202c      	movs	r0, #44	@ 0x2c
 8001276:	f000 f917 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f914 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001280:	2034      	movs	r0, #52	@ 0x34
 8001282:	f000 f911 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001286:	2002      	movs	r0, #2
 8001288:	f000 f90e 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800128c:	20f7      	movs	r0, #247	@ 0xf7
 800128e:	f000 f8fe 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001292:	2020      	movs	r0, #32
 8001294:	f000 f908 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001298:	20ea      	movs	r0, #234	@ 0xea
 800129a:	f000 f8f8 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f902 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f8ff 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80012aa:	20b1      	movs	r0, #177	@ 0xb1
 80012ac:	f000 f8ef 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f8f9 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012b6:	201b      	movs	r0, #27
 80012b8:	f000 f8f6 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80012bc:	20b6      	movs	r0, #182	@ 0xb6
 80012be:	f000 f8e6 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 f8f0 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80012c8:	20a2      	movs	r0, #162	@ 0xa2
 80012ca:	f000 f8ed 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80012ce:	20c0      	movs	r0, #192	@ 0xc0
 80012d0:	f000 f8dd 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f000 f8e7 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80012da:	20c1      	movs	r0, #193	@ 0xc1
 80012dc:	f000 f8d7 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80012e0:	2010      	movs	r0, #16
 80012e2:	f000 f8e1 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80012e6:	20c5      	movs	r0, #197	@ 0xc5
 80012e8:	f000 f8d1 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80012ec:	2045      	movs	r0, #69	@ 0x45
 80012ee:	f000 f8db 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80012f2:	2015      	movs	r0, #21
 80012f4:	f000 f8d8 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80012f8:	20c7      	movs	r0, #199	@ 0xc7
 80012fa:	f000 f8c8 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80012fe:	2090      	movs	r0, #144	@ 0x90
 8001300:	f000 f8d2 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001304:	2036      	movs	r0, #54	@ 0x36
 8001306:	f000 f8c2 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800130a:	20c8      	movs	r0, #200	@ 0xc8
 800130c:	f000 f8cc 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001310:	20f2      	movs	r0, #242	@ 0xf2
 8001312:	f000 f8bc 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f8c6 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800131c:	20b0      	movs	r0, #176	@ 0xb0
 800131e:	f000 f8b6 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001322:	20c2      	movs	r0, #194	@ 0xc2
 8001324:	f000 f8c0 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001328:	20b6      	movs	r0, #182	@ 0xb6
 800132a:	f000 f8b0 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800132e:	200a      	movs	r0, #10
 8001330:	f000 f8ba 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001334:	20a7      	movs	r0, #167	@ 0xa7
 8001336:	f000 f8b7 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800133a:	2027      	movs	r0, #39	@ 0x27
 800133c:	f000 f8b4 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001340:	2004      	movs	r0, #4
 8001342:	f000 f8b1 	bl	80014a8 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f000 f8a1 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f8ab 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f8a8 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 f8a5 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800135e:	20ef      	movs	r0, #239	@ 0xef
 8001360:	f000 f8a2 	bl	80014a8 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001364:	202b      	movs	r0, #43	@ 0x2b
 8001366:	f000 f892 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f89c 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f000 f899 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 f896 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800137c:	203f      	movs	r0, #63	@ 0x3f
 800137e:	f000 f893 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001382:	20f6      	movs	r0, #246	@ 0xf6
 8001384:	f000 f883 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001388:	2001      	movs	r0, #1
 800138a:	f000 f88d 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f88a 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001394:	2006      	movs	r0, #6
 8001396:	f000 f887 	bl	80014a8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800139a:	202c      	movs	r0, #44	@ 0x2c
 800139c:	f000 f877 	bl	800148e <ili9341_Write_Reg>
  LCD_Delay(200);
 80013a0:	20c8      	movs	r0, #200	@ 0xc8
 80013a2:	f000 f9e9 	bl	8001778 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80013a6:	2026      	movs	r0, #38	@ 0x26
 80013a8:	f000 f871 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 f87b 	bl	80014a8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80013b2:	20e0      	movs	r0, #224	@ 0xe0
 80013b4:	f000 f86b 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80013b8:	200f      	movs	r0, #15
 80013ba:	f000 f875 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80013be:	2029      	movs	r0, #41	@ 0x29
 80013c0:	f000 f872 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80013c4:	2024      	movs	r0, #36	@ 0x24
 80013c6:	f000 f86f 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80013ca:	200c      	movs	r0, #12
 80013cc:	f000 f86c 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80013d0:	200e      	movs	r0, #14
 80013d2:	f000 f869 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013d6:	2009      	movs	r0, #9
 80013d8:	f000 f866 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80013dc:	204e      	movs	r0, #78	@ 0x4e
 80013de:	f000 f863 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013e2:	2078      	movs	r0, #120	@ 0x78
 80013e4:	f000 f860 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80013e8:	203c      	movs	r0, #60	@ 0x3c
 80013ea:	f000 f85d 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80013ee:	2009      	movs	r0, #9
 80013f0:	f000 f85a 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80013f4:	2013      	movs	r0, #19
 80013f6:	f000 f857 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80013fa:	2005      	movs	r0, #5
 80013fc:	f000 f854 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001400:	2017      	movs	r0, #23
 8001402:	f000 f851 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001406:	2011      	movs	r0, #17
 8001408:	f000 f84e 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f000 f84b 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001412:	20e1      	movs	r0, #225	@ 0xe1
 8001414:	f000 f83b 	bl	800148e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f845 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800141e:	2016      	movs	r0, #22
 8001420:	f000 f842 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001424:	201b      	movs	r0, #27
 8001426:	f000 f83f 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800142a:	2004      	movs	r0, #4
 800142c:	f000 f83c 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001430:	2011      	movs	r0, #17
 8001432:	f000 f839 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001436:	2007      	movs	r0, #7
 8001438:	f000 f836 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800143c:	2031      	movs	r0, #49	@ 0x31
 800143e:	f000 f833 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001442:	2033      	movs	r0, #51	@ 0x33
 8001444:	f000 f830 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001448:	2042      	movs	r0, #66	@ 0x42
 800144a:	f000 f82d 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800144e:	2005      	movs	r0, #5
 8001450:	f000 f82a 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001454:	200c      	movs	r0, #12
 8001456:	f000 f827 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800145a:	200a      	movs	r0, #10
 800145c:	f000 f824 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001460:	2028      	movs	r0, #40	@ 0x28
 8001462:	f000 f821 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001466:	202f      	movs	r0, #47	@ 0x2f
 8001468:	f000 f81e 	bl	80014a8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800146c:	200f      	movs	r0, #15
 800146e:	f000 f81b 	bl	80014a8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001472:	2011      	movs	r0, #17
 8001474:	f000 f80b 	bl	800148e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001478:	20c8      	movs	r0, #200	@ 0xc8
 800147a:	f000 f97d 	bl	8001778 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800147e:	2029      	movs	r0, #41	@ 0x29
 8001480:	f000 f805 	bl	800148e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001484:	202c      	movs	r0, #44	@ 0x2c
 8001486:	f000 f802 	bl	800148e <ili9341_Write_Reg>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}

0800148e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f94a 	bl	8001734 <LCD_IO_WriteReg>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f91b 	bl	80016f0 <LCD_IO_WriteData>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014c8:	4819      	ldr	r0, [pc, #100]	@ (8001530 <SPI_Init+0x6c>)
 80014ca:	f004 fd22 	bl	8005f12 <HAL_SPI_GetState>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12b      	bne.n	800152c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <SPI_Init+0x6c>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <SPI_Init+0x70>)
 80014d8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <SPI_Init+0x6c>)
 80014dc:	2218      	movs	r2, #24
 80014de:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <SPI_Init+0x6c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <SPI_Init+0x6c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <SPI_Init+0x6c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <SPI_Init+0x6c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <SPI_Init+0x6c>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <SPI_Init+0x6c>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <SPI_Init+0x6c>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <SPI_Init+0x6c>)
 800150c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001510:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <SPI_Init+0x6c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <SPI_Init+0x6c>)
 800151a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800151e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001520:	4803      	ldr	r0, [pc, #12]	@ (8001530 <SPI_Init+0x6c>)
 8001522:	f000 f833 	bl	800158c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001526:	4802      	ldr	r0, [pc, #8]	@ (8001530 <SPI_Init+0x6c>)
 8001528:	f004 fafe 	bl	8005b28 <HAL_SPI_Init>
  }
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20025978 	.word	0x20025978
 8001534:	40015000 	.word	0x40015000

08001538 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <SPI_Write+0x34>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1db9      	adds	r1, r7, #6
 800154c:	2201      	movs	r2, #1
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <SPI_Write+0x38>)
 8001550:	f004 fb9b 	bl	8005c8a <HAL_SPI_Transmit>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800155e:	f000 f809 	bl	8001574 <SPI_Error>
  }
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000014 	.word	0x20000014
 8001570:	20025978 	.word	0x20025978

08001574 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <SPI_Error+0x14>)
 800157a:	f004 fb5e 	bl	8005c3a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800157e:	f7ff ffa1 	bl	80014c4 <SPI_Init>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20025978 	.word	0x20025978

0800158c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <SPI_MspInit+0x6c>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <SPI_MspInit+0x6c>)
 800159e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <SPI_MspInit+0x6c>)
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <SPI_MspInit+0x6c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4a0f      	ldr	r2, [pc, #60]	@ (80015f8 <SPI_MspInit+0x6c>)
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <SPI_MspInit+0x6c>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80015cc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80015da:	2301      	movs	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80015de:	2305      	movs	r3, #5
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <SPI_MspInit+0x70>)
 80015ea:	f001 fdff 	bl	80031ec <HAL_GPIO_Init>
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021400 	.word	0x40021400

08001600 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001606:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <LCD_IO_Init+0xe0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d164      	bne.n	80016d8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <LCD_IO_Init+0xe0>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <LCD_IO_Init+0xe4>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	4a31      	ldr	r2, [pc, #196]	@ (80016e4 <LCD_IO_Init+0xe4>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6313      	str	r3, [r2, #48]	@ 0x30
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <LCD_IO_Init+0xe4>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001634:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4827      	ldr	r0, [pc, #156]	@ (80016e8 <LCD_IO_Init+0xe8>)
 800164a:	f001 fdcf 	bl	80031ec <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <LCD_IO_Init+0xe4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a23      	ldr	r2, [pc, #140]	@ (80016e4 <LCD_IO_Init+0xe4>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <LCD_IO_Init+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4819      	ldr	r0, [pc, #100]	@ (80016e8 <LCD_IO_Init+0xe8>)
 8001684:	f001 fdb2 	bl	80031ec <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <LCD_IO_Init+0xe4>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <LCD_IO_Init+0xe4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <LCD_IO_Init+0xe4>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80016a4:	2304      	movs	r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	480c      	ldr	r0, [pc, #48]	@ (80016ec <LCD_IO_Init+0xec>)
 80016bc:	f001 fd96 	bl	80031ec <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80016c0:	2200      	movs	r2, #0
 80016c2:	2104      	movs	r1, #4
 80016c4:	4809      	ldr	r0, [pc, #36]	@ (80016ec <LCD_IO_Init+0xec>)
 80016c6:	f002 f849 	bl	800375c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80016ca:	2201      	movs	r2, #1
 80016cc:	2104      	movs	r1, #4
 80016ce:	4807      	ldr	r0, [pc, #28]	@ (80016ec <LCD_IO_Init+0xec>)
 80016d0:	f002 f844 	bl	800375c <HAL_GPIO_WritePin>

    SPI_Init();
 80016d4:	f7ff fef6 	bl	80014c4 <SPI_Init>
  }
}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200259d0 	.word	0x200259d0
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40020800 	.word	0x40020800

080016f0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001700:	480a      	ldr	r0, [pc, #40]	@ (800172c <LCD_IO_WriteData+0x3c>)
 8001702:	f002 f82b 	bl	800375c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001706:	2200      	movs	r2, #0
 8001708:	2104      	movs	r1, #4
 800170a:	4809      	ldr	r0, [pc, #36]	@ (8001730 <LCD_IO_WriteData+0x40>)
 800170c:	f002 f826 	bl	800375c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff10 	bl	8001538 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001718:	2201      	movs	r2, #1
 800171a:	2104      	movs	r1, #4
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <LCD_IO_WriteData+0x40>)
 800171e:	f002 f81d 	bl	800375c <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40020800 	.word	0x40020800

08001734 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001744:	480a      	ldr	r0, [pc, #40]	@ (8001770 <LCD_IO_WriteReg+0x3c>)
 8001746:	f002 f809 	bl	800375c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800174a:	2200      	movs	r2, #0
 800174c:	2104      	movs	r1, #4
 800174e:	4809      	ldr	r0, [pc, #36]	@ (8001774 <LCD_IO_WriteReg+0x40>)
 8001750:	f002 f804 	bl	800375c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff feed 	bl	8001538 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800175e:	2201      	movs	r2, #1
 8001760:	2104      	movs	r1, #4
 8001762:	4804      	ldr	r0, [pc, #16]	@ (8001774 <LCD_IO_WriteReg+0x40>)
 8001764:	f001 fffa 	bl	800375c <HAL_GPIO_WritePin>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40020800 	.word	0x40020800

08001778 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f001 fbfd 	bl	8002f80 <HAL_Delay>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001796:	f001 fb81 	bl	8002e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179a:	f000 f8ab 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179e:	f000 fab9 	bl	8001d14 <MX_GPIO_Init>
  MX_LTDC_Init();
 80017a2:	f000 f951 	bl	8001a48 <MX_LTDC_Init>
  MX_RNG_Init();
 80017a6:	f000 fa01 	bl	8001bac <MX_RNG_Init>
  MX_SPI5_Init();
 80017aa:	f000 fa13 	bl	8001bd4 <MX_SPI5_Init>
  MX_I2C3_Init();
 80017ae:	f000 f90b 	bl	80019c8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 80017b2:	f7fe feed 	bl	8000590 <ApplicationInit>

  game_seconds  = 0;
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <main+0x134>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
  seconds_flag = true;
 80017bc:	4b42      	ldr	r3, [pc, #264]	@ (80018c8 <main+0x138>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]

  HAL_Delay(500);
 80017c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c6:	f001 fbdb 	bl	8002f80 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  /////////////////////////// TEST DRAW FUNCTIONS////////////////////////////////
  STMPE811_TouchData touch;
  while (1){
	  //LCD_DrawMenuScreen();
	  gameConfig();
 80017ca:	f000 fc57 	bl	800207c <gameConfig>
  while (1){
      if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc02 	bl	8000fda <returnTouchStateAndLocation>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f8      	bne.n	80017ce <main+0x3e>
          if (touch.y < 120) {
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b77      	cmp	r3, #119	@ 0x77
 80017e0:	d803      	bhi.n	80017ea <main+0x5a>
              onePlayerMode = 1;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <main+0x13c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
          } else {
              onePlayerMode = 0;
          }
          break;
 80017e8:	e002      	b.n	80017f0 <main+0x60>
              onePlayerMode = 0;
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <main+0x13c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
      }
  }
  LCD_DrawGameBoard(board);
 80017f0:	4837      	ldr	r0, [pc, #220]	@ (80018d0 <main+0x140>)
 80017f2:	f7ff fa1d 	bl	8000c30 <LCD_DrawGameBoard>
  MX_TIM2_Init();
 80017f6:	f000 fa23 	bl	8001c40 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80017fa:	4836      	ldr	r0, [pc, #216]	@ (80018d4 <main+0x144>)
 80017fc:	f004 fcc4 	bl	8006188 <HAL_TIM_Base_Start_IT>

  while (!gameOver) {
 8001800:	e048      	b.n	8001894 <main+0x104>
	  uint16_t color;
	  if (currentPlayer == 1) {
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <main+0x148>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d103      	bne.n	8001812 <main+0x82>
		  color = COLOR_PLAYER1;
 800180a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800180e:	81fb      	strh	r3, [r7, #14]
 8001810:	e002      	b.n	8001818 <main+0x88>
	  } else {
		  color = COLOR_PLAYER2;
 8001812:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001816:	81fb      	strh	r3, [r7, #14]
	  }
	  HAL_Delay(50);
 8001818:	2032      	movs	r0, #50	@ 0x32
 800181a:	f001 fbb1 	bl	8002f80 <HAL_Delay>
	  LCD_DrawFloatingCoin(currentColumn, color);
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <main+0x14c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	89fa      	ldrh	r2, [r7, #14]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fbac 	bl	8000f84 <LCD_DrawFloatingCoin>

	  if (seconds_flag) {
 800182c:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <main+0x138>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <main+0xb8>
	    seconds_flag = false;
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <main+0x138>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	    draw_elapsed_time(game_seconds);
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <main+0x134>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fa6c 	bl	8000d20 <draw_elapsed_time>
	  }

	  if (returnTouchStateAndLocation(&touch) == STMPE811_State_Pressed) {
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fbc5 	bl	8000fda <returnTouchStateAndLocation>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11e      	bne.n	8001894 <main+0x104>
		  LCD_ClearFloatingBand();
 8001856:	f7ff fa41 	bl	8000cdc <LCD_ClearFloatingBand>
		  if (touch.y < 120) currentColumn = MAX(0, currentColumn - 1);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b77      	cmp	r3, #119	@ 0x77
 800185e:	d80c      	bhi.n	800187a <main+0xea>
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <main+0x14c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <main+0xe2>
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <main+0x14c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	e000      	b.n	8001874 <main+0xe4>
 8001872:	2300      	movs	r3, #0
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <main+0x14c>)
 8001876:	7013      	strb	r3, [r2, #0]
 8001878:	e009      	b.n	800188e <main+0xfe>
		  else currentColumn = MIN(6, currentColumn + 1);
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <main+0x14c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b05      	cmp	r3, #5
 8001880:	bf28      	it	cs
 8001882:	2305      	movcs	r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <main+0x14c>)
 800188c:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 800188e:	2064      	movs	r0, #100	@ 0x64
 8001890:	f001 fb76 	bl	8002f80 <HAL_Delay>
  while (!gameOver) {
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <main+0x150>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0b2      	beq.n	8001802 <main+0x72>
	  }
  }

  LCD_DrawGameOverScreen(winner, redWins, yellowWins, elapsedTime);
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <main+0x154>)
 800189e:	7818      	ldrb	r0, [r3, #0]
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <main+0x158>)
 80018a2:	7819      	ldrb	r1, [r3, #0]
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <main+0x15c>)
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <main+0x160>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f7ff faa5 	bl	8000dfc <LCD_DrawGameOverScreen>
  while (returnTouchStateAndLocation(&touch) != STMPE811_State_Pressed){
 80018b2:	bf00      	nop
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb8f 	bl	8000fda <returnTouchStateAndLocation>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f8      	bne.n	80018b4 <main+0x124>
  while (1){
 80018c2:	e782      	b.n	80017ca <main+0x3a>
 80018c4:	20025bb2 	.word	0x20025bb2
 80018c8:	20025bb3 	.word	0x20025bb3
 80018cc:	20025baa 	.word	0x20025baa
 80018d0:	20025b80 	.word	0x20025b80
 80018d4:	20025b38 	.word	0x20025b38
 80018d8:	20000018 	.word	0x20000018
 80018dc:	20000019 	.word	0x20000019
 80018e0:	20025bab 	.word	0x20025bab
 80018e4:	20025bac 	.word	0x20025bac
 80018e8:	20025bad 	.word	0x20025bad
 80018ec:	20025bae 	.word	0x20025bae
 80018f0:	20025bb0 	.word	0x20025bb0

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	@ 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	@ 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 f886 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a27      	ldr	r2, [pc, #156]	@ (80019c0 <SystemClock_Config+0xcc>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	@ (80019c4 <SystemClock_Config+0xd0>)
 800193e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <SystemClock_Config+0xd0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001964:	2308      	movs	r3, #8
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001968:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196e:	2302      	movs	r3, #2
 8001970:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001972:	2307      	movs	r3, #7
 8001974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fa66 	bl	8004e4c <HAL_RCC_OscConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001986:	f000 fc1f 	bl	80021c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198a:	230f      	movs	r3, #15
 800198c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198e:	2302      	movs	r3, #2
 8001990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001996:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800199a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2105      	movs	r1, #5
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fcc7 	bl	800533c <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019b4:	f000 fc08 	bl	80021c8 <Error_Handler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3750      	adds	r7, #80	@ 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <MX_I2C3_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <MX_I2C3_Init+0x7c>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_I2C3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_I2C3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a04:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_I2C3_Init+0x74>)
 8001a06:	f001 fedb 	bl	80037c0 <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a10:	f000 fbda 	bl	80021c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a14:	2100      	movs	r1, #0
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <MX_I2C3_Init+0x74>)
 8001a18:	f002 fef6 	bl	8004808 <HAL_I2CEx_ConfigAnalogFilter>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a22:	f000 fbd1 	bl	80021c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <MX_I2C3_Init+0x74>)
 8001a2a:	f002 ff29 	bl	8004880 <HAL_I2CEx_ConfigDigitalFilter>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a34:	f000 fbc8 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200259d4 	.word	0x200259d4
 8001a40:	40005c00 	.word	0x40005c00
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09a      	sub	sp, #104	@ 0x68
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a52:	2234      	movs	r2, #52	@ 0x34
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 ffdc 	bl	8006a14 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2234      	movs	r2, #52	@ 0x34
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 ffd6 	bl	8006a14 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a68:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba8 <MX_LTDC_Init+0x160>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a80:	4b48      	ldr	r3, [pc, #288]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001a8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a8e:	2203      	movs	r2, #3
 8001a90:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001a92:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a94:	220e      	movs	r2, #14
 8001a96:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001a98:	4b42      	ldr	r3, [pc, #264]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001a9a:	2205      	movs	r2, #5
 8001a9c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001a9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001aa0:	f240 228e 	movw	r2, #654	@ 0x28e
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001aa8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ab0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ab8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001abe:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ace:	4b35      	ldr	r3, [pc, #212]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ad6:	4833      	ldr	r0, [pc, #204]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001ad8:	f002 ff12 	bl	8004900 <HAL_LTDC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001ae2:	f000 fb71 	bl	80021c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001af6:	2300      	movs	r3, #0
 8001af8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b06:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	481c      	ldr	r0, [pc, #112]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001b34:	f002 ffb4 	bl	8004aa0 <HAL_LTDC_ConfigLayer>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001b3e:	f000 fb43 	bl	80021c8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b62:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b64:	2305      	movs	r3, #5
 8001b66:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_LTDC_Init+0x15c>)
 8001b8e:	f002 ff87 	bl	8004aa0 <HAL_LTDC_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001b98:	f000 fb16 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3768      	adds	r7, #104	@ 0x68
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20025a28 	.word	0x20025a28
 8001ba8:	40016800 	.word	0x40016800

08001bac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_RNG_Init+0x20>)
 8001bb2:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <MX_RNG_Init+0x24>)
 8001bb4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <MX_RNG_Init+0x20>)
 8001bb8:	f003 ff8c 	bl	8005ad4 <HAL_RNG_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bc2:	f000 fb01 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20025ad0 	.word	0x20025ad0
 8001bd0:	50060800 	.word	0x50060800

08001bd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_SPI5_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_SPI5_Init+0x64>)
 8001c26:	f003 ff7f 	bl	8005b28 <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 faca 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20025ae0 	.word	0x20025ae0
 8001c3c:	40015000 	.word	0x40015000

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <MX_TIM2_Init+0xcc>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d0c <MX_TIM2_Init+0xcc>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <MX_TIM2_Init+0xcc>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001c7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001c84:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001c92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca4:	481a      	ldr	r0, [pc, #104]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001ca6:	f004 fa1f 	bl	80060e8 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001cb0:	f000 fa8a 	bl	80021c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4813      	ldr	r0, [pc, #76]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001cc2:	f004 fbc1 	bl	8006448 <HAL_TIM_ConfigClockSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ccc:	f000 fa7c 	bl	80021c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001ce0:	f004 fde8 	bl	80068b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001cea:	f000 fa6d 	bl	80021c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001cee:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <MX_TIM2_Init+0xd0>)
 8001cf0:	f004 fa4a 	bl	8006188 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	201c      	movs	r0, #28
 8001cfa:	f001 fa40 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfe:	201c      	movs	r0, #28
 8001d00:	f001 fa59 	bl	80031b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	20025b38 	.word	0x20025b38

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	4bb3      	ldr	r3, [pc, #716]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4ab2      	ldr	r2, [pc, #712]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4bb0      	ldr	r3, [pc, #704]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	4bac      	ldr	r3, [pc, #688]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4aab      	ldr	r2, [pc, #684]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d50:	f043 0320 	orr.w	r3, r3, #32
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4ba9      	ldr	r3, [pc, #676]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	4ba5      	ldr	r3, [pc, #660]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4aa4      	ldr	r2, [pc, #656]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4ba2      	ldr	r3, [pc, #648]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	4b9e      	ldr	r3, [pc, #632]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a9d      	ldr	r2, [pc, #628]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b9b      	ldr	r3, [pc, #620]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b97      	ldr	r3, [pc, #604]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a96      	ldr	r2, [pc, #600]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b94      	ldr	r3, [pc, #592]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b90      	ldr	r3, [pc, #576]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b89      	ldr	r3, [pc, #548]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a88      	ldr	r2, [pc, #544]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b86      	ldr	r3, [pc, #536]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b82      	ldr	r3, [pc, #520]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a81      	ldr	r2, [pc, #516]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001ffc <MX_GPIO_Init+0x2e8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2116      	movs	r1, #22
 8001e0e:	487c      	ldr	r0, [pc, #496]	@ (8002000 <MX_GPIO_Init+0x2ec>)
 8001e10:	f001 fca4 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	487a      	ldr	r0, [pc, #488]	@ (8002004 <MX_GPIO_Init+0x2f0>)
 8001e1a:	f001 fc9f 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001e24:	4878      	ldr	r0, [pc, #480]	@ (8002008 <MX_GPIO_Init+0x2f4>)
 8001e26:	f001 fc99 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001e30:	4876      	ldr	r0, [pc, #472]	@ (800200c <MX_GPIO_Init+0x2f8>)
 8001e32:	f001 fc93 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e36:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	486f      	ldr	r0, [pc, #444]	@ (8002010 <MX_GPIO_Init+0x2fc>)
 8001e54:	f001 f9ca 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	4863      	ldr	r0, [pc, #396]	@ (8002000 <MX_GPIO_Init+0x2ec>)
 8001e74:	f001 f9ba 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e78:	2316      	movs	r3, #22
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	485c      	ldr	r0, [pc, #368]	@ (8002000 <MX_GPIO_Init+0x2ec>)
 8001e90:	f001 f9ac 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;// DISABLE FUNCTIONALITY FOR INT1 & 2?
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4856      	ldr	r0, [pc, #344]	@ (8002004 <MX_GPIO_Init+0x2f0>)
 8001eaa:	f001 f99f 	bl	80031ec <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);///////////////////////////////////CONFIGURE NVIC//////////////////////////////////////////
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2006      	movs	r0, #6
 8001eb4:	f001 f963 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eb8:	2006      	movs	r0, #6
 8001eba:	f001 f97c 	bl	80031b6 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	484b      	ldr	r0, [pc, #300]	@ (8002004 <MX_GPIO_Init+0x2f0>)
 8001ed6:	f001 f989 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001eda:	2320      	movs	r3, #32
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ede:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	4844      	ldr	r0, [pc, #272]	@ (8002000 <MX_GPIO_Init+0x2ec>)
 8001ef0:	f001 f97c 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4843      	ldr	r0, [pc, #268]	@ (8002014 <MX_GPIO_Init+0x300>)
 8001f08:	f001 f970 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f0c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4838      	ldr	r0, [pc, #224]	@ (800200c <MX_GPIO_Init+0x2f8>)
 8001f2a:	f001 f95f 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f2e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f40:	230c      	movs	r3, #12
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4833      	ldr	r0, [pc, #204]	@ (8002018 <MX_GPIO_Init+0x304>)
 8001f4c:	f001 f94e 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f50:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f62:	230c      	movs	r3, #12
 8001f64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4829      	ldr	r0, [pc, #164]	@ (8002014 <MX_GPIO_Init+0x300>)
 8001f6e:	f001 f93d 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4823      	ldr	r0, [pc, #140]	@ (8002014 <MX_GPIO_Init+0x300>)
 8001f88:	f001 f930 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001f8c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4817      	ldr	r0, [pc, #92]	@ (8002008 <MX_GPIO_Init+0x2f4>)
 8001faa:	f001 f91f 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001fae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4811      	ldr	r0, [pc, #68]	@ (8002008 <MX_GPIO_Init+0x2f4>)
 8001fc4:	f001 f912 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001fc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4809      	ldr	r0, [pc, #36]	@ (8002008 <MX_GPIO_Init+0x2f4>)
 8001fe2:	f001 f903 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fe6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	e00f      	b.n	800201c <MX_GPIO_Init+0x308>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020800 	.word	0x40020800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021800 	.word	0x40021800
 8002010:	40021400 	.word	0x40021400
 8002014:	40020400 	.word	0x40020400
 8002018:	40021000 	.word	0x40021000
 800201c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4812      	ldr	r0, [pc, #72]	@ (8002070 <MX_GPIO_Init+0x35c>)
 8002026:	f001 f8e1 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800202a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <MX_GPIO_Init+0x360>)
 8002044:	f001 f8d2 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002058:	230c      	movs	r3, #12
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_GPIO_Init+0x364>)
 8002064:	f001 f8c2 	bl	80031ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	@ 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40020000 	.word	0x40020000
 8002074:	40021800 	.word	0x40021800
 8002078:	40020400 	.word	0x40020400

0800207c <gameConfig>:

/* USER CODE BEGIN 4 */
void gameConfig(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	  LCD_DrawMenuScreen();
 8002080:	f7fe fd6e 	bl	8000b60 <LCD_DrawMenuScreen>
	  memset(board, 0, sizeof(board[0][0]) * 6 * 7);
 8002084:	222a      	movs	r2, #42	@ 0x2a
 8002086:	2100      	movs	r1, #0
 8002088:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <gameConfig+0x3c>)
 800208a:	f004 fcc3 	bl	8006a14 <memset>
//	  memset(board, 0, sizeof(board));
	  currentPlayer = 1;
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <gameConfig+0x40>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
	  currentColumn = 3;
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <gameConfig+0x44>)
 8002096:	2203      	movs	r2, #3
 8002098:	701a      	strb	r2, [r3, #0]
	  gameOver = 0;
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <gameConfig+0x48>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	  winner = 0;
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <gameConfig+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
	  game_seconds = 0;
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <gameConfig+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
	  seconds_flag = true;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <gameConfig+0x54>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20025b80 	.word	0x20025b80
 80020bc:	20000018 	.word	0x20000018
 80020c0:	20000019 	.word	0x20000019
 80020c4:	20025bab 	.word	0x20025bab
 80020c8:	20025bac 	.word	0x20025bac
 80020cc:	20025bb2 	.word	0x20025bb2
 80020d0:	20025bb3 	.word	0x20025bb3

080020d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPressTime = 0;
	if (HAL_GetTick() - lastPressTime < 200) return;
 80020de:	f000 ff43 	bl	8002f68 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_GPIO_EXTI_Callback+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80020ec:	d93d      	bls.n	800216a <HAL_GPIO_EXTI_Callback+0x96>
	lastPressTime = HAL_GetTick();
 80020ee:	f000 ff3b 	bl	8002f68 <HAL_GetTick>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <HAL_GPIO_EXTI_Callback+0xa0>)
 80020f6:	6013      	str	r3, [r2, #0]

    if (GPIO_Pin == GPIO_PIN_0) {
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d131      	bne.n	8002162 <HAL_GPIO_EXTI_Callback+0x8e>
        uint8_t placedRow = placeCoin(board, currentColumn, currentPlayer);
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	481d      	ldr	r0, [pc, #116]	@ (8002180 <HAL_GPIO_EXTI_Callback+0xac>)
 800210a:	f7fe ff72 	bl	8000ff2 <placeCoin>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]
        if (placedRow != -1) { // THIS CHECKS IF ROW IS FULL, IT WON'T PLACE THE COIN IF THE ROW IS FULL
            uint8_t result = checkWinOrTie(board, placedRow, currentColumn, currentPlayer);
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	7bf9      	ldrb	r1, [r7, #15]
 800211c:	4818      	ldr	r0, [pc, #96]	@ (8002180 <HAL_GPIO_EXTI_Callback+0xac>)
 800211e:	f7fe ffcc 	bl	80010ba <checkWinOrTie>
 8002122:	4603      	mov	r3, r0
 8002124:	73bb      	strb	r3, [r7, #14]
            if (result == 1) {
 8002126:	7bbb      	ldrb	r3, [r7, #14]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_GPIO_EXTI_Callback+0x68>
                winner = currentPlayer;
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <HAL_GPIO_EXTI_Callback+0xa8>)
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002132:	701a      	strb	r2, [r3, #0]
                gameOver = 1;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e012      	b.n	8002162 <HAL_GPIO_EXTI_Callback+0x8e>
            } else if (result == 2) {
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d106      	bne.n	8002150 <HAL_GPIO_EXTI_Callback+0x7c>
                winner = 0; // TIE
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
                gameOver = 1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <HAL_GPIO_EXTI_Callback+0xb4>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e008      	b.n	8002162 <HAL_GPIO_EXTI_Callback+0x8e>
            } else {
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_GPIO_EXTI_Callback+0x88>
 8002158:	2202      	movs	r2, #2
 800215a:	e000      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x8a>
 800215c:	2201      	movs	r2, #1
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002160:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    LCD_DrawGameBoard(board);
 8002162:	4807      	ldr	r0, [pc, #28]	@ (8002180 <HAL_GPIO_EXTI_Callback+0xac>)
 8002164:	f7fe fd64 	bl	8000c30 <LCD_DrawGameBoard>
 8002168:	e000      	b.n	800216c <HAL_GPIO_EXTI_Callback+0x98>
	if (HAL_GetTick() - lastPressTime < 200) return;
 800216a:	bf00      	nop
}
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20025bb4 	.word	0x20025bb4
 8002178:	20000019 	.word	0x20000019
 800217c:	20000018 	.word	0x20000018
 8002180:	20025b80 	.word	0x20025b80
 8002184:	20025bac 	.word	0x20025bac
 8002188:	20025bab 	.word	0x20025bab

0800218c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219c:	d109      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x26>
    game_seconds++;
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021aa:	701a      	strb	r2, [r3, #0]
    seconds_flag = true;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20025bb2 	.word	0x20025bb2
 80021c4:	20025bb3 	.word	0x20025bb3

080021c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021cc:	b672      	cpsid	i
}
 80021ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <Error_Handler+0x8>

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <HAL_MspInit+0x4c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_MspInit+0x4c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002212:	2007      	movs	r0, #7
 8002214:	f000 ffa8 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_I2C_MspInit+0xc4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d14b      	bne.n	80022de <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800227e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002284:	2312      	movs	r3, #18
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002290:	2304      	movs	r3, #4
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4815      	ldr	r0, [pc, #84]	@ (80022f0 <HAL_I2C_MspInit+0xcc>)
 800229c:	f000 ffa6 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80022a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a6:	2312      	movs	r3, #18
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022b2:	2304      	movs	r3, #4
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <HAL_I2C_MspInit+0xd0>)
 80022be:	f000 ff95 	bl	80031ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 80022cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_I2C_MspInit+0xc8>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	@ 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005c00 	.word	0x40005c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020000 	.word	0x40020000

080022f8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b09a      	sub	sp, #104	@ 0x68
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	2230      	movs	r2, #48	@ 0x30
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f004 fb7b 	bl	8006a14 <memset>
  if(hltdc->Instance==LTDC)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a81      	ldr	r2, [pc, #516]	@ (8002528 <HAL_LTDC_MspInit+0x230>)
 8002324:	4293      	cmp	r3, r2
 8002326:	f040 80fb 	bne.w	8002520 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800232a:	2308      	movs	r3, #8
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800232e:	23c8      	movs	r3, #200	@ 0xc8
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002332:	2302      	movs	r3, #2
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002336:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fa07 	bl	8005754 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800234c:	f7ff ff3c 	bl	80021c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	4b75      	ldr	r3, [pc, #468]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	4a74      	ldr	r2, [pc, #464]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 800235a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800235e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002360:	4b72      	ldr	r3, [pc, #456]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	4b6e      	ldr	r3, [pc, #440]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	4a6d      	ldr	r2, [pc, #436]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002376:	f043 0320 	orr.w	r3, r3, #32
 800237a:	6313      	str	r3, [r2, #48]	@ 0x30
 800237c:	4b6b      	ldr	r3, [pc, #428]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	4b67      	ldr	r3, [pc, #412]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4a66      	ldr	r2, [pc, #408]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	@ 0x30
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	4b60      	ldr	r3, [pc, #384]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	4a5f      	ldr	r2, [pc, #380]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b4:	4b5d      	ldr	r3, [pc, #372]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d0:	4b56      	ldr	r3, [pc, #344]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	4b52      	ldr	r3, [pc, #328]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	4a51      	ldr	r2, [pc, #324]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ec:	4b4f      	ldr	r3, [pc, #316]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	4a4a      	ldr	r2, [pc, #296]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6313      	str	r3, [r2, #48]	@ 0x30
 8002408:	4b48      	ldr	r3, [pc, #288]	@ (800252c <HAL_LTDC_MspInit+0x234>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002426:	230e      	movs	r3, #14
 8002428:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800242e:	4619      	mov	r1, r3
 8002430:	483f      	ldr	r0, [pc, #252]	@ (8002530 <HAL_LTDC_MspInit+0x238>)
 8002432:	f000 fedb 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002436:	f641 0358 	movw	r3, #6232	@ 0x1858
 800243a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002448:	230e      	movs	r3, #14
 800244a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002450:	4619      	mov	r1, r3
 8002452:	4838      	ldr	r0, [pc, #224]	@ (8002534 <HAL_LTDC_MspInit+0x23c>)
 8002454:	f000 feca 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002458:	2303      	movs	r3, #3
 800245a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002468:	2309      	movs	r3, #9
 800246a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002470:	4619      	mov	r1, r3
 8002472:	4831      	ldr	r0, [pc, #196]	@ (8002538 <HAL_LTDC_MspInit+0x240>)
 8002474:	f000 feba 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002478:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800247c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248a:	230e      	movs	r3, #14
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002492:	4619      	mov	r1, r3
 8002494:	4828      	ldr	r0, [pc, #160]	@ (8002538 <HAL_LTDC_MspInit+0x240>)
 8002496:	f000 fea9 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800249a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800249e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ac:	230e      	movs	r3, #14
 80024ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b4:	4619      	mov	r1, r3
 80024b6:	4821      	ldr	r0, [pc, #132]	@ (800253c <HAL_LTDC_MspInit+0x244>)
 80024b8:	f000 fe98 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80024bc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80024c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ce:	230e      	movs	r3, #14
 80024d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024d6:	4619      	mov	r1, r3
 80024d8:	4819      	ldr	r0, [pc, #100]	@ (8002540 <HAL_LTDC_MspInit+0x248>)
 80024da:	f000 fe87 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80024de:	2348      	movs	r3, #72	@ 0x48
 80024e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ee:	230e      	movs	r3, #14
 80024f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024f6:	4619      	mov	r1, r3
 80024f8:	4812      	ldr	r0, [pc, #72]	@ (8002544 <HAL_LTDC_MspInit+0x24c>)
 80024fa:	f000 fe77 	bl	80031ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002510:	2309      	movs	r3, #9
 8002512:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002518:	4619      	mov	r1, r3
 800251a:	4808      	ldr	r0, [pc, #32]	@ (800253c <HAL_LTDC_MspInit+0x244>)
 800251c:	f000 fe66 	bl	80031ec <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002520:	bf00      	nop
 8002522:	3768      	adds	r7, #104	@ 0x68
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40016800 	.word	0x40016800
 800252c:	40023800 	.word	0x40023800
 8002530:	40021400 	.word	0x40021400
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40021800 	.word	0x40021800
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00

08002548 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0b      	ldr	r2, [pc, #44]	@ (8002584 <HAL_RNG_MspInit+0x3c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10d      	bne.n	8002576 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_RNG_MspInit+0x40>)
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_RNG_MspInit+0x40>)
 8002564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002568:	6353      	str	r3, [r2, #52]	@ 0x34
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_RNG_MspInit+0x40>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	50060800 	.word	0x50060800
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <HAL_SPI_MspInit+0x84>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12c      	bne.n	8002608 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025d4:	f043 0320 	orr.w	r3, r3, #32
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <HAL_SPI_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80025e6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025f8:	2305      	movs	r3, #5
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <HAL_SPI_MspInit+0x8c>)
 8002604:	f000 fdf2 	bl	80031ec <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	@ 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40015000 	.word	0x40015000
 8002614:	40023800 	.word	0x40023800
 8002618:	40021400 	.word	0x40021400

0800261c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <HAL_SPI_MspDeInit+0x30>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10a      	bne.n	8002644 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_SPI_MspDeInit+0x34>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_SPI_MspDeInit+0x34>)
 8002634:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800263a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <HAL_SPI_MspDeInit+0x38>)
 8002640:	f000 ff80 	bl	8003544 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40015000 	.word	0x40015000
 8002650:	40023800 	.word	0x40023800
 8002654:	40021400 	.word	0x40021400

08002658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_TIM_Base_MspInit+0x3c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_TIM_Base_MspInit+0x3c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_TIM_Base_MspInit+0x3c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <NMI_Handler+0x4>

080026a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <MemManage_Handler+0x4>

080026b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <UsageFault_Handler+0x4>

080026c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ee:	f000 fc27 	bl	8002f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f001 f848 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <TIM2_IRQHandler+0x10>)
 800270a:	f003 fdad 	bl	8006268 <HAL_TIM_IRQHandler>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20025b38 	.word	0x20025b38

08002718 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800271e:	f000 f9cd 	bl	8002abc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002722:	f000 f98d 	bl	8002a40 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002726:	2202      	movs	r2, #2
 8002728:	2103      	movs	r1, #3
 800272a:	2082      	movs	r0, #130	@ 0x82
 800272c:	f000 fa1a 	bl	8002b64 <I2C3_Write>
    HAL_Delay(5);
 8002730:	2005      	movs	r0, #5
 8002732:	f000 fc25 	bl	8002f80 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002736:	2200      	movs	r2, #0
 8002738:	2103      	movs	r1, #3
 800273a:	2082      	movs	r0, #130	@ 0x82
 800273c:	f000 fa12 	bl	8002b64 <I2C3_Write>
    HAL_Delay(2);
 8002740:	2002      	movs	r0, #2
 8002742:	f000 fc1d 	bl	8002f80 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002746:	1cba      	adds	r2, r7, #2
 8002748:	2302      	movs	r3, #2
 800274a:	2100      	movs	r1, #0
 800274c:	2082      	movs	r0, #130	@ 0x82
 800274e:	f000 fa59 	bl	8002c04 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29a      	uxth	r2, r3
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4313      	orrs	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	f640 0211 	movw	r2, #2065	@ 0x811
 800276a:	4293      	cmp	r3, r2
 800276c:	d001      	beq.n	8002772 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800276e:	2303      	movs	r3, #3
 8002770:	e075      	b.n	800285e <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002772:	2202      	movs	r2, #2
 8002774:	2103      	movs	r1, #3
 8002776:	2082      	movs	r0, #130	@ 0x82
 8002778:	f000 f9f4 	bl	8002b64 <I2C3_Write>
    HAL_Delay(5);
 800277c:	2005      	movs	r0, #5
 800277e:	f000 fbff 	bl	8002f80 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002782:	2200      	movs	r2, #0
 8002784:	2103      	movs	r1, #3
 8002786:	2082      	movs	r0, #130	@ 0x82
 8002788:	f000 f9ec 	bl	8002b64 <I2C3_Write>
    HAL_Delay(2);
 800278c:	2002      	movs	r0, #2
 800278e:	f000 fbf7 	bl	8002f80 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002792:	2004      	movs	r0, #4
 8002794:	f000 f867 	bl	8002866 <STMPE811_Read>
 8002798:	4603      	mov	r3, r0
 800279a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800279c:	797b      	ldrb	r3, [r7, #5]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80027a4:	797b      	ldrb	r3, [r7, #5]
 80027a6:	461a      	mov	r2, r3
 80027a8:	2104      	movs	r1, #4
 80027aa:	2082      	movs	r0, #130	@ 0x82
 80027ac:	f000 f9da 	bl	8002b64 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80027b0:	2004      	movs	r0, #4
 80027b2:	f000 f858 	bl	8002866 <STMPE811_Read>
 80027b6:	4603      	mov	r3, r0
 80027b8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80027ba:	797b      	ldrb	r3, [r7, #5]
 80027bc:	f023 0302 	bic.w	r3, r3, #2
 80027c0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80027c2:	797b      	ldrb	r3, [r7, #5]
 80027c4:	461a      	mov	r2, r3
 80027c6:	2104      	movs	r1, #4
 80027c8:	2082      	movs	r0, #130	@ 0x82
 80027ca:	f000 f9cb 	bl	8002b64 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80027ce:	2249      	movs	r2, #73	@ 0x49
 80027d0:	2120      	movs	r1, #32
 80027d2:	2082      	movs	r0, #130	@ 0x82
 80027d4:	f000 f9c6 	bl	8002b64 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80027d8:	2002      	movs	r0, #2
 80027da:	f000 fbd1 	bl	8002f80 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80027de:	2201      	movs	r2, #1
 80027e0:	2121      	movs	r1, #33	@ 0x21
 80027e2:	2082      	movs	r0, #130	@ 0x82
 80027e4:	f000 f9be 	bl	8002b64 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80027e8:	2017      	movs	r0, #23
 80027ea:	f000 f83c 	bl	8002866 <STMPE811_Read>
 80027ee:	4603      	mov	r3, r0
 80027f0:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	f043 031e 	orr.w	r3, r3, #30
 80027f8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80027fa:	797b      	ldrb	r3, [r7, #5]
 80027fc:	461a      	mov	r2, r3
 80027fe:	2117      	movs	r1, #23
 8002800:	2082      	movs	r0, #130	@ 0x82
 8002802:	f000 f9af 	bl	8002b64 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002806:	229a      	movs	r2, #154	@ 0x9a
 8002808:	2141      	movs	r1, #65	@ 0x41
 800280a:	2082      	movs	r0, #130	@ 0x82
 800280c:	f000 f9aa 	bl	8002b64 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002810:	2201      	movs	r2, #1
 8002812:	214a      	movs	r1, #74	@ 0x4a
 8002814:	2082      	movs	r0, #130	@ 0x82
 8002816:	f000 f9a5 	bl	8002b64 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800281a:	2201      	movs	r2, #1
 800281c:	214b      	movs	r1, #75	@ 0x4b
 800281e:	2082      	movs	r0, #130	@ 0x82
 8002820:	f000 f9a0 	bl	8002b64 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002824:	2200      	movs	r2, #0
 8002826:	214b      	movs	r1, #75	@ 0x4b
 8002828:	2082      	movs	r0, #130	@ 0x82
 800282a:	f000 f99b 	bl	8002b64 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800282e:	2201      	movs	r2, #1
 8002830:	2156      	movs	r1, #86	@ 0x56
 8002832:	2082      	movs	r0, #130	@ 0x82
 8002834:	f000 f996 	bl	8002b64 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002838:	2201      	movs	r2, #1
 800283a:	2158      	movs	r1, #88	@ 0x58
 800283c:	2082      	movs	r0, #130	@ 0x82
 800283e:	f000 f991 	bl	8002b64 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002842:	2203      	movs	r2, #3
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	2082      	movs	r0, #130	@ 0x82
 8002848:	f000 f98c 	bl	8002b64 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800284c:	22ff      	movs	r2, #255	@ 0xff
 800284e:	210b      	movs	r1, #11
 8002850:	2082      	movs	r0, #130	@ 0x82
 8002852:	f000 f987 	bl	8002b64 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002856:	20c8      	movs	r0, #200	@ 0xc8
 8002858:	f000 fb92 	bl	8002f80 <HAL_Delay>

    return STMPE811_State_Ok;
 800285c:	2302      	movs	r3, #2

}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002870:	f107 020f 	add.w	r2, r7, #15
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4619      	mov	r1, r3
 8002878:	2082      	movs	r0, #130	@ 0x82
 800287a:	f000 f99d 	bl	8002bb8 <I2C3_Read>

    return readData;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	791a      	ldrb	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002898:	2040      	movs	r0, #64	@ 0x40
 800289a:	f7ff ffe4 	bl	8002866 <STMPE811_Read>
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0e      	blt.n	80028c8 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80028b0:	2201      	movs	r2, #1
 80028b2:	214b      	movs	r1, #75	@ 0x4b
 80028b4:	2082      	movs	r0, #130	@ 0x82
 80028b6:	f000 f955 	bl	8002b64 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80028ba:	2200      	movs	r2, #0
 80028bc:	214b      	movs	r1, #75	@ 0x4b
 80028be:	2082      	movs	r0, #130	@ 0x82
 80028c0:	f000 f950 	bl	8002b64 <I2C3_Write>

        return STMPE811_State_Released;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a7      	b.n	8002a18 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	799b      	ldrb	r3, [r3, #6]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d117      	bne.n	8002900 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f9b7 	bl	8002c48 <TM_STMPE811_ReadX>
 80028da:	4603      	mov	r3, r0
 80028dc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	885b      	ldrh	r3, [r3, #2]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fa0a 	bl	8002d04 <TM_STMPE811_ReadY>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80028f6:	3301      	adds	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	805a      	strh	r2, [r3, #2]
 80028fe:	e048      	b.n	8002992 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	799b      	ldrb	r3, [r3, #6]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d112      	bne.n	800292e <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f99b 	bl	8002c48 <TM_STMPE811_ReadX>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f9f0 	bl	8002d04 <TM_STMPE811_ReadY>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	805a      	strh	r2, [r3, #2]
 800292c:	e031      	b.n	8002992 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	799b      	ldrb	r3, [r3, #6]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d115      	bne.n	8002962 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	885b      	ldrh	r3, [r3, #2]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f984 	bl	8002c48 <TM_STMPE811_ReadX>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f9d9 	bl	8002d04 <TM_STMPE811_ReadY>
 8002952:	4603      	mov	r3, r0
 8002954:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002958:	3301      	adds	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e017      	b.n	8002992 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	799b      	ldrb	r3, [r3, #6]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d113      	bne.n	8002992 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f96a 	bl	8002c48 <TM_STMPE811_ReadX>
 8002974:	4603      	mov	r3, r0
 8002976:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f9bd 	bl	8002d04 <TM_STMPE811_ReadY>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002992:	2201      	movs	r2, #1
 8002994:	214b      	movs	r1, #75	@ 0x4b
 8002996:	2082      	movs	r0, #130	@ 0x82
 8002998:	f000 f8e4 	bl	8002b64 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800299c:	2200      	movs	r2, #0
 800299e:	214b      	movs	r1, #75	@ 0x4b
 80029a0:	2082      	movs	r0, #130	@ 0x82
 80029a2:	f000 f8df 	bl	8002b64 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	799b      	ldrb	r3, [r3, #6]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <STMPE811_ReadTouch+0x12e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	799b      	ldrb	r3, [r3, #6]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d115      	bne.n	80029e2 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d027      	beq.n	8002a0e <STMPE811_ReadTouch+0x186>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	2bee      	cmp	r3, #238	@ 0xee
 80029c4:	d823      	bhi.n	8002a0e <STMPE811_ReadTouch+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	885b      	ldrh	r3, [r3, #2]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01f      	beq.n	8002a0e <STMPE811_ReadTouch+0x186>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	885b      	ldrh	r3, [r3, #2]
 80029d2:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80029d6:	d81a      	bhi.n	8002a0e <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80029de:	2300      	movs	r3, #0
 80029e0:	e01a      	b.n	8002a18 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <STMPE811_ReadTouch+0x188>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80029f2:	d80d      	bhi.n	8002a10 <STMPE811_ReadTouch+0x188>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	885b      	ldrh	r3, [r3, #2]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <STMPE811_ReadTouch+0x188>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	885b      	ldrh	r3, [r3, #2]
 8002a00:	2bee      	cmp	r3, #238	@ 0xee
 8002a02:	d805      	bhi.n	8002a10 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e004      	b.n	8002a18 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002a0e:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20025c0c 	.word	0x20025c0c

08002a40 <I2C3_Init>:

static void I2C3_Init()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <I2C3_Init+0x6c>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <I2C3_Init+0x6c>)
 8002a50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <I2C3_Init+0x6c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002a62:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a64:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <I2C3_Init+0x74>)
 8002a66:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a6a:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <I2C3_Init+0x78>)
 8002a6c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002a74:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a80:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002a8e:	4808      	ldr	r0, [pc, #32]	@ (8002ab0 <I2C3_Init+0x70>)
 8002a90:	f000 fe96 	bl	80037c0 <HAL_I2C_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <I2C3_Init+0x5e>
    }
    return;
 8002aa2:	bf00      	nop
}
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	20025bb8 	.word	0x20025bb8
 8002ab4:	40005c00 	.word	0x40005c00
 8002ab8:	000186a0 	.word	0x000186a0

08002abc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <I2C3_MspInit+0x9c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b10:	2312      	movs	r3, #18
 8002b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4619      	mov	r1, r3
 8002b26:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <I2C3_MspInit+0xa0>)
 8002b28:	f000 fb60 	bl	80031ec <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b32:	2312      	movs	r3, #18
 8002b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <I2C3_MspInit+0xa4>)
 8002b4a:	f000 fb4f 	bl	80031ec <HAL_GPIO_Init>
    
}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020000 	.word	0x40020000

08002b64 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	717b      	strb	r3, [r7, #5]
 8002b72:	4613      	mov	r3, r2
 8002b74:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002b76:	793b      	ldrb	r3, [r7, #4]
 8002b78:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	88f9      	ldrh	r1, [r7, #6]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <I2C3_Write+0x48>)
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	2301      	movs	r3, #1
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f107 030f 	add.w	r3, r7, #15
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <I2C3_Write+0x4c>)
 8002b92:	f000 ff59 	bl	8003a48 <HAL_I2C_Mem_Write>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <I2C3_Write+0x50>)
 8002b9c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002b9e:	f7ff ff3f 	bl	8002a20 <verifyHAL_I2C_IS_OKAY>
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0003d090 	.word	0x0003d090
 8002bb0:	20025bb8 	.word	0x20025bb8
 8002bb4:	20025c0c 	.word	0x20025c0c

08002bb8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af04      	add	r7, sp, #16
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	603a      	str	r2, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	b299      	uxth	r1, r3
 8002bcc:	79bb      	ldrb	r3, [r7, #6]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <I2C3_Read+0x40>)
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	4807      	ldr	r0, [pc, #28]	@ (8002bfc <I2C3_Read+0x44>)
 8002be0:	f001 f82c 	bl	8003c3c <HAL_I2C_Mem_Read>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <I2C3_Read+0x48>)
 8002bea:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002bec:	f7ff ff18 	bl	8002a20 <verifyHAL_I2C_IS_OKAY>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	0003d090 	.word	0x0003d090
 8002bfc:	20025bb8 	.word	0x20025bb8
 8002c00:	20025c0c 	.word	0x20025c0c

08002c04 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	603a      	str	r2, [r7, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
 8002c12:	460b      	mov	r3, r1
 8002c14:	71bb      	strb	r3, [r7, #6]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <I2C3_MulitByteRead+0x3c>)
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4804      	ldr	r0, [pc, #16]	@ (8002c44 <I2C3_MulitByteRead+0x40>)
 8002c32:	f001 f803 	bl	8003c3c <HAL_I2C_Mem_Read>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0003d090 	.word	0x0003d090
 8002c44:	20025bb8 	.word	0x20025bb8

08002c48 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002c52:	204d      	movs	r0, #77	@ 0x4d
 8002c54:	f7ff fe07 	bl	8002866 <STMPE811_Read>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002c5c:	204e      	movs	r0, #78	@ 0x4e
 8002c5e:	f7ff fe02 	bl	8002866 <STMPE811_Read>
 8002c62:	4603      	mov	r3, r0
 8002c64:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002c66:	7a7b      	ldrb	r3, [r7, #9]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	7a3b      	ldrb	r3, [r7, #8]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002c74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c78:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	dc06      	bgt.n	8002c8e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002c86:	330c      	adds	r3, #12
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	81fb      	strh	r3, [r7, #14]
 8002c8c:	e005      	b.n	8002c9a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002c8e:	89fb      	ldrh	r3, [r7, #14]
 8002c90:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002c94:	3308      	adds	r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	@ (8002d00 <TM_STMPE811_ReadX+0xb8>)
 8002ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ca4:	441a      	add	r2, r3
 8002ca6:	10d2      	asrs	r2, r2, #3
 8002ca8:	17db      	asrs	r3, r3, #31
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cb2:	2bef      	cmp	r3, #239	@ 0xef
 8002cb4:	dd02      	ble.n	8002cbc <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002cb6:	23ef      	movs	r3, #239	@ 0xef
 8002cb8:	81fb      	strh	r3, [r7, #14]
 8002cba:	e005      	b.n	8002cc8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da01      	bge.n	8002cc8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002cc8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dd05      	ble.n	8002cde <TM_STMPE811_ReadX+0x96>
 8002cd2:	89fa      	ldrh	r2, [r7, #14]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	e004      	b.n	8002ce8 <TM_STMPE811_ReadX+0xa0>
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	dd01      	ble.n	8002cf6 <TM_STMPE811_ReadX+0xae>
        return val;
 8002cf2:	89fb      	ldrh	r3, [r7, #14]
 8002cf4:	e000      	b.n	8002cf8 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	88888889 	.word	0x88888889

08002d04 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002d0e:	204f      	movs	r0, #79	@ 0x4f
 8002d10:	f7ff fda9 	bl	8002866 <STMPE811_Read>
 8002d14:	4603      	mov	r3, r0
 8002d16:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002d18:	2050      	movs	r0, #80	@ 0x50
 8002d1a:	f7ff fda4 	bl	8002866 <STMPE811_Read>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002d22:	7a7b      	ldrb	r3, [r7, #9]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	7a3b      	ldrb	r3, [r7, #8]
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3e:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <TM_STMPE811_ReadY+0xa0>)
 8002d40:	fb82 1203 	smull	r1, r2, r2, r3
 8002d44:	1052      	asrs	r2, r2, #1
 8002d46:	17db      	asrs	r3, r3, #31
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002d4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dc02      	bgt.n	8002d5a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	81fb      	strh	r3, [r7, #14]
 8002d58:	e007      	b.n	8002d6a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d5e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d62:	db02      	blt.n	8002d6a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002d64:	f240 133f 	movw	r3, #319	@ 0x13f
 8002d68:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002d6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dd05      	ble.n	8002d80 <TM_STMPE811_ReadY+0x7c>
 8002d74:	89fa      	ldrh	r2, [r7, #14]
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	e004      	b.n	8002d8a <TM_STMPE811_ReadY+0x86>
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002d8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	dd01      	ble.n	8002d98 <TM_STMPE811_ReadY+0x94>
        return val;
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	e000      	b.n	8002d9a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002d98:	88fb      	ldrh	r3, [r7, #6]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2e8ba2e9 	.word	0x2e8ba2e9

08002da8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f003 fe1c 	bl	8006a24 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	@ (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20030000 	.word	0x20030000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	20025c10 	.word	0x20025c10
 8002e20:	20025d60 	.word	0x20025d60

08002e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <SystemInit+0x20>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <SystemInit+0x20>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e4c:	f7ff ffea 	bl	8002e24 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e50:	480c      	ldr	r0, [pc, #48]	@ (8002e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e52:	490d      	ldr	r1, [pc, #52]	@ (8002e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e54:	4a0d      	ldr	r2, [pc, #52]	@ (8002e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e58:	e002      	b.n	8002e60 <LoopCopyDataInit>

08002e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5e:	3304      	adds	r3, #4

08002e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e64:	d3f9      	bcc.n	8002e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e68:	4c0a      	ldr	r4, [pc, #40]	@ (8002e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e6c:	e001      	b.n	8002e72 <LoopFillZerobss>

08002e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e70:	3204      	adds	r2, #4

08002e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e74:	d3fb      	bcc.n	8002e6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e76:	f003 fddb 	bl	8006a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7a:	f7fe fc89 	bl	8001790 <main>
  bx  lr    
 8002e7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002e8c:	08008e5c 	.word	0x08008e5c
  ldr r2, =_sbss
 8002e90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e94:	20025d60 	.word	0x20025d60

08002e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e98:	e7fe      	b.n	8002e98 <ADC_IRQHandler>
	...

08002e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <HAL_Init+0x40>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <HAL_Init+0x40>)
 8002eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <HAL_Init+0x40>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f94f 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f000 f808 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff f980 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <HAL_InitTick+0x54>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <HAL_InitTick+0x58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f967 	bl	80031d2 <HAL_SYSTICK_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00e      	b.n	8002f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d80a      	bhi.n	8002f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f14:	2200      	movs	r2, #0
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f000 f92f 	bl	800317e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f20:	4a06      	ldr	r2, [pc, #24]	@ (8002f3c <HAL_InitTick+0x5c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000024 	.word	0x20000024
 8002f3c:	20000020 	.word	0x20000020

08002f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_IncTick+0x20>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_IncTick+0x24>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_IncTick+0x24>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000024 	.word	0x20000024
 8002f64:	20025c14 	.word	0x20025c14

08002f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_GetTick+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20025c14 	.word	0x20025c14

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff ffee 	bl	8002f68 <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fa6:	bf00      	nop
 8002fa8:	f7ff ffde 	bl	8002f68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000024 	.word	0x20000024

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	@ (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	@ (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	@ (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff29 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003190:	f7ff ff3e 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	6978      	ldr	r0, [r7, #20]
 800319c:	f7ff ff8e 	bl	80030bc <NVIC_EncodePriority>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff5d 	bl	8003068 <__NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff31 	bl	800302c <__NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffa2 	bl	8003124 <SysTick_Config>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	@ 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e177      	b.n	80034f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	f040 8166 	bne.w	80034f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d005      	beq.n	800323e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323a:	2b02      	cmp	r3, #2
 800323c:	d130      	bne.n	80032a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003274:	2201      	movs	r2, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 0201 	and.w	r2, r3, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d017      	beq.n	80032dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d123      	bne.n	8003330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	08da      	lsrs	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3208      	adds	r2, #8
 80032f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	69b9      	ldr	r1, [r7, #24]
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80c0 	beq.w	80034f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <HAL_GPIO_Init+0x324>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a65      	ldr	r2, [pc, #404]	@ (8003510 <HAL_GPIO_Init+0x324>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b63      	ldr	r3, [pc, #396]	@ (8003510 <HAL_GPIO_Init+0x324>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338e:	4a61      	ldr	r2, [pc, #388]	@ (8003514 <HAL_GPIO_Init+0x328>)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a58      	ldr	r2, [pc, #352]	@ (8003518 <HAL_GPIO_Init+0x32c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d037      	beq.n	800342a <HAL_GPIO_Init+0x23e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a57      	ldr	r2, [pc, #348]	@ (800351c <HAL_GPIO_Init+0x330>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d031      	beq.n	8003426 <HAL_GPIO_Init+0x23a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a56      	ldr	r2, [pc, #344]	@ (8003520 <HAL_GPIO_Init+0x334>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02b      	beq.n	8003422 <HAL_GPIO_Init+0x236>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a55      	ldr	r2, [pc, #340]	@ (8003524 <HAL_GPIO_Init+0x338>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d025      	beq.n	800341e <HAL_GPIO_Init+0x232>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a54      	ldr	r2, [pc, #336]	@ (8003528 <HAL_GPIO_Init+0x33c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <HAL_GPIO_Init+0x22e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a53      	ldr	r2, [pc, #332]	@ (800352c <HAL_GPIO_Init+0x340>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d019      	beq.n	8003416 <HAL_GPIO_Init+0x22a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a52      	ldr	r2, [pc, #328]	@ (8003530 <HAL_GPIO_Init+0x344>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_Init+0x226>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a51      	ldr	r2, [pc, #324]	@ (8003534 <HAL_GPIO_Init+0x348>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00d      	beq.n	800340e <HAL_GPIO_Init+0x222>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a50      	ldr	r2, [pc, #320]	@ (8003538 <HAL_GPIO_Init+0x34c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <HAL_GPIO_Init+0x21e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	@ (800353c <HAL_GPIO_Init+0x350>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_GPIO_Init+0x21a>
 8003402:	2309      	movs	r3, #9
 8003404:	e012      	b.n	800342c <HAL_GPIO_Init+0x240>
 8003406:	230a      	movs	r3, #10
 8003408:	e010      	b.n	800342c <HAL_GPIO_Init+0x240>
 800340a:	2308      	movs	r3, #8
 800340c:	e00e      	b.n	800342c <HAL_GPIO_Init+0x240>
 800340e:	2307      	movs	r3, #7
 8003410:	e00c      	b.n	800342c <HAL_GPIO_Init+0x240>
 8003412:	2306      	movs	r3, #6
 8003414:	e00a      	b.n	800342c <HAL_GPIO_Init+0x240>
 8003416:	2305      	movs	r3, #5
 8003418:	e008      	b.n	800342c <HAL_GPIO_Init+0x240>
 800341a:	2304      	movs	r3, #4
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x240>
 800341e:	2303      	movs	r3, #3
 8003420:	e004      	b.n	800342c <HAL_GPIO_Init+0x240>
 8003422:	2302      	movs	r3, #2
 8003424:	e002      	b.n	800342c <HAL_GPIO_Init+0x240>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_GPIO_Init+0x240>
 800342a:	2300      	movs	r3, #0
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f002 0203 	and.w	r2, r2, #3
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	4093      	lsls	r3, r2
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800343c:	4935      	ldr	r1, [pc, #212]	@ (8003514 <HAL_GPIO_Init+0x328>)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344a:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_GPIO_Init+0x354>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346e:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_GPIO_Init+0x354>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003474:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_GPIO_Init+0x354>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003498:	4a29      	ldr	r2, [pc, #164]	@ (8003540 <HAL_GPIO_Init+0x354>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_GPIO_Init+0x354>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_GPIO_Init+0x354>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <HAL_GPIO_Init+0x354>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ec:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <HAL_GPIO_Init+0x354>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	f67f ae84 	bls.w	8003208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3724      	adds	r7, #36	@ 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	40013800 	.word	0x40013800
 8003518:	40020000 	.word	0x40020000
 800351c:	40020400 	.word	0x40020400
 8003520:	40020800 	.word	0x40020800
 8003524:	40020c00 	.word	0x40020c00
 8003528:	40021000 	.word	0x40021000
 800352c:	40021400 	.word	0x40021400
 8003530:	40021800 	.word	0x40021800
 8003534:	40021c00 	.word	0x40021c00
 8003538:	40022000 	.word	0x40022000
 800353c:	40022400 	.word	0x40022400
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e0d9      	b.n	8003714 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003560:	2201      	movs	r2, #1
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	f040 80c9 	bne.w	800370e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800357c:	4a6b      	ldr	r2, [pc, #428]	@ (800372c <HAL_GPIO_DeInit+0x1e8>)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a63      	ldr	r2, [pc, #396]	@ (8003730 <HAL_GPIO_DeInit+0x1ec>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d037      	beq.n	8003616 <HAL_GPIO_DeInit+0xd2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a62      	ldr	r2, [pc, #392]	@ (8003734 <HAL_GPIO_DeInit+0x1f0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_GPIO_DeInit+0xce>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a61      	ldr	r2, [pc, #388]	@ (8003738 <HAL_GPIO_DeInit+0x1f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <HAL_GPIO_DeInit+0xca>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_GPIO_DeInit+0x1f8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d025      	beq.n	800360a <HAL_GPIO_DeInit+0xc6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003740 <HAL_GPIO_DeInit+0x1fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <HAL_GPIO_DeInit+0xc2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003744 <HAL_GPIO_DeInit+0x200>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d019      	beq.n	8003602 <HAL_GPIO_DeInit+0xbe>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003748 <HAL_GPIO_DeInit+0x204>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_DeInit+0xba>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a5c      	ldr	r2, [pc, #368]	@ (800374c <HAL_GPIO_DeInit+0x208>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_DeInit+0xb6>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003750 <HAL_GPIO_DeInit+0x20c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_DeInit+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003754 <HAL_GPIO_DeInit+0x210>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_DeInit+0xae>
 80035ee:	2309      	movs	r3, #9
 80035f0:	e012      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 80035f2:	230a      	movs	r3, #10
 80035f4:	e010      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 80035f6:	2308      	movs	r3, #8
 80035f8:	e00e      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 80035fa:	2307      	movs	r3, #7
 80035fc:	e00c      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 80035fe:	2306      	movs	r3, #6
 8003600:	e00a      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 8003602:	2305      	movs	r3, #5
 8003604:	e008      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 8003606:	2304      	movs	r3, #4
 8003608:	e006      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 800360a:	2303      	movs	r3, #3
 800360c:	e004      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 800360e:	2302      	movs	r3, #2
 8003610:	e002      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_GPIO_DeInit+0xd4>
 8003616:	2300      	movs	r3, #0
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	f002 0203 	and.w	r2, r2, #3
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	4093      	lsls	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d132      	bne.n	800368e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003628:	4b4b      	ldr	r3, [pc, #300]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43db      	mvns	r3, r3
 8003630:	4949      	ldr	r1, [pc, #292]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 8003632:	4013      	ands	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003636:	4b48      	ldr	r3, [pc, #288]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43db      	mvns	r3, r3
 800363e:	4946      	ldr	r1, [pc, #280]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 8003640:	4013      	ands	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003644:	4b44      	ldr	r3, [pc, #272]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	4942      	ldr	r1, [pc, #264]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 800364e:	4013      	ands	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003652:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	493f      	ldr	r1, [pc, #252]	@ (8003758 <HAL_GPIO_DeInit+0x214>)
 800365c:	4013      	ands	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003670:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <HAL_GPIO_DeInit+0x1e8>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	43da      	mvns	r2, r3
 8003680:	482a      	ldr	r0, [pc, #168]	@ (800372c <HAL_GPIO_DeInit+0x1e8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	400a      	ands	r2, r1
 8003688:	3302      	adds	r3, #2
 800368a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2103      	movs	r1, #3
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	08d2      	lsrs	r2, r2, #3
 80036c4:	4019      	ands	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2103      	movs	r1, #3
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	2101      	movs	r1, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2103      	movs	r1, #3
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	401a      	ands	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	f67f af22 	bls.w	8003560 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40013800 	.word	0x40013800
 8003730:	40020000 	.word	0x40020000
 8003734:	40020400 	.word	0x40020400
 8003738:	40020800 	.word	0x40020800
 800373c:	40020c00 	.word	0x40020c00
 8003740:	40021000 	.word	0x40021000
 8003744:	40021400 	.word	0x40021400
 8003748:	40021800 	.word	0x40021800
 800374c:	40021c00 	.word	0x40021c00
 8003750:	40022000 	.word	0x40022000
 8003754:	40022400 	.word	0x40022400
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800379a:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fc90 	bl	80020d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e12b      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fd1c 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003824:	f001 ff82 	bl	800572c <HAL_RCC_GetPCLK1Freq>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a81      	ldr	r2, [pc, #516]	@ (8003a34 <HAL_I2C_Init+0x274>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d807      	bhi.n	8003844 <HAL_I2C_Init+0x84>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a80      	ldr	r2, [pc, #512]	@ (8003a38 <HAL_I2C_Init+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e006      	b.n	8003852 <HAL_I2C_Init+0x92>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a7d      	ldr	r2, [pc, #500]	@ (8003a3c <HAL_I2C_Init+0x27c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0e7      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a78      	ldr	r2, [pc, #480]	@ (8003a40 <HAL_I2C_Init+0x280>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0c9b      	lsrs	r3, r3, #18
 8003864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <HAL_I2C_Init+0x274>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <HAL_I2C_Init+0xd4>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	e009      	b.n	80038a8 <HAL_I2C_Init+0xe8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	4a69      	ldr	r2, [pc, #420]	@ (8003a44 <HAL_I2C_Init+0x284>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	3301      	adds	r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	495c      	ldr	r1, [pc, #368]	@ (8003a34 <HAL_I2C_Init+0x274>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d819      	bhi.n	80038fc <HAL_I2C_Init+0x13c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e59      	subs	r1, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d6:	1c59      	adds	r1, r3, #1
 80038d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038dc:	400b      	ands	r3, r1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_I2C_Init+0x138>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e59      	subs	r1, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	e051      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e04f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <HAL_I2C_Init+0x168>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e012      	b.n	800394e <HAL_I2C_Init+0x18e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x196>
 8003952:	2301      	movs	r3, #1
 8003954:	e022      	b.n	800399c <HAL_I2C_Init+0x1dc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_I2C_Init+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e58      	subs	r0, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	440b      	add	r3, r1
 800396c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397a:	e00f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	000186a0 	.word	0x000186a0
 8003a38:	001e847f 	.word	0x001e847f
 8003a3c:	003d08ff 	.word	0x003d08ff
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a62:	f7ff fa81 	bl	8002f68 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	f040 80d9 	bne.w	8003c28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2319      	movs	r3, #25
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	496d      	ldr	r1, [pc, #436]	@ (8003c34 <HAL_I2C_Mem_Write+0x1ec>)
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fc8b 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0cc      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Mem_Write+0x56>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e0c5      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d007      	beq.n	8003ac4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2221      	movs	r2, #33	@ 0x21
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2240      	movs	r2, #64	@ 0x40
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a4d      	ldr	r2, [pc, #308]	@ (8003c38 <HAL_I2C_Mem_Write+0x1f0>)
 8003b04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b06:	88f8      	ldrh	r0, [r7, #6]
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4603      	mov	r3, r0
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fac2 	bl	80040a0 <I2C_RequestMemoryWrite>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d052      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e081      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fd50 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_I2C_Mem_Write+0x180>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1aa      	bne.n	8003b26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fd43 	bl	8004660 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d107      	bne.n	8003bf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e016      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00100002 	.word	0x00100002
 8003c38:	ffff0000 	.word	0xffff0000

08003c3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	@ 0x30
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7ff f987 	bl	8002f68 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 8214 	bne.w	8004092 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2319      	movs	r3, #25
 8003c70:	2201      	movs	r2, #1
 8003c72:	497b      	ldr	r1, [pc, #492]	@ (8003e60 <HAL_I2C_Mem_Read+0x224>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fb91 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e207      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x56>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e200      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	@ 0x22
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e64 <HAL_I2C_Mem_Read+0x228>)
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfa:	88f8      	ldrh	r0, [r7, #6]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa5e 	bl	80041cc <I2C_RequestMemoryRead>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1bc      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e190      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d11b      	bne.n	8003d8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e170      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d11b      	bne.n	8003dca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	e150      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003de0:	e144      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	f200 80f1 	bhi.w	8003fce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d123      	bne.n	8003e3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fc79 	bl	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e145      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e3a:	e117      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d14e      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4906      	ldr	r1, [pc, #24]	@ (8003e68 <HAL_I2C_Mem_Read+0x22c>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 faa4 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e11a      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
 8003e5e:	bf00      	nop
 8003e60:	00100002 	.word	0x00100002
 8003e64:	ffff0000 	.word	0xffff0000
 8003e68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee0:	e0c4      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	2200      	movs	r2, #0
 8003eea:	496c      	ldr	r1, [pc, #432]	@ (800409c <HAL_I2C_Mem_Read+0x460>)
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fa55 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0cb      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f44:	2200      	movs	r2, #0
 8003f46:	4955      	ldr	r1, [pc, #340]	@ (800409c <HAL_I2C_Mem_Read+0x460>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fa27 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e09d      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fcc:	e04e      	b.n	800406c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fb8c 	bl	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e058      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d124      	bne.n	800406c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004038:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f aeb6 	bne.w	8003de2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3728      	adds	r7, #40	@ 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	00010004 	.word	0x00010004

080040a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f960 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f0:	d103      	bne.n	80040fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e05f      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800410c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	492d      	ldr	r1, [pc, #180]	@ (80041c8 <I2C_RequestMemoryWrite+0x128>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f9bb 	bl	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04c      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa46 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02b      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	e021      	b.n	80041bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa20 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e005      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	00010002 	.word	0x00010002

080041cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f8c2 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	d103      	bne.n	8004236 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0aa      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	4952      	ldr	r1, [pc, #328]	@ (8004398 <I2C_RequestMemoryRead+0x1cc>)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f91d 	bl	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e097      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f9a8 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e076      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e021      	b.n	80042f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b4:	893b      	ldrh	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f982 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e050      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f967 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e035      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004332:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f82b 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435a:	d103      	bne.n	8004364 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e013      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004368:	897b      	ldrh	r3, [r7, #10]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	4906      	ldr	r1, [pc, #24]	@ (8004398 <I2C_RequestMemoryRead+0x1cc>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f886 	bl	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010002 	.word	0x00010002

0800439c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ac:	e048      	b.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d044      	beq.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe fdd7 	bl	8002f68 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d139      	bne.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10d      	bne.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	e00c      	b.n	800440c <I2C_WaitOnFlagUntilTimeout+0x70>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d116      	bne.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e023      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <I2C_WaitOnFlagUntilTimeout+0xca>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	e00c      	b.n	8004480 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d093      	beq.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449e:	e071      	b.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d123      	bne.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e067      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d041      	beq.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fe fd32 	bl	8002f68 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d136      	bne.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10c      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e00b      	b.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e021      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10c      	bne.n	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	43da      	mvns	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e00b      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f af6d 	bne.w	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8e3 	bl	80047aa <I2C_IsAcknowledgeFailed>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e034      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d028      	beq.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fe fcb7 	bl	8002f68 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11d      	bne.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	d016      	beq.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e007      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d1c3      	bne.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f89b 	bl	80047aa <I2C_IsAcknowledgeFailed>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d028      	beq.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe fc6f 	bl	8002f68 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d016      	beq.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d1c3      	bne.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046fc:	e049      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d119      	bne.n	8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e030      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fe fc12 	bl	8002f68 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11d      	bne.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d016      	beq.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e007      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d1ae      	bne.n	80046fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c0:	d11b      	bne.n	80047fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	d129      	bne.n	8004872 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2224      	movs	r2, #36	@ 0x24
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0210 	bic.w	r2, r2, #16
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b20      	cmp	r3, #32
 8004898:	d12a      	bne.n	80048f0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2224      	movs	r2, #36	@ 0x24
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	f023 030f 	bic.w	r3, r3, #15
 80048c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	89fa      	ldrh	r2, [r7, #14]
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0bf      	b.n	8004a92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd fce6 	bl	80022f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004942:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6999      	ldr	r1, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004958:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6899      	ldr	r1, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b4a      	ldr	r3, [pc, #296]	@ (8004a9c <HAL_LTDC_Init+0x19c>)
 8004974:	400b      	ands	r3, r1
 8004976:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68d9      	ldr	r1, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_LTDC_Init+0x19c>)
 80049a2:	400b      	ands	r3, r1
 80049a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68d9      	ldr	r1, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6919      	ldr	r1, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <HAL_LTDC_Init+0x19c>)
 80049d0:	400b      	ands	r3, r1
 80049d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6919      	ldr	r1, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6959      	ldr	r1, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_LTDC_Init+0x19c>)
 80049fe:	400b      	ands	r3, r1
 8004a00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004a30:	041b      	lsls	r3, r3, #16
 8004a32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0206 	orr.w	r2, r2, #6
 8004a6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	f000f800 	.word	0xf000f800

08004aa0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_LTDC_ConfigLayer+0x1a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e02c      	b.n	8004b14 <HAL_LTDC_ConfigLayer+0x74>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2134      	movs	r1, #52	@ 0x34
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f811 	bl	8004b1c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bdb0      	pop	{r4, r5, r7, pc}

08004b1c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	@ 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	4413      	add	r3, r2
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	4413      	add	r3, r2
 8004b4a:	3384      	adds	r3, #132	@ 0x84
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	4611      	mov	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	01d2      	lsls	r2, r2, #7
 8004b58:	440a      	add	r2, r1
 8004b5a:	3284      	adds	r2, #132	@ 0x84
 8004b5c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b60:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b72:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b74:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	440b      	add	r3, r1
 8004b82:	3384      	adds	r3, #132	@ 0x84
 8004b84:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b8a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b9a:	4413      	add	r3, r2
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	@ 0x84
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	01d2      	lsls	r2, r2, #7
 8004bba:	440a      	add	r2, r1
 8004bbc:	3284      	adds	r2, #132	@ 0x84
 8004bbe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bc2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd2:	4413      	add	r3, r2
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	440b      	add	r3, r1
 8004be2:	3384      	adds	r3, #132	@ 0x84
 8004be4:	4619      	mov	r1, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	01db      	lsls	r3, r3, #7
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3384      	adds	r3, #132	@ 0x84
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	4611      	mov	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	01d2      	lsls	r2, r2, #7
 8004c06:	440a      	add	r2, r1
 8004c08:	3284      	adds	r2, #132	@ 0x84
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	01db      	lsls	r3, r3, #7
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3384      	adds	r3, #132	@ 0x84
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3384      	adds	r3, #132	@ 0x84
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	01db      	lsls	r3, r3, #7
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3384      	adds	r3, #132	@ 0x84
 8004c60:	461a      	mov	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	440b      	add	r3, r1
 8004c82:	3384      	adds	r3, #132	@ 0x84
 8004c84:	4619      	mov	r1, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	4413      	add	r3, r2
 8004c98:	3384      	adds	r3, #132	@ 0x84
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	01d2      	lsls	r2, r2, #7
 8004ca6:	440a      	add	r2, r1
 8004ca8:	3284      	adds	r2, #132	@ 0x84
 8004caa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	01db      	lsls	r3, r3, #7
 8004cba:	4413      	add	r3, r2
 8004cbc:	3384      	adds	r3, #132	@ 0x84
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	01db      	lsls	r3, r3, #7
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3384      	adds	r3, #132	@ 0x84
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	01d2      	lsls	r2, r2, #7
 8004ce0:	440a      	add	r2, r1
 8004ce2:	3284      	adds	r2, #132	@ 0x84
 8004ce4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	6809      	ldr	r1, [r1, #0]
 8004cfa:	4608      	mov	r0, r1
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	01c9      	lsls	r1, r1, #7
 8004d00:	4401      	add	r1, r0
 8004d02:	3184      	adds	r1, #132	@ 0x84
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	01db      	lsls	r3, r3, #7
 8004d12:	4413      	add	r3, r2
 8004d14:	3384      	adds	r3, #132	@ 0x84
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	4413      	add	r3, r2
 8004d24:	3384      	adds	r3, #132	@ 0x84
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	01db      	lsls	r3, r3, #7
 8004d36:	4413      	add	r3, r2
 8004d38:	3384      	adds	r3, #132	@ 0x84
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e01b      	b.n	8004d88 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d102      	bne.n	8004d5e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e014      	b.n	8004d88 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00b      	beq.n	8004d7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d007      	beq.n	8004d7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d003      	beq.n	8004d7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d7a:	2b07      	cmp	r3, #7
 8004d7c:	d102      	bne.n	8004d84 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e001      	b.n	8004d88 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d84:	2301      	movs	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	01db      	lsls	r3, r3, #7
 8004d92:	4413      	add	r3, r2
 8004d94:	3384      	adds	r3, #132	@ 0x84
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	01d2      	lsls	r2, r2, #7
 8004da2:	440a      	add	r2, r1
 8004da4:	3284      	adds	r2, #132	@ 0x84
 8004da6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1acb      	subs	r3, r1, r3
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6809      	ldr	r1, [r1, #0]
 8004dce:	4608      	mov	r0, r1
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	01c9      	lsls	r1, r1, #7
 8004dd4:	4401      	add	r1, r0
 8004dd6:	3184      	adds	r1, #132	@ 0x84
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	01db      	lsls	r3, r3, #7
 8004de6:	4413      	add	r3, r2
 8004de8:	3384      	adds	r3, #132	@ 0x84
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	4611      	mov	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	01d2      	lsls	r2, r2, #7
 8004df6:	440a      	add	r2, r1
 8004df8:	3284      	adds	r2, #132	@ 0x84
 8004dfa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	01db      	lsls	r3, r3, #7
 8004e0e:	4413      	add	r3, r2
 8004e10:	3384      	adds	r3, #132	@ 0x84
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	01db      	lsls	r3, r3, #7
 8004e24:	4413      	add	r3, r2
 8004e26:	3384      	adds	r3, #132	@ 0x84
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	4611      	mov	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	01d2      	lsls	r2, r2, #7
 8004e34:	440a      	add	r2, r1
 8004e36:	3284      	adds	r2, #132	@ 0x84
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	3724      	adds	r7, #36	@ 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e267      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d075      	beq.n	8004f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e6a:	4b88      	ldr	r3, [pc, #544]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d00c      	beq.n	8004e90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b85      	ldr	r3, [pc, #532]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e82:	4b82      	ldr	r3, [pc, #520]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	4b7e      	ldr	r3, [pc, #504]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x108>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d157      	bne.n	8004f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e242      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x74>
 8004eb2:	4b76      	ldr	r3, [pc, #472]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a75      	ldr	r2, [pc, #468]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e01d      	b.n	8004efc <HAL_RCC_OscConfig+0xb0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x98>
 8004eca:	4b70      	ldr	r3, [pc, #448]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6f      	ldr	r2, [pc, #444]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6c      	ldr	r2, [pc, #432]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0xb0>
 8004ee4:	4b69      	ldr	r3, [pc, #420]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a68      	ldr	r2, [pc, #416]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b66      	ldr	r3, [pc, #408]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a65      	ldr	r2, [pc, #404]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe f830 	bl	8002f68 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fe f82c 	bl	8002f68 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	@ 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e207      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0xc0>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fe f81c 	bl	8002f68 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe f818 	bl	8002f68 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	@ 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1f3      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	4b51      	ldr	r3, [pc, #324]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0xe8>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d063      	beq.n	800502a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f62:	4b4a      	ldr	r3, [pc, #296]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6e:	4b47      	ldr	r3, [pc, #284]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7a:	4b44      	ldr	r3, [pc, #272]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d116      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	4b41      	ldr	r3, [pc, #260]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x152>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e1c7      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4937      	ldr	r1, [pc, #220]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb2:	e03a      	b.n	800502a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbc:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <HAL_RCC_OscConfig+0x244>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fd ffd1 	bl	8002f68 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fca:	f7fd ffcd 	bl	8002f68 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e1a8      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe8:	4b28      	ldr	r3, [pc, #160]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4925      	ldr	r1, [pc, #148]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	e015      	b.n	800502a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <HAL_RCC_OscConfig+0x244>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fd ffb0 	bl	8002f68 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7fd ffac 	bl	8002f68 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e187      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d036      	beq.n	80050a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503e:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <HAL_RCC_OscConfig+0x248>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fd ff90 	bl	8002f68 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504c:	f7fd ff8c 	bl	8002f68 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e167      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCC_OscConfig+0x240>)
 8005060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x200>
 800506a:	e01b      	b.n	80050a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506c:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCC_OscConfig+0x248>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005072:	f7fd ff79 	bl	8002f68 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	e00e      	b.n	8005098 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507a:	f7fd ff75 	bl	8002f68 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d907      	bls.n	8005098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e150      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
 800508c:	40023800 	.word	0x40023800
 8005090:	42470000 	.word	0x42470000
 8005094:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005098:	4b88      	ldr	r3, [pc, #544]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800509a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ea      	bne.n	800507a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8097 	beq.w	80051e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b81      	ldr	r3, [pc, #516]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	4b7d      	ldr	r3, [pc, #500]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	4a7c      	ldr	r2, [pc, #496]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050d2:	4b7a      	ldr	r3, [pc, #488]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e2:	4b77      	ldr	r3, [pc, #476]	@ (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d118      	bne.n	8005120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ee:	4b74      	ldr	r3, [pc, #464]	@ (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a73      	ldr	r2, [pc, #460]	@ (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fa:	f7fd ff35 	bl	8002f68 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005102:	f7fd ff31 	bl	8002f68 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e10c      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	4b6a      	ldr	r3, [pc, #424]	@ (80052c0 <HAL_RCC_OscConfig+0x474>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <HAL_RCC_OscConfig+0x2ea>
 8005128:	4b64      	ldr	r3, [pc, #400]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	4a63      	ldr	r2, [pc, #396]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	6713      	str	r3, [r2, #112]	@ 0x70
 8005134:	e01c      	b.n	8005170 <HAL_RCC_OscConfig+0x324>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b05      	cmp	r3, #5
 800513c:	d10c      	bne.n	8005158 <HAL_RCC_OscConfig+0x30c>
 800513e:	4b5f      	ldr	r3, [pc, #380]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005142:	4a5e      	ldr	r2, [pc, #376]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 0304 	orr.w	r3, r3, #4
 8005148:	6713      	str	r3, [r2, #112]	@ 0x70
 800514a:	4b5c      	ldr	r3, [pc, #368]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514e:	4a5b      	ldr	r2, [pc, #364]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	@ 0x70
 8005156:	e00b      	b.n	8005170 <HAL_RCC_OscConfig+0x324>
 8005158:	4b58      	ldr	r3, [pc, #352]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515c:	4a57      	ldr	r2, [pc, #348]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	6713      	str	r3, [r2, #112]	@ 0x70
 8005164:	4b55      	ldr	r3, [pc, #340]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a54      	ldr	r2, [pc, #336]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 800516a:	f023 0304 	bic.w	r3, r3, #4
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fd fef6 	bl	8002f68 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fd fef2 	bl	8002f68 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0cb      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	4b49      	ldr	r3, [pc, #292]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0ee      	beq.n	8005180 <HAL_RCC_OscConfig+0x334>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a4:	f7fd fee0 	bl	8002f68 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fd fedc 	bl	8002f68 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e0b5      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	4b3e      	ldr	r3, [pc, #248]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ee      	bne.n	80051ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d4:	4b39      	ldr	r3, [pc, #228]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	4a38      	ldr	r2, [pc, #224]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a1 	beq.w	800532c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ea:	4b34      	ldr	r3, [pc, #208]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d05c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d141      	bne.n	8005282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fe:	4b31      	ldr	r3, [pc, #196]	@ (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005204:	f7fd feb0 	bl	8002f68 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7fd feac 	bl	8002f68 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e087      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	4b27      	ldr	r3, [pc, #156]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	3b01      	subs	r3, #1
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	491b      	ldr	r1, [pc, #108]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005250:	4313      	orrs	r3, r2
 8005252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005254:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fd fe85 	bl	8002f68 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005262:	f7fd fe81 	bl	8002f68 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e05c      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005274:	4b11      	ldr	r3, [pc, #68]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x416>
 8005280:	e054      	b.n	800532c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fd fe6e 	bl	8002f68 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fd fe6a 	bl	8002f68 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e045      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_RCC_OscConfig+0x470>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x444>
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e038      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40007000 	.word	0x40007000
 80052c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <HAL_RCC_OscConfig+0x4ec>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d028      	beq.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d121      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d11a      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005300:	4293      	cmp	r3, r2
 8005302:	d111      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	3b01      	subs	r3, #1
 8005312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0cc      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b68      	ldr	r3, [pc, #416]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d90c      	bls.n	8005378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b65      	ldr	r3, [pc, #404]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b63      	ldr	r3, [pc, #396]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0b8      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005390:	4b59      	ldr	r3, [pc, #356]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a58      	ldr	r2, [pc, #352]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800539a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a8:	4b53      	ldr	r3, [pc, #332]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a52      	ldr	r2, [pc, #328]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b50      	ldr	r3, [pc, #320]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	494d      	ldr	r1, [pc, #308]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d044      	beq.n	800545c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b47      	ldr	r3, [pc, #284]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d119      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fa:	4b3f      	ldr	r3, [pc, #252]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e06f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540a:	4b3b      	ldr	r3, [pc, #236]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e067      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541a:	4b37      	ldr	r3, [pc, #220]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4934      	ldr	r1, [pc, #208]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800542c:	f7fd fd9c 	bl	8002f68 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	e00a      	b.n	800544a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fd fd98 	bl	8002f68 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e04f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	4b2b      	ldr	r3, [pc, #172]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 020c 	and.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d1eb      	bne.n	8005434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545c:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d20c      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b22      	ldr	r3, [pc, #136]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b20      	ldr	r3, [pc, #128]	@ (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e032      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4916      	ldr	r1, [pc, #88]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ae:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	490e      	ldr	r1, [pc, #56]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c2:	f000 f821 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 80054c6:	4602      	mov	r2, r0
 80054c8:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	490a      	ldr	r1, [pc, #40]	@ (80054fc <HAL_RCC_ClockConfig+0x1c0>)
 80054d4:	5ccb      	ldrb	r3, [r1, r3]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	4a09      	ldr	r2, [pc, #36]	@ (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054de:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fd fcfc 	bl	8002ee0 <HAL_InitTick>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40023c00 	.word	0x40023c00
 80054f8:	40023800 	.word	0x40023800
 80054fc:	08008e00 	.word	0x08008e00
 8005500:	2000001c 	.word	0x2000001c
 8005504:	20000020 	.word	0x20000020

08005508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b094      	sub	sp, #80	@ 0x50
 800550e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005520:	4b79      	ldr	r3, [pc, #484]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d00d      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x40>
 800552c:	2b08      	cmp	r3, #8
 800552e:	f200 80e1 	bhi.w	80056f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x34>
 8005536:	2b04      	cmp	r3, #4
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x3a>
 800553a:	e0db      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800553c:	4b73      	ldr	r3, [pc, #460]	@ (800570c <HAL_RCC_GetSysClockFreq+0x204>)
 800553e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005540:	e0db      	b.n	80056fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005542:	4b73      	ldr	r3, [pc, #460]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x208>)
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005546:	e0d8      	b.n	80056fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005548:	4b6f      	ldr	r3, [pc, #444]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005550:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005552:	4b6d      	ldr	r3, [pc, #436]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d063      	beq.n	8005626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555e:	4b6a      	ldr	r3, [pc, #424]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	2200      	movs	r2, #0
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005568:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
 8005572:	2300      	movs	r3, #0
 8005574:	637b      	str	r3, [r7, #52]	@ 0x34
 8005576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800557a:	4622      	mov	r2, r4
 800557c:	462b      	mov	r3, r5
 800557e:	f04f 0000 	mov.w	r0, #0
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	0159      	lsls	r1, r3, #5
 8005588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558c:	0150      	lsls	r0, r2, #5
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4621      	mov	r1, r4
 8005594:	1a51      	subs	r1, r2, r1
 8005596:	6139      	str	r1, [r7, #16]
 8005598:	4629      	mov	r1, r5
 800559a:	eb63 0301 	sbc.w	r3, r3, r1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055ac:	4659      	mov	r1, fp
 80055ae:	018b      	lsls	r3, r1, #6
 80055b0:	4651      	mov	r1, sl
 80055b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b6:	4651      	mov	r1, sl
 80055b8:	018a      	lsls	r2, r1, #6
 80055ba:	4651      	mov	r1, sl
 80055bc:	ebb2 0801 	subs.w	r8, r2, r1
 80055c0:	4659      	mov	r1, fp
 80055c2:	eb63 0901 	sbc.w	r9, r3, r1
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055da:	4690      	mov	r8, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	eb18 0303 	adds.w	r3, r8, r3
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	462b      	mov	r3, r5
 80055e8:	eb49 0303 	adc.w	r3, r9, r3
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055fa:	4629      	mov	r1, r5
 80055fc:	024b      	lsls	r3, r1, #9
 80055fe:	4621      	mov	r1, r4
 8005600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005604:	4621      	mov	r1, r4
 8005606:	024a      	lsls	r2, r1, #9
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800560e:	2200      	movs	r2, #0
 8005610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005618:	f7fa fe42 	bl	80002a0 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4613      	mov	r3, r2
 8005622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005624:	e058      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005626:	4b38      	ldr	r3, [pc, #224]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	099b      	lsrs	r3, r3, #6
 800562c:	2200      	movs	r2, #0
 800562e:	4618      	mov	r0, r3
 8005630:	4611      	mov	r1, r2
 8005632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
 800563c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	0159      	lsls	r1, r3, #5
 800564e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005652:	0150      	lsls	r0, r2, #5
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4641      	mov	r1, r8
 800565a:	ebb2 0a01 	subs.w	sl, r2, r1
 800565e:	4649      	mov	r1, r9
 8005660:	eb63 0b01 	sbc.w	fp, r3, r1
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005678:	ebb2 040a 	subs.w	r4, r2, sl
 800567c:	eb63 050b 	sbc.w	r5, r3, fp
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	00eb      	lsls	r3, r5, #3
 800568a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568e:	00e2      	lsls	r2, r4, #3
 8005690:	4614      	mov	r4, r2
 8005692:	461d      	mov	r5, r3
 8005694:	4643      	mov	r3, r8
 8005696:	18e3      	adds	r3, r4, r3
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	464b      	mov	r3, r9
 800569c:	eb45 0303 	adc.w	r3, r5, r3
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ae:	4629      	mov	r1, r5
 80056b0:	028b      	lsls	r3, r1, #10
 80056b2:	4621      	mov	r1, r4
 80056b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b8:	4621      	mov	r1, r4
 80056ba:	028a      	lsls	r2, r1, #10
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c2:	2200      	movs	r2, #0
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	61fa      	str	r2, [r7, #28]
 80056c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056cc:	f7fa fde8 	bl	80002a0 <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4613      	mov	r3, r2
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x200>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	3301      	adds	r3, #1
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80056e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f2:	e002      	b.n	80056fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <HAL_RCC_GetSysClockFreq+0x204>)
 80056f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3750      	adds	r7, #80	@ 0x50
 8005700:	46bd      	mov	sp, r7
 8005702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005706:	bf00      	nop
 8005708:	40023800 	.word	0x40023800
 800570c:	00f42400 	.word	0x00f42400
 8005710:	007a1200 	.word	0x007a1200

08005714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005718:	4b03      	ldr	r3, [pc, #12]	@ (8005728 <HAL_RCC_GetHCLKFreq+0x14>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	2000001c 	.word	0x2000001c

0800572c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005730:	f7ff fff0 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	4b05      	ldr	r3, [pc, #20]	@ (800574c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	0a9b      	lsrs	r3, r3, #10
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	4903      	ldr	r1, [pc, #12]	@ (8005750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005748:	4618      	mov	r0, r3
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40023800 	.word	0x40023800
 8005750:	08008e10 	.word	0x08008e10

08005754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005784:	2b00      	cmp	r3, #0
 8005786:	d075      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005788:	4b91      	ldr	r3, [pc, #580]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800578e:	f7fd fbeb 	bl	8002f68 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005796:	f7fd fbe7 	bl	8002f68 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e189      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057a8:	4b8a      	ldr	r3, [pc, #552]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	019a      	lsls	r2, r3, #6
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	071b      	lsls	r3, r3, #28
 80057cc:	4981      	ldr	r1, [pc, #516]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01f      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057e0:	4b7c      	ldr	r3, [pc, #496]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	061b      	lsls	r3, r3, #24
 80057fa:	431a      	orrs	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	071b      	lsls	r3, r3, #28
 8005800:	4974      	ldr	r1, [pc, #464]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005808:	4b72      	ldr	r3, [pc, #456]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800580e:	f023 021f 	bic.w	r2, r3, #31
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	3b01      	subs	r3, #1
 8005818:	496e      	ldr	r1, [pc, #440]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	019a      	lsls	r2, r3, #6
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	071b      	lsls	r3, r3, #28
 8005840:	4964      	ldr	r1, [pc, #400]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005848:	4b61      	ldr	r3, [pc, #388]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800584e:	f7fd fb8b 	bl	8002f68 <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005854:	e008      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005856:	f7fd fb87 	bl	8002f68 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e129      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005868:	4b5a      	ldr	r3, [pc, #360]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f0      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	d079      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800588c:	4b52      	ldr	r3, [pc, #328]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005892:	f7fd fb69 	bl	8002f68 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800589a:	f7fd fb65 	bl	8002f68 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e107      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058ac:	4b49      	ldr	r3, [pc, #292]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b8:	d0ef      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d020      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058c6:	4b43      	ldr	r3, [pc, #268]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058cc:	0f1b      	lsrs	r3, r3, #28
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	019a      	lsls	r2, r3, #6
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	431a      	orrs	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	071b      	lsls	r3, r3, #28
 80058e6:	493b      	ldr	r1, [pc, #236]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058ee:	4b39      	ldr	r3, [pc, #228]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	4934      	ldr	r1, [pc, #208]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005914:	4b2f      	ldr	r3, [pc, #188]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	0e1b      	lsrs	r3, r3, #24
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	019a      	lsls	r2, r3, #6
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	4927      	ldr	r1, [pc, #156]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800593c:	4b25      	ldr	r3, [pc, #148]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800593e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005942:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	4922      	ldr	r1, [pc, #136]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005952:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005958:	f7fd fb06 	bl	8002f68 <HAL_GetTick>
 800595c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005960:	f7fd fb02 	bl	8002f68 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e0a4      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005972:	4b18      	ldr	r3, [pc, #96]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800597a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800597e:	d1ef      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 808b 	beq.w	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	4a0f      	ldr	r2, [pc, #60]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599c:	6413      	str	r3, [r2, #64]	@ 0x40
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059aa:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a0b      	ldr	r2, [pc, #44]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059b6:	f7fd fad7 	bl	8002f68 <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059bc:	e010      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059be:	f7fd fad3 	bl	8002f68 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d909      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e075      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80059d0:	42470068 	.word	0x42470068
 80059d4:	40023800 	.word	0x40023800
 80059d8:	42470070 	.word	0x42470070
 80059dc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059e0:	4b38      	ldr	r3, [pc, #224]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0e8      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059ec:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02f      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d028      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a14:	4b2d      	ldr	r3, [pc, #180]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a20:	4a29      	ldr	r2, [pc, #164]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a26:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d114      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a32:	f7fd fa99 	bl	8002f68 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fd fa95 	bl	8002f68 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e035      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ee      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a68:	d10d      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a6a:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7e:	4912      	ldr	r1, [pc, #72]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]
 8005a84:	e005      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a86:	4b10      	ldr	r3, [pc, #64]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a90:	6093      	str	r3, [r2, #8]
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9e:	490a      	ldr	r1, [pc, #40]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005ab6:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005ab8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470e40 	.word	0x42470e40
 8005ad0:	424711e0 	.word	0x424711e0

08005ad4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e01c      	b.n	8005b20 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	795b      	ldrb	r3, [r3, #5]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fd26 	bl	8002548 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0204 	orr.w	r2, r2, #4
 8005b10:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e07b      	b.n	8005c32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b4a:	d009      	beq.n	8005b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e005      	b.n	8005b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fd06 	bl	800258c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 0104 	and.w	r1, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0210 	and.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e01a      	b.n	8005c82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fc fcd9 	bl	800261c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b088      	sub	sp, #32
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9a:	f7fd f965 	bl	8002f68 <HAL_GetTick>
 8005c9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d001      	beq.n	8005cb4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e12a      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Transmit+0x36>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e122      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_SPI_Transmit+0x48>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e11b      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d20:	d10f      	bne.n	8005d42 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d007      	beq.n	8005d60 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d68:	d152      	bne.n	8005e10 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_SPI_Transmit+0xee>
 8005d72:	8b7b      	ldrh	r3, [r7, #26]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d145      	bne.n	8005e04 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d9c:	e032      	b.n	8005e04 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d112      	bne.n	8005dd2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	881a      	ldrh	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005dd0:	e018      	b.n	8005e04 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd2:	f7fd f8c9 	bl	8002f68 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d803      	bhi.n	8005dea <HAL_SPI_Transmit+0x160>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_Transmit+0x166>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e082      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1c7      	bne.n	8005d9e <HAL_SPI_Transmit+0x114>
 8005e0e:	e053      	b.n	8005eb8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Transmit+0x194>
 8005e18:	8b7b      	ldrh	r3, [r7, #26]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d147      	bne.n	8005eae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e44:	e033      	b.n	8005eae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d113      	bne.n	8005e7c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e7a:	e018      	b.n	8005eae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7c:	f7fd f874 	bl	8002f68 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d803      	bhi.n	8005e94 <HAL_SPI_Transmit+0x20a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d102      	bne.n	8005e9a <HAL_SPI_Transmit+0x210>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e02d      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1c6      	bne.n	8005e46 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f8bf 	bl	8006040 <SPI_EndRxTxTransaction>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f20:	b2db      	uxtb	r3, r3
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f40:	f7fd f812 	bl	8002f68 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f50:	f7fd f80a 	bl	8002f68 <HAL_GetTick>
 8005f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f56:	4b39      	ldr	r3, [pc, #228]	@ (800603c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	015b      	lsls	r3, r3, #5
 8005f5c:	0d1b      	lsrs	r3, r3, #20
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f66:	e054      	b.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d050      	beq.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f70:	f7fc fffa 	bl	8002f68 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d902      	bls.n	8005f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d13d      	bne.n	8006002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f9e:	d111      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa8:	d004      	beq.n	8005fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb2:	d107      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fcc:	d10f      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e017      	b.n	8006032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3b01      	subs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4013      	ands	r3, r2
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	429a      	cmp	r2, r3
 800602e:	d19b      	bne.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	2000001c 	.word	0x2000001c

08006040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2201      	movs	r2, #1
 8006054:	2102      	movs	r1, #2
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ff6a 	bl	8005f30 <SPI_WaitFlagStateUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e032      	b.n	80060d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006072:	4b1b      	ldr	r3, [pc, #108]	@ (80060e0 <SPI_EndRxTxTransaction+0xa0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <SPI_EndRxTxTransaction+0xa4>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	0d5b      	lsrs	r3, r3, #21
 800607e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006090:	d112      	bne.n	80060b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2200      	movs	r2, #0
 800609a:	2180      	movs	r1, #128	@ 0x80
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff ff47 	bl	8005f30 <SPI_WaitFlagStateUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d016      	beq.n	80060d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e00f      	b.n	80060d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b80      	cmp	r3, #128	@ 0x80
 80060d0:	d0f2      	beq.n	80060b8 <SPI_EndRxTxTransaction+0x78>
 80060d2:	e000      	b.n	80060d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80060d4:	bf00      	nop
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2000001c 	.word	0x2000001c
 80060e4:	165e9f81 	.word	0x165e9f81

080060e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e041      	b.n	800617e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fc faa2 	bl	8002658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f000 fa7e 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	d001      	beq.n	80061a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e04e      	b.n	800623e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a23      	ldr	r2, [pc, #140]	@ (800624c <HAL_TIM_Base_Start_IT+0xc4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d022      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	d01d      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006250 <HAL_TIM_Base_Start_IT+0xc8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d018      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1e      	ldr	r2, [pc, #120]	@ (8006254 <HAL_TIM_Base_Start_IT+0xcc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006258 <HAL_TIM_Base_Start_IT+0xd0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00e      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1b      	ldr	r2, [pc, #108]	@ (800625c <HAL_TIM_Base_Start_IT+0xd4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d009      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a19      	ldr	r2, [pc, #100]	@ (8006260 <HAL_TIM_Base_Start_IT+0xd8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d004      	beq.n	8006208 <HAL_TIM_Base_Start_IT+0x80>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a18      	ldr	r2, [pc, #96]	@ (8006264 <HAL_TIM_Base_Start_IT+0xdc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d111      	bne.n	800622c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b06      	cmp	r3, #6
 8006218:	d010      	beq.n	800623c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	e007      	b.n	800623c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40010400 	.word	0x40010400
 8006260:	40014000 	.word	0x40014000
 8006264:	40001800 	.word	0x40001800

08006268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d020      	beq.n	80062cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0202 	mvn.w	r2, #2
 800629c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f999 	bl	80065ea <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f98b 	bl	80065d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f99c 	bl	80065fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d020      	beq.n	8006318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0204 	mvn.w	r2, #4
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f973 	bl	80065ea <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f965 	bl	80065d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f976 	bl	80065fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0208 	mvn.w	r2, #8
 8006334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f94d 	bl	80065ea <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f93f 	bl	80065d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f950 	bl	80065fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0210 	mvn.w	r2, #16
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f927 	bl	80065ea <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f919 	bl	80065d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f92a 	bl	80065fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0201 	mvn.w	r2, #1
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fb fedc 	bl	800218c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fae4 	bl	80069c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8fb 	bl	8006612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0220 	mvn.w	r2, #32
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fab6 	bl	80069ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIM_ConfigClockSource+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e0b4      	b.n	80065ce <HAL_TIM_ConfigClockSource+0x186>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800648a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649c:	d03e      	beq.n	800651c <HAL_TIM_ConfigClockSource+0xd4>
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a2:	f200 8087 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064aa:	f000 8086 	beq.w	80065ba <HAL_TIM_ConfigClockSource+0x172>
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b2:	d87f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b70      	cmp	r3, #112	@ 0x70
 80064b6:	d01a      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0xa6>
 80064b8:	2b70      	cmp	r3, #112	@ 0x70
 80064ba:	d87b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b60      	cmp	r3, #96	@ 0x60
 80064be:	d050      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x11a>
 80064c0:	2b60      	cmp	r3, #96	@ 0x60
 80064c2:	d877      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b50      	cmp	r3, #80	@ 0x50
 80064c6:	d03c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0xfa>
 80064c8:	2b50      	cmp	r3, #80	@ 0x50
 80064ca:	d873      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b40      	cmp	r3, #64	@ 0x40
 80064ce:	d058      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x13a>
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d86f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b30      	cmp	r3, #48	@ 0x30
 80064d6:	d064      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064d8:	2b30      	cmp	r3, #48	@ 0x30
 80064da:	d86b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d060      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d867      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d05a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	e062      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064fe:	f000 f9b9 	bl	8006874 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
      break;
 800651a:	e04f      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800652c:	f000 f9a2 	bl	8006874 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800653e:	609a      	str	r2, [r3, #8]
      break;
 8006540:	e03c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	461a      	mov	r2, r3
 8006550:	f000 f916 	bl	8006780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2150      	movs	r1, #80	@ 0x50
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f96f 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006560:	e02c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 f935 	bl	80067de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2160      	movs	r1, #96	@ 0x60
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f95f 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006580:	e01c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 f8f6 	bl	8006780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2140      	movs	r1, #64	@ 0x40
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f94f 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 80065a0:	e00c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 f946 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 80065b2:	e003      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e000      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a46      	ldr	r2, [pc, #280]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006646:	d00f      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a43      	ldr	r2, [pc, #268]	@ (8006758 <TIM_Base_SetConfig+0x130>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00b      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a42      	ldr	r2, [pc, #264]	@ (800675c <TIM_Base_SetConfig+0x134>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a41      	ldr	r2, [pc, #260]	@ (8006760 <TIM_Base_SetConfig+0x138>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a40      	ldr	r2, [pc, #256]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a35      	ldr	r2, [pc, #212]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d02b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006688:	d027      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a32      	ldr	r2, [pc, #200]	@ (8006758 <TIM_Base_SetConfig+0x130>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d023      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a31      	ldr	r2, [pc, #196]	@ (800675c <TIM_Base_SetConfig+0x134>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01f      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a30      	ldr	r2, [pc, #192]	@ (8006760 <TIM_Base_SetConfig+0x138>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d017      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006768 <TIM_Base_SetConfig+0x140>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <TIM_Base_SetConfig+0x144>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00f      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <TIM_Base_SetConfig+0x148>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006774 <TIM_Base_SetConfig+0x14c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006778 <TIM_Base_SetConfig+0x150>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a29      	ldr	r2, [pc, #164]	@ (800677c <TIM_Base_SetConfig+0x154>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d108      	bne.n	80066ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a10      	ldr	r2, [pc, #64]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a12      	ldr	r2, [pc, #72]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d103      	bne.n	8006728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f023 0201 	bic.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]
  }
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40010400 	.word	0x40010400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800
 8006774:	40001800 	.word	0x40001800
 8006778:	40001c00 	.word	0x40001c00
 800677c:	40002000 	.word	0x40002000

08006780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 030a 	bic.w	r3, r3, #10
 80067bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067de:	b480      	push	{r7}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f023 0210 	bic.w	r2, r3, #16
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	031b      	lsls	r3, r3, #12
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800681a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	f043 0307 	orr.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800688e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	021a      	lsls	r2, r3, #8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	431a      	orrs	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e05a      	b.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a21      	ldr	r2, [pc, #132]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d022      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006918:	d01d      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1d      	ldr	r2, [pc, #116]	@ (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d018      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1b      	ldr	r2, [pc, #108]	@ (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1a      	ldr	r2, [pc, #104]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00e      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a15      	ldr	r2, [pc, #84]	@ (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d10c      	bne.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800695c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40001800 	.word	0x40001800

080069ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <siprintf>:
 80069d4:	b40e      	push	{r1, r2, r3}
 80069d6:	b500      	push	{lr}
 80069d8:	b09c      	sub	sp, #112	@ 0x70
 80069da:	ab1d      	add	r3, sp, #116	@ 0x74
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069e4:	4809      	ldr	r0, [pc, #36]	@ (8006a0c <siprintf+0x38>)
 80069e6:	9107      	str	r1, [sp, #28]
 80069e8:	9104      	str	r1, [sp, #16]
 80069ea:	4909      	ldr	r1, [pc, #36]	@ (8006a10 <siprintf+0x3c>)
 80069ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	a902      	add	r1, sp, #8
 80069f8:	f000 f994 	bl	8006d24 <_svfiprintf_r>
 80069fc:	9b02      	ldr	r3, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	b01c      	add	sp, #112	@ 0x70
 8006a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a08:	b003      	add	sp, #12
 8006a0a:	4770      	bx	lr
 8006a0c:	20000028 	.word	0x20000028
 8006a10:	ffff0208 	.word	0xffff0208

08006a14 <memset>:
 8006a14:	4402      	add	r2, r0
 8006a16:	4603      	mov	r3, r0
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <__errno>:
 8006a24:	4b01      	ldr	r3, [pc, #4]	@ (8006a2c <__errno+0x8>)
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20000028 	.word	0x20000028

08006a30 <__libc_init_array>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	4d0d      	ldr	r5, [pc, #52]	@ (8006a68 <__libc_init_array+0x38>)
 8006a34:	4c0d      	ldr	r4, [pc, #52]	@ (8006a6c <__libc_init_array+0x3c>)
 8006a36:	1b64      	subs	r4, r4, r5
 8006a38:	10a4      	asrs	r4, r4, #2
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	42a6      	cmp	r6, r4
 8006a3e:	d109      	bne.n	8006a54 <__libc_init_array+0x24>
 8006a40:	4d0b      	ldr	r5, [pc, #44]	@ (8006a70 <__libc_init_array+0x40>)
 8006a42:	4c0c      	ldr	r4, [pc, #48]	@ (8006a74 <__libc_init_array+0x44>)
 8006a44:	f000 fc66 	bl	8007314 <_init>
 8006a48:	1b64      	subs	r4, r4, r5
 8006a4a:	10a4      	asrs	r4, r4, #2
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	42a6      	cmp	r6, r4
 8006a50:	d105      	bne.n	8006a5e <__libc_init_array+0x2e>
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a58:	4798      	blx	r3
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7ee      	b.n	8006a3c <__libc_init_array+0xc>
 8006a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a62:	4798      	blx	r3
 8006a64:	3601      	adds	r6, #1
 8006a66:	e7f2      	b.n	8006a4e <__libc_init_array+0x1e>
 8006a68:	08008e54 	.word	0x08008e54
 8006a6c:	08008e54 	.word	0x08008e54
 8006a70:	08008e54 	.word	0x08008e54
 8006a74:	08008e58 	.word	0x08008e58

08006a78 <__retarget_lock_acquire_recursive>:
 8006a78:	4770      	bx	lr

08006a7a <__retarget_lock_release_recursive>:
 8006a7a:	4770      	bx	lr

08006a7c <_free_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4605      	mov	r5, r0
 8006a80:	2900      	cmp	r1, #0
 8006a82:	d041      	beq.n	8006b08 <_free_r+0x8c>
 8006a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a88:	1f0c      	subs	r4, r1, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfb8      	it	lt
 8006a8e:	18e4      	addlt	r4, r4, r3
 8006a90:	f000 f8e0 	bl	8006c54 <__malloc_lock>
 8006a94:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <_free_r+0x90>)
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	b933      	cbnz	r3, 8006aa8 <_free_r+0x2c>
 8006a9a:	6063      	str	r3, [r4, #4]
 8006a9c:	6014      	str	r4, [r2, #0]
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aa4:	f000 b8dc 	b.w	8006c60 <__malloc_unlock>
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d908      	bls.n	8006abe <_free_r+0x42>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	1821      	adds	r1, r4, r0
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	bf01      	itttt	eq
 8006ab4:	6819      	ldreq	r1, [r3, #0]
 8006ab6:	685b      	ldreq	r3, [r3, #4]
 8006ab8:	1809      	addeq	r1, r1, r0
 8006aba:	6021      	streq	r1, [r4, #0]
 8006abc:	e7ed      	b.n	8006a9a <_free_r+0x1e>
 8006abe:	461a      	mov	r2, r3
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	b10b      	cbz	r3, 8006ac8 <_free_r+0x4c>
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d9fa      	bls.n	8006abe <_free_r+0x42>
 8006ac8:	6811      	ldr	r1, [r2, #0]
 8006aca:	1850      	adds	r0, r2, r1
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d10b      	bne.n	8006ae8 <_free_r+0x6c>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	4401      	add	r1, r0
 8006ad4:	1850      	adds	r0, r2, r1
 8006ad6:	4283      	cmp	r3, r0
 8006ad8:	6011      	str	r1, [r2, #0]
 8006ada:	d1e0      	bne.n	8006a9e <_free_r+0x22>
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	6053      	str	r3, [r2, #4]
 8006ae2:	4408      	add	r0, r1
 8006ae4:	6010      	str	r0, [r2, #0]
 8006ae6:	e7da      	b.n	8006a9e <_free_r+0x22>
 8006ae8:	d902      	bls.n	8006af0 <_free_r+0x74>
 8006aea:	230c      	movs	r3, #12
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	e7d6      	b.n	8006a9e <_free_r+0x22>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	1821      	adds	r1, r4, r0
 8006af4:	428b      	cmp	r3, r1
 8006af6:	bf04      	itt	eq
 8006af8:	6819      	ldreq	r1, [r3, #0]
 8006afa:	685b      	ldreq	r3, [r3, #4]
 8006afc:	6063      	str	r3, [r4, #4]
 8006afe:	bf04      	itt	eq
 8006b00:	1809      	addeq	r1, r1, r0
 8006b02:	6021      	streq	r1, [r4, #0]
 8006b04:	6054      	str	r4, [r2, #4]
 8006b06:	e7ca      	b.n	8006a9e <_free_r+0x22>
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20025d5c 	.word	0x20025d5c

08006b10 <sbrk_aligned>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4e0f      	ldr	r6, [pc, #60]	@ (8006b50 <sbrk_aligned+0x40>)
 8006b14:	460c      	mov	r4, r1
 8006b16:	6831      	ldr	r1, [r6, #0]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b911      	cbnz	r1, 8006b22 <sbrk_aligned+0x12>
 8006b1c:	f000 fba6 	bl	800726c <_sbrk_r>
 8006b20:	6030      	str	r0, [r6, #0]
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 fba1 	bl	800726c <_sbrk_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	d103      	bne.n	8006b36 <sbrk_aligned+0x26>
 8006b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b32:	4620      	mov	r0, r4
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
 8006b36:	1cc4      	adds	r4, r0, #3
 8006b38:	f024 0403 	bic.w	r4, r4, #3
 8006b3c:	42a0      	cmp	r0, r4
 8006b3e:	d0f8      	beq.n	8006b32 <sbrk_aligned+0x22>
 8006b40:	1a21      	subs	r1, r4, r0
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 fb92 	bl	800726c <_sbrk_r>
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1f2      	bne.n	8006b32 <sbrk_aligned+0x22>
 8006b4c:	e7ef      	b.n	8006b2e <sbrk_aligned+0x1e>
 8006b4e:	bf00      	nop
 8006b50:	20025d58 	.word	0x20025d58

08006b54 <_malloc_r>:
 8006b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b58:	1ccd      	adds	r5, r1, #3
 8006b5a:	f025 0503 	bic.w	r5, r5, #3
 8006b5e:	3508      	adds	r5, #8
 8006b60:	2d0c      	cmp	r5, #12
 8006b62:	bf38      	it	cc
 8006b64:	250c      	movcc	r5, #12
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	4606      	mov	r6, r0
 8006b6a:	db01      	blt.n	8006b70 <_malloc_r+0x1c>
 8006b6c:	42a9      	cmp	r1, r5
 8006b6e:	d904      	bls.n	8006b7a <_malloc_r+0x26>
 8006b70:	230c      	movs	r3, #12
 8006b72:	6033      	str	r3, [r6, #0]
 8006b74:	2000      	movs	r0, #0
 8006b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c50 <_malloc_r+0xfc>
 8006b7e:	f000 f869 	bl	8006c54 <__malloc_lock>
 8006b82:	f8d8 3000 	ldr.w	r3, [r8]
 8006b86:	461c      	mov	r4, r3
 8006b88:	bb44      	cbnz	r4, 8006bdc <_malloc_r+0x88>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff ffbf 	bl	8006b10 <sbrk_aligned>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	4604      	mov	r4, r0
 8006b96:	d158      	bne.n	8006c4a <_malloc_r+0xf6>
 8006b98:	f8d8 4000 	ldr.w	r4, [r8]
 8006b9c:	4627      	mov	r7, r4
 8006b9e:	2f00      	cmp	r7, #0
 8006ba0:	d143      	bne.n	8006c2a <_malloc_r+0xd6>
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	d04b      	beq.n	8006c3e <_malloc_r+0xea>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4630      	mov	r0, r6
 8006bac:	eb04 0903 	add.w	r9, r4, r3
 8006bb0:	f000 fb5c 	bl	800726c <_sbrk_r>
 8006bb4:	4581      	cmp	r9, r0
 8006bb6:	d142      	bne.n	8006c3e <_malloc_r+0xea>
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	1a6d      	subs	r5, r5, r1
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f7ff ffa6 	bl	8006b10 <sbrk_aligned>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d03a      	beq.n	8006c3e <_malloc_r+0xea>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	442b      	add	r3, r5
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	bb62      	cbnz	r2, 8006c30 <_malloc_r+0xdc>
 8006bd6:	f8c8 7000 	str.w	r7, [r8]
 8006bda:	e00f      	b.n	8006bfc <_malloc_r+0xa8>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	1b52      	subs	r2, r2, r5
 8006be0:	d420      	bmi.n	8006c24 <_malloc_r+0xd0>
 8006be2:	2a0b      	cmp	r2, #11
 8006be4:	d917      	bls.n	8006c16 <_malloc_r+0xc2>
 8006be6:	1961      	adds	r1, r4, r5
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	6025      	str	r5, [r4, #0]
 8006bec:	bf18      	it	ne
 8006bee:	6059      	strne	r1, [r3, #4]
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	bf08      	it	eq
 8006bf4:	f8c8 1000 	streq.w	r1, [r8]
 8006bf8:	5162      	str	r2, [r4, r5]
 8006bfa:	604b      	str	r3, [r1, #4]
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f000 f82f 	bl	8006c60 <__malloc_unlock>
 8006c02:	f104 000b 	add.w	r0, r4, #11
 8006c06:	1d23      	adds	r3, r4, #4
 8006c08:	f020 0007 	bic.w	r0, r0, #7
 8006c0c:	1ac2      	subs	r2, r0, r3
 8006c0e:	bf1c      	itt	ne
 8006c10:	1a1b      	subne	r3, r3, r0
 8006c12:	50a3      	strne	r3, [r4, r2]
 8006c14:	e7af      	b.n	8006b76 <_malloc_r+0x22>
 8006c16:	6862      	ldr	r2, [r4, #4]
 8006c18:	42a3      	cmp	r3, r4
 8006c1a:	bf0c      	ite	eq
 8006c1c:	f8c8 2000 	streq.w	r2, [r8]
 8006c20:	605a      	strne	r2, [r3, #4]
 8006c22:	e7eb      	b.n	8006bfc <_malloc_r+0xa8>
 8006c24:	4623      	mov	r3, r4
 8006c26:	6864      	ldr	r4, [r4, #4]
 8006c28:	e7ae      	b.n	8006b88 <_malloc_r+0x34>
 8006c2a:	463c      	mov	r4, r7
 8006c2c:	687f      	ldr	r7, [r7, #4]
 8006c2e:	e7b6      	b.n	8006b9e <_malloc_r+0x4a>
 8006c30:	461a      	mov	r2, r3
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d1fb      	bne.n	8006c30 <_malloc_r+0xdc>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6053      	str	r3, [r2, #4]
 8006c3c:	e7de      	b.n	8006bfc <_malloc_r+0xa8>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	4630      	mov	r0, r6
 8006c44:	f000 f80c 	bl	8006c60 <__malloc_unlock>
 8006c48:	e794      	b.n	8006b74 <_malloc_r+0x20>
 8006c4a:	6005      	str	r5, [r0, #0]
 8006c4c:	e7d6      	b.n	8006bfc <_malloc_r+0xa8>
 8006c4e:	bf00      	nop
 8006c50:	20025d5c 	.word	0x20025d5c

08006c54 <__malloc_lock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	@ (8006c5c <__malloc_lock+0x8>)
 8006c56:	f7ff bf0f 	b.w	8006a78 <__retarget_lock_acquire_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	20025d54 	.word	0x20025d54

08006c60 <__malloc_unlock>:
 8006c60:	4801      	ldr	r0, [pc, #4]	@ (8006c68 <__malloc_unlock+0x8>)
 8006c62:	f7ff bf0a 	b.w	8006a7a <__retarget_lock_release_recursive>
 8006c66:	bf00      	nop
 8006c68:	20025d54 	.word	0x20025d54

08006c6c <__ssputs_r>:
 8006c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	688e      	ldr	r6, [r1, #8]
 8006c72:	461f      	mov	r7, r3
 8006c74:	42be      	cmp	r6, r7
 8006c76:	680b      	ldr	r3, [r1, #0]
 8006c78:	4682      	mov	sl, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	d82d      	bhi.n	8006cdc <__ssputs_r+0x70>
 8006c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c88:	d026      	beq.n	8006cd8 <__ssputs_r+0x6c>
 8006c8a:	6965      	ldr	r5, [r4, #20]
 8006c8c:	6909      	ldr	r1, [r1, #16]
 8006c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c92:	eba3 0901 	sub.w	r9, r3, r1
 8006c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c9a:	1c7b      	adds	r3, r7, #1
 8006c9c:	444b      	add	r3, r9
 8006c9e:	106d      	asrs	r5, r5, #1
 8006ca0:	429d      	cmp	r5, r3
 8006ca2:	bf38      	it	cc
 8006ca4:	461d      	movcc	r5, r3
 8006ca6:	0553      	lsls	r3, r2, #21
 8006ca8:	d527      	bpl.n	8006cfa <__ssputs_r+0x8e>
 8006caa:	4629      	mov	r1, r5
 8006cac:	f7ff ff52 	bl	8006b54 <_malloc_r>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	b360      	cbz	r0, 8006d0e <__ssputs_r+0xa2>
 8006cb4:	6921      	ldr	r1, [r4, #16]
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	f000 fae8 	bl	800728c <memcpy>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	6126      	str	r6, [r4, #16]
 8006cca:	6165      	str	r5, [r4, #20]
 8006ccc:	444e      	add	r6, r9
 8006cce:	eba5 0509 	sub.w	r5, r5, r9
 8006cd2:	6026      	str	r6, [r4, #0]
 8006cd4:	60a5      	str	r5, [r4, #8]
 8006cd6:	463e      	mov	r6, r7
 8006cd8:	42be      	cmp	r6, r7
 8006cda:	d900      	bls.n	8006cde <__ssputs_r+0x72>
 8006cdc:	463e      	mov	r6, r7
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	f000 faa8 	bl	8007238 <memmove>
 8006ce8:	68a3      	ldr	r3, [r4, #8]
 8006cea:	1b9b      	subs	r3, r3, r6
 8006cec:	60a3      	str	r3, [r4, #8]
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	4433      	add	r3, r6
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	f000 fad4 	bl	80072a8 <_realloc_r>
 8006d00:	4606      	mov	r6, r0
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d1e0      	bne.n	8006cc8 <__ssputs_r+0x5c>
 8006d06:	6921      	ldr	r1, [r4, #16]
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f7ff feb7 	bl	8006a7c <_free_r>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	f8ca 3000 	str.w	r3, [sl]
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e7e9      	b.n	8006cf6 <__ssputs_r+0x8a>
	...

08006d24 <_svfiprintf_r>:
 8006d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	4698      	mov	r8, r3
 8006d2a:	898b      	ldrh	r3, [r1, #12]
 8006d2c:	061b      	lsls	r3, r3, #24
 8006d2e:	b09d      	sub	sp, #116	@ 0x74
 8006d30:	4607      	mov	r7, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4614      	mov	r4, r2
 8006d36:	d510      	bpl.n	8006d5a <_svfiprintf_r+0x36>
 8006d38:	690b      	ldr	r3, [r1, #16]
 8006d3a:	b973      	cbnz	r3, 8006d5a <_svfiprintf_r+0x36>
 8006d3c:	2140      	movs	r1, #64	@ 0x40
 8006d3e:	f7ff ff09 	bl	8006b54 <_malloc_r>
 8006d42:	6028      	str	r0, [r5, #0]
 8006d44:	6128      	str	r0, [r5, #16]
 8006d46:	b930      	cbnz	r0, 8006d56 <_svfiprintf_r+0x32>
 8006d48:	230c      	movs	r3, #12
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b01d      	add	sp, #116	@ 0x74
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	2340      	movs	r3, #64	@ 0x40
 8006d58:	616b      	str	r3, [r5, #20]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	2320      	movs	r3, #32
 8006d60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d68:	2330      	movs	r3, #48	@ 0x30
 8006d6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f08 <_svfiprintf_r+0x1e4>
 8006d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d72:	f04f 0901 	mov.w	r9, #1
 8006d76:	4623      	mov	r3, r4
 8006d78:	469a      	mov	sl, r3
 8006d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d7e:	b10a      	cbz	r2, 8006d84 <_svfiprintf_r+0x60>
 8006d80:	2a25      	cmp	r2, #37	@ 0x25
 8006d82:	d1f9      	bne.n	8006d78 <_svfiprintf_r+0x54>
 8006d84:	ebba 0b04 	subs.w	fp, sl, r4
 8006d88:	d00b      	beq.n	8006da2 <_svfiprintf_r+0x7e>
 8006d8a:	465b      	mov	r3, fp
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff ff6b 	bl	8006c6c <__ssputs_r>
 8006d96:	3001      	adds	r0, #1
 8006d98:	f000 80a7 	beq.w	8006eea <_svfiprintf_r+0x1c6>
 8006d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d9e:	445a      	add	r2, fp
 8006da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006da2:	f89a 3000 	ldrb.w	r3, [sl]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 809f 	beq.w	8006eea <_svfiprintf_r+0x1c6>
 8006dac:	2300      	movs	r3, #0
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006db6:	f10a 0a01 	add.w	sl, sl, #1
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dc4:	4654      	mov	r4, sl
 8006dc6:	2205      	movs	r2, #5
 8006dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dcc:	484e      	ldr	r0, [pc, #312]	@ (8006f08 <_svfiprintf_r+0x1e4>)
 8006dce:	f7f9 fa17 	bl	8000200 <memchr>
 8006dd2:	9a04      	ldr	r2, [sp, #16]
 8006dd4:	b9d8      	cbnz	r0, 8006e0e <_svfiprintf_r+0xea>
 8006dd6:	06d0      	lsls	r0, r2, #27
 8006dd8:	bf44      	itt	mi
 8006dda:	2320      	movmi	r3, #32
 8006ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006de0:	0711      	lsls	r1, r2, #28
 8006de2:	bf44      	itt	mi
 8006de4:	232b      	movmi	r3, #43	@ 0x2b
 8006de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dea:	f89a 3000 	ldrb.w	r3, [sl]
 8006dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df0:	d015      	beq.n	8006e1e <_svfiprintf_r+0xfa>
 8006df2:	9a07      	ldr	r2, [sp, #28]
 8006df4:	4654      	mov	r4, sl
 8006df6:	2000      	movs	r0, #0
 8006df8:	f04f 0c0a 	mov.w	ip, #10
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e02:	3b30      	subs	r3, #48	@ 0x30
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d94b      	bls.n	8006ea0 <_svfiprintf_r+0x17c>
 8006e08:	b1b0      	cbz	r0, 8006e38 <_svfiprintf_r+0x114>
 8006e0a:	9207      	str	r2, [sp, #28]
 8006e0c:	e014      	b.n	8006e38 <_svfiprintf_r+0x114>
 8006e0e:	eba0 0308 	sub.w	r3, r0, r8
 8006e12:	fa09 f303 	lsl.w	r3, r9, r3
 8006e16:	4313      	orrs	r3, r2
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	46a2      	mov	sl, r4
 8006e1c:	e7d2      	b.n	8006dc4 <_svfiprintf_r+0xa0>
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	1d19      	adds	r1, r3, #4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	9103      	str	r1, [sp, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bfbb      	ittet	lt
 8006e2a:	425b      	neglt	r3, r3
 8006e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e30:	9307      	strge	r3, [sp, #28]
 8006e32:	9307      	strlt	r3, [sp, #28]
 8006e34:	bfb8      	it	lt
 8006e36:	9204      	strlt	r2, [sp, #16]
 8006e38:	7823      	ldrb	r3, [r4, #0]
 8006e3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e3c:	d10a      	bne.n	8006e54 <_svfiprintf_r+0x130>
 8006e3e:	7863      	ldrb	r3, [r4, #1]
 8006e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e42:	d132      	bne.n	8006eaa <_svfiprintf_r+0x186>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	9203      	str	r2, [sp, #12]
 8006e4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e50:	3402      	adds	r4, #2
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f18 <_svfiprintf_r+0x1f4>
 8006e58:	7821      	ldrb	r1, [r4, #0]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	f7f9 f9cf 	bl	8000200 <memchr>
 8006e62:	b138      	cbz	r0, 8006e74 <_svfiprintf_r+0x150>
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	eba0 000a 	sub.w	r0, r0, sl
 8006e6a:	2240      	movs	r2, #64	@ 0x40
 8006e6c:	4082      	lsls	r2, r0
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	3401      	adds	r4, #1
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e78:	4824      	ldr	r0, [pc, #144]	@ (8006f0c <_svfiprintf_r+0x1e8>)
 8006e7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e7e:	2206      	movs	r2, #6
 8006e80:	f7f9 f9be 	bl	8000200 <memchr>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d036      	beq.n	8006ef6 <_svfiprintf_r+0x1d2>
 8006e88:	4b21      	ldr	r3, [pc, #132]	@ (8006f10 <_svfiprintf_r+0x1ec>)
 8006e8a:	bb1b      	cbnz	r3, 8006ed4 <_svfiprintf_r+0x1b0>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	3307      	adds	r3, #7
 8006e90:	f023 0307 	bic.w	r3, r3, #7
 8006e94:	3308      	adds	r3, #8
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9a:	4433      	add	r3, r6
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	e76a      	b.n	8006d76 <_svfiprintf_r+0x52>
 8006ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	e7a8      	b.n	8006dfc <_svfiprintf_r+0xd8>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	3401      	adds	r4, #1
 8006eae:	9305      	str	r3, [sp, #20]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f04f 0c0a 	mov.w	ip, #10
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ebc:	3a30      	subs	r2, #48	@ 0x30
 8006ebe:	2a09      	cmp	r2, #9
 8006ec0:	d903      	bls.n	8006eca <_svfiprintf_r+0x1a6>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0c6      	beq.n	8006e54 <_svfiprintf_r+0x130>
 8006ec6:	9105      	str	r1, [sp, #20]
 8006ec8:	e7c4      	b.n	8006e54 <_svfiprintf_r+0x130>
 8006eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ece:	4604      	mov	r4, r0
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e7f0      	b.n	8006eb6 <_svfiprintf_r+0x192>
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4b0e      	ldr	r3, [pc, #56]	@ (8006f14 <_svfiprintf_r+0x1f0>)
 8006edc:	a904      	add	r1, sp, #16
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f3af 8000 	nop.w
 8006ee4:	1c42      	adds	r2, r0, #1
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	d1d6      	bne.n	8006e98 <_svfiprintf_r+0x174>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	065b      	lsls	r3, r3, #25
 8006eee:	f53f af2d 	bmi.w	8006d4c <_svfiprintf_r+0x28>
 8006ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ef4:	e72c      	b.n	8006d50 <_svfiprintf_r+0x2c>
 8006ef6:	ab03      	add	r3, sp, #12
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	462a      	mov	r2, r5
 8006efc:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <_svfiprintf_r+0x1f0>)
 8006efe:	a904      	add	r1, sp, #16
 8006f00:	4638      	mov	r0, r7
 8006f02:	f000 f879 	bl	8006ff8 <_printf_i>
 8006f06:	e7ed      	b.n	8006ee4 <_svfiprintf_r+0x1c0>
 8006f08:	08008e18 	.word	0x08008e18
 8006f0c:	08008e22 	.word	0x08008e22
 8006f10:	00000000 	.word	0x00000000
 8006f14:	08006c6d 	.word	0x08006c6d
 8006f18:	08008e1e 	.word	0x08008e1e

08006f1c <_printf_common>:
 8006f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	4616      	mov	r6, r2
 8006f22:	4698      	mov	r8, r3
 8006f24:	688a      	ldr	r2, [r1, #8]
 8006f26:	690b      	ldr	r3, [r1, #16]
 8006f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bfb8      	it	lt
 8006f30:	4613      	movlt	r3, r2
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f38:	4607      	mov	r7, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b10a      	cbz	r2, 8006f42 <_printf_common+0x26>
 8006f3e:	3301      	adds	r3, #1
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	0699      	lsls	r1, r3, #26
 8006f46:	bf42      	ittt	mi
 8006f48:	6833      	ldrmi	r3, [r6, #0]
 8006f4a:	3302      	addmi	r3, #2
 8006f4c:	6033      	strmi	r3, [r6, #0]
 8006f4e:	6825      	ldr	r5, [r4, #0]
 8006f50:	f015 0506 	ands.w	r5, r5, #6
 8006f54:	d106      	bne.n	8006f64 <_printf_common+0x48>
 8006f56:	f104 0a19 	add.w	sl, r4, #25
 8006f5a:	68e3      	ldr	r3, [r4, #12]
 8006f5c:	6832      	ldr	r2, [r6, #0]
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dc26      	bgt.n	8006fb2 <_printf_common+0x96>
 8006f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	3b00      	subs	r3, #0
 8006f6c:	bf18      	it	ne
 8006f6e:	2301      	movne	r3, #1
 8006f70:	0692      	lsls	r2, r2, #26
 8006f72:	d42b      	bmi.n	8006fcc <_printf_common+0xb0>
 8006f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f78:	4641      	mov	r1, r8
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	47c8      	blx	r9
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d01e      	beq.n	8006fc0 <_printf_common+0xa4>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	f003 0306 	and.w	r3, r3, #6
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	bf02      	ittt	eq
 8006f8e:	68e5      	ldreq	r5, [r4, #12]
 8006f90:	6833      	ldreq	r3, [r6, #0]
 8006f92:	1aed      	subeq	r5, r5, r3
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	bf0c      	ite	eq
 8006f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f9c:	2500      	movne	r5, #0
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	bfc4      	itt	gt
 8006fa2:	1a9b      	subgt	r3, r3, r2
 8006fa4:	18ed      	addgt	r5, r5, r3
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	341a      	adds	r4, #26
 8006faa:	42b5      	cmp	r5, r6
 8006fac:	d11a      	bne.n	8006fe4 <_printf_common+0xc8>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e008      	b.n	8006fc4 <_printf_common+0xa8>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	4638      	mov	r0, r7
 8006fba:	47c8      	blx	r9
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d103      	bne.n	8006fc8 <_printf_common+0xac>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	3501      	adds	r5, #1
 8006fca:	e7c6      	b.n	8006f5a <_printf_common+0x3e>
 8006fcc:	18e1      	adds	r1, r4, r3
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	2030      	movs	r0, #48	@ 0x30
 8006fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fd6:	4422      	add	r2, r4
 8006fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	e7c7      	b.n	8006f74 <_printf_common+0x58>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4641      	mov	r1, r8
 8006fea:	4638      	mov	r0, r7
 8006fec:	47c8      	blx	r9
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d0e6      	beq.n	8006fc0 <_printf_common+0xa4>
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7d9      	b.n	8006faa <_printf_common+0x8e>
	...

08006ff8 <_printf_i>:
 8006ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	7e0f      	ldrb	r7, [r1, #24]
 8006ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007000:	2f78      	cmp	r7, #120	@ 0x78
 8007002:	4691      	mov	r9, r2
 8007004:	4680      	mov	r8, r0
 8007006:	460c      	mov	r4, r1
 8007008:	469a      	mov	sl, r3
 800700a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800700e:	d807      	bhi.n	8007020 <_printf_i+0x28>
 8007010:	2f62      	cmp	r7, #98	@ 0x62
 8007012:	d80a      	bhi.n	800702a <_printf_i+0x32>
 8007014:	2f00      	cmp	r7, #0
 8007016:	f000 80d2 	beq.w	80071be <_printf_i+0x1c6>
 800701a:	2f58      	cmp	r7, #88	@ 0x58
 800701c:	f000 80b9 	beq.w	8007192 <_printf_i+0x19a>
 8007020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007028:	e03a      	b.n	80070a0 <_printf_i+0xa8>
 800702a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800702e:	2b15      	cmp	r3, #21
 8007030:	d8f6      	bhi.n	8007020 <_printf_i+0x28>
 8007032:	a101      	add	r1, pc, #4	@ (adr r1, 8007038 <_printf_i+0x40>)
 8007034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007038:	08007091 	.word	0x08007091
 800703c:	080070a5 	.word	0x080070a5
 8007040:	08007021 	.word	0x08007021
 8007044:	08007021 	.word	0x08007021
 8007048:	08007021 	.word	0x08007021
 800704c:	08007021 	.word	0x08007021
 8007050:	080070a5 	.word	0x080070a5
 8007054:	08007021 	.word	0x08007021
 8007058:	08007021 	.word	0x08007021
 800705c:	08007021 	.word	0x08007021
 8007060:	08007021 	.word	0x08007021
 8007064:	080071a5 	.word	0x080071a5
 8007068:	080070cf 	.word	0x080070cf
 800706c:	0800715f 	.word	0x0800715f
 8007070:	08007021 	.word	0x08007021
 8007074:	08007021 	.word	0x08007021
 8007078:	080071c7 	.word	0x080071c7
 800707c:	08007021 	.word	0x08007021
 8007080:	080070cf 	.word	0x080070cf
 8007084:	08007021 	.word	0x08007021
 8007088:	08007021 	.word	0x08007021
 800708c:	08007167 	.word	0x08007167
 8007090:	6833      	ldr	r3, [r6, #0]
 8007092:	1d1a      	adds	r2, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6032      	str	r2, [r6, #0]
 8007098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800709c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070a0:	2301      	movs	r3, #1
 80070a2:	e09d      	b.n	80071e0 <_printf_i+0x1e8>
 80070a4:	6833      	ldr	r3, [r6, #0]
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	6031      	str	r1, [r6, #0]
 80070ac:	0606      	lsls	r6, r0, #24
 80070ae:	d501      	bpl.n	80070b4 <_printf_i+0xbc>
 80070b0:	681d      	ldr	r5, [r3, #0]
 80070b2:	e003      	b.n	80070bc <_printf_i+0xc4>
 80070b4:	0645      	lsls	r5, r0, #25
 80070b6:	d5fb      	bpl.n	80070b0 <_printf_i+0xb8>
 80070b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070bc:	2d00      	cmp	r5, #0
 80070be:	da03      	bge.n	80070c8 <_printf_i+0xd0>
 80070c0:	232d      	movs	r3, #45	@ 0x2d
 80070c2:	426d      	negs	r5, r5
 80070c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070c8:	4859      	ldr	r0, [pc, #356]	@ (8007230 <_printf_i+0x238>)
 80070ca:	230a      	movs	r3, #10
 80070cc:	e011      	b.n	80070f2 <_printf_i+0xfa>
 80070ce:	6821      	ldr	r1, [r4, #0]
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	0608      	lsls	r0, r1, #24
 80070d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070d8:	d402      	bmi.n	80070e0 <_printf_i+0xe8>
 80070da:	0649      	lsls	r1, r1, #25
 80070dc:	bf48      	it	mi
 80070de:	b2ad      	uxthmi	r5, r5
 80070e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070e2:	4853      	ldr	r0, [pc, #332]	@ (8007230 <_printf_i+0x238>)
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	bf14      	ite	ne
 80070e8:	230a      	movne	r3, #10
 80070ea:	2308      	moveq	r3, #8
 80070ec:	2100      	movs	r1, #0
 80070ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070f2:	6866      	ldr	r6, [r4, #4]
 80070f4:	60a6      	str	r6, [r4, #8]
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	bfa2      	ittt	ge
 80070fa:	6821      	ldrge	r1, [r4, #0]
 80070fc:	f021 0104 	bicge.w	r1, r1, #4
 8007100:	6021      	strge	r1, [r4, #0]
 8007102:	b90d      	cbnz	r5, 8007108 <_printf_i+0x110>
 8007104:	2e00      	cmp	r6, #0
 8007106:	d04b      	beq.n	80071a0 <_printf_i+0x1a8>
 8007108:	4616      	mov	r6, r2
 800710a:	fbb5 f1f3 	udiv	r1, r5, r3
 800710e:	fb03 5711 	mls	r7, r3, r1, r5
 8007112:	5dc7      	ldrb	r7, [r0, r7]
 8007114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007118:	462f      	mov	r7, r5
 800711a:	42bb      	cmp	r3, r7
 800711c:	460d      	mov	r5, r1
 800711e:	d9f4      	bls.n	800710a <_printf_i+0x112>
 8007120:	2b08      	cmp	r3, #8
 8007122:	d10b      	bne.n	800713c <_printf_i+0x144>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	07df      	lsls	r7, r3, #31
 8007128:	d508      	bpl.n	800713c <_printf_i+0x144>
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	6861      	ldr	r1, [r4, #4]
 800712e:	4299      	cmp	r1, r3
 8007130:	bfde      	ittt	le
 8007132:	2330      	movle	r3, #48	@ 0x30
 8007134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800713c:	1b92      	subs	r2, r2, r6
 800713e:	6122      	str	r2, [r4, #16]
 8007140:	f8cd a000 	str.w	sl, [sp]
 8007144:	464b      	mov	r3, r9
 8007146:	aa03      	add	r2, sp, #12
 8007148:	4621      	mov	r1, r4
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fee6 	bl	8006f1c <_printf_common>
 8007150:	3001      	adds	r0, #1
 8007152:	d14a      	bne.n	80071ea <_printf_i+0x1f2>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	b004      	add	sp, #16
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f043 0320 	orr.w	r3, r3, #32
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	4833      	ldr	r0, [pc, #204]	@ (8007234 <_printf_i+0x23c>)
 8007168:	2778      	movs	r7, #120	@ 0x78
 800716a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	6831      	ldr	r1, [r6, #0]
 8007172:	061f      	lsls	r7, r3, #24
 8007174:	f851 5b04 	ldr.w	r5, [r1], #4
 8007178:	d402      	bmi.n	8007180 <_printf_i+0x188>
 800717a:	065f      	lsls	r7, r3, #25
 800717c:	bf48      	it	mi
 800717e:	b2ad      	uxthmi	r5, r5
 8007180:	6031      	str	r1, [r6, #0]
 8007182:	07d9      	lsls	r1, r3, #31
 8007184:	bf44      	itt	mi
 8007186:	f043 0320 	orrmi.w	r3, r3, #32
 800718a:	6023      	strmi	r3, [r4, #0]
 800718c:	b11d      	cbz	r5, 8007196 <_printf_i+0x19e>
 800718e:	2310      	movs	r3, #16
 8007190:	e7ac      	b.n	80070ec <_printf_i+0xf4>
 8007192:	4827      	ldr	r0, [pc, #156]	@ (8007230 <_printf_i+0x238>)
 8007194:	e7e9      	b.n	800716a <_printf_i+0x172>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	f023 0320 	bic.w	r3, r3, #32
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	e7f6      	b.n	800718e <_printf_i+0x196>
 80071a0:	4616      	mov	r6, r2
 80071a2:	e7bd      	b.n	8007120 <_printf_i+0x128>
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	6825      	ldr	r5, [r4, #0]
 80071a8:	6961      	ldr	r1, [r4, #20]
 80071aa:	1d18      	adds	r0, r3, #4
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	062e      	lsls	r6, r5, #24
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0x1c0>
 80071b4:	6019      	str	r1, [r3, #0]
 80071b6:	e002      	b.n	80071be <_printf_i+0x1c6>
 80071b8:	0668      	lsls	r0, r5, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0x1bc>
 80071bc:	8019      	strh	r1, [r3, #0]
 80071be:	2300      	movs	r3, #0
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	4616      	mov	r6, r2
 80071c4:	e7bc      	b.n	8007140 <_printf_i+0x148>
 80071c6:	6833      	ldr	r3, [r6, #0]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	6032      	str	r2, [r6, #0]
 80071cc:	681e      	ldr	r6, [r3, #0]
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	2100      	movs	r1, #0
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7f9 f814 	bl	8000200 <memchr>
 80071d8:	b108      	cbz	r0, 80071de <_printf_i+0x1e6>
 80071da:	1b80      	subs	r0, r0, r6
 80071dc:	6060      	str	r0, [r4, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	2300      	movs	r3, #0
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e8:	e7aa      	b.n	8007140 <_printf_i+0x148>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	4632      	mov	r2, r6
 80071ee:	4649      	mov	r1, r9
 80071f0:	4640      	mov	r0, r8
 80071f2:	47d0      	blx	sl
 80071f4:	3001      	adds	r0, #1
 80071f6:	d0ad      	beq.n	8007154 <_printf_i+0x15c>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	079b      	lsls	r3, r3, #30
 80071fc:	d413      	bmi.n	8007226 <_printf_i+0x22e>
 80071fe:	68e0      	ldr	r0, [r4, #12]
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	4298      	cmp	r0, r3
 8007204:	bfb8      	it	lt
 8007206:	4618      	movlt	r0, r3
 8007208:	e7a6      	b.n	8007158 <_printf_i+0x160>
 800720a:	2301      	movs	r3, #1
 800720c:	4632      	mov	r2, r6
 800720e:	4649      	mov	r1, r9
 8007210:	4640      	mov	r0, r8
 8007212:	47d0      	blx	sl
 8007214:	3001      	adds	r0, #1
 8007216:	d09d      	beq.n	8007154 <_printf_i+0x15c>
 8007218:	3501      	adds	r5, #1
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	9903      	ldr	r1, [sp, #12]
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	42ab      	cmp	r3, r5
 8007222:	dcf2      	bgt.n	800720a <_printf_i+0x212>
 8007224:	e7eb      	b.n	80071fe <_printf_i+0x206>
 8007226:	2500      	movs	r5, #0
 8007228:	f104 0619 	add.w	r6, r4, #25
 800722c:	e7f5      	b.n	800721a <_printf_i+0x222>
 800722e:	bf00      	nop
 8007230:	08008e29 	.word	0x08008e29
 8007234:	08008e3a 	.word	0x08008e3a

08007238 <memmove>:
 8007238:	4288      	cmp	r0, r1
 800723a:	b510      	push	{r4, lr}
 800723c:	eb01 0402 	add.w	r4, r1, r2
 8007240:	d902      	bls.n	8007248 <memmove+0x10>
 8007242:	4284      	cmp	r4, r0
 8007244:	4623      	mov	r3, r4
 8007246:	d807      	bhi.n	8007258 <memmove+0x20>
 8007248:	1e43      	subs	r3, r0, #1
 800724a:	42a1      	cmp	r1, r4
 800724c:	d008      	beq.n	8007260 <memmove+0x28>
 800724e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007256:	e7f8      	b.n	800724a <memmove+0x12>
 8007258:	4402      	add	r2, r0
 800725a:	4601      	mov	r1, r0
 800725c:	428a      	cmp	r2, r1
 800725e:	d100      	bne.n	8007262 <memmove+0x2a>
 8007260:	bd10      	pop	{r4, pc}
 8007262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800726a:	e7f7      	b.n	800725c <memmove+0x24>

0800726c <_sbrk_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d06      	ldr	r5, [pc, #24]	@ (8007288 <_sbrk_r+0x1c>)
 8007270:	2300      	movs	r3, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	f7fb fd9e 	bl	8002db8 <_sbrk>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_sbrk_r+0x1a>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_sbrk_r+0x1a>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20025d50 	.word	0x20025d50

0800728c <memcpy>:
 800728c:	440a      	add	r2, r1
 800728e:	4291      	cmp	r1, r2
 8007290:	f100 33ff 	add.w	r3, r0, #4294967295
 8007294:	d100      	bne.n	8007298 <memcpy+0xc>
 8007296:	4770      	bx	lr
 8007298:	b510      	push	{r4, lr}
 800729a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a2:	4291      	cmp	r1, r2
 80072a4:	d1f9      	bne.n	800729a <memcpy+0xe>
 80072a6:	bd10      	pop	{r4, pc}

080072a8 <_realloc_r>:
 80072a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ac:	4680      	mov	r8, r0
 80072ae:	4615      	mov	r5, r2
 80072b0:	460c      	mov	r4, r1
 80072b2:	b921      	cbnz	r1, 80072be <_realloc_r+0x16>
 80072b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072b8:	4611      	mov	r1, r2
 80072ba:	f7ff bc4b 	b.w	8006b54 <_malloc_r>
 80072be:	b92a      	cbnz	r2, 80072cc <_realloc_r+0x24>
 80072c0:	f7ff fbdc 	bl	8006a7c <_free_r>
 80072c4:	2400      	movs	r4, #0
 80072c6:	4620      	mov	r0, r4
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	f000 f81a 	bl	8007304 <_malloc_usable_size_r>
 80072d0:	4285      	cmp	r5, r0
 80072d2:	4606      	mov	r6, r0
 80072d4:	d802      	bhi.n	80072dc <_realloc_r+0x34>
 80072d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072da:	d8f4      	bhi.n	80072c6 <_realloc_r+0x1e>
 80072dc:	4629      	mov	r1, r5
 80072de:	4640      	mov	r0, r8
 80072e0:	f7ff fc38 	bl	8006b54 <_malloc_r>
 80072e4:	4607      	mov	r7, r0
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d0ec      	beq.n	80072c4 <_realloc_r+0x1c>
 80072ea:	42b5      	cmp	r5, r6
 80072ec:	462a      	mov	r2, r5
 80072ee:	4621      	mov	r1, r4
 80072f0:	bf28      	it	cs
 80072f2:	4632      	movcs	r2, r6
 80072f4:	f7ff ffca 	bl	800728c <memcpy>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4640      	mov	r0, r8
 80072fc:	f7ff fbbe 	bl	8006a7c <_free_r>
 8007300:	463c      	mov	r4, r7
 8007302:	e7e0      	b.n	80072c6 <_realloc_r+0x1e>

08007304 <_malloc_usable_size_r>:
 8007304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007308:	1f18      	subs	r0, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfbc      	itt	lt
 800730e:	580b      	ldrlt	r3, [r1, r0]
 8007310:	18c0      	addlt	r0, r0, r3
 8007312:	4770      	bx	lr

08007314 <_init>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr

08007320 <_fini>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr
